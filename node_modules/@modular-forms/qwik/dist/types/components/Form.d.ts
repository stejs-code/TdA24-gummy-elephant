import type { CSSProperties, ClassList, Signal, QwikSubmitEvent } from '@builder.io/qwik';
import type { ActionStore } from '@builder.io/qwik-city';
import type { JSX } from '@builder.io/qwik/jsx-runtime';
import type { FieldValues, FormActionStore, FormStore, Maybe, MaybePromise, PartialValues, ResponseData } from '../types';
/**
 * Function type to handle the submission of the form.
 */
export type SubmitHandler<TFieldValues extends FieldValues> = (values: TFieldValues, event: QwikSubmitEvent<HTMLFormElement>) => MaybePromise<any>;
/**
 * Value type of the form properties.
 */
export type FormProps<TFieldValues extends FieldValues, TResponseData extends ResponseData> = {
    of: FormStore<TFieldValues, TResponseData>;
    action?: Maybe<ActionStore<FormActionStore<TFieldValues, TResponseData>, PartialValues<TFieldValues>, true>>;
    onSubmit$?: Maybe<SubmitHandler<TFieldValues>>;
    responseDuration?: Maybe<number>;
    keepResponse?: Maybe<boolean>;
    shouldActive?: Maybe<boolean>;
    shouldTouched?: Maybe<boolean>;
    shouldDirty?: Maybe<boolean>;
    shouldFocus?: Maybe<boolean>;
    reloadDocument?: Maybe<boolean>;
    id?: Maybe<string>;
    class?: Maybe<ClassList | Signal<ClassList>>;
    style?: Maybe<string | CSSProperties>;
    autoComplete?: Maybe<'on' | 'off'>;
    encType?: Maybe<'application/x-www-form-urlencoded' | 'multipart/form-data'>;
    name?: Maybe<string>;
    children: any;
};
/**
 * Form element that takes care of validation and simplifies submission.
 */
export declare function Form<TFieldValues extends FieldValues, TResponseData extends ResponseData>({ of: form, action, onSubmit$, responseDuration: duration, keepResponse, shouldActive, shouldTouched, shouldDirty, shouldFocus, reloadDocument, children, ...formProps }: FormProps<TFieldValues, TResponseData>): JSX.Element;
