import type { QwikChangeEvent, QwikFocusEvent, QRL } from '@builder.io/qwik';
import type { JSX } from '@builder.io/qwik/jsx-runtime';
import type { FieldElement, FieldPath, FieldPathValue, FieldStore, FieldType, FieldValues, FormStore, Maybe, MaybeArray, MaybeValue, PartialKey, ResponseData, TransformField, ValidateField } from '../types';
/**
 * Value type of the field element props.
 */
export type FieldElementProps<TFieldValues extends FieldValues, TFieldName extends FieldPath<TFieldValues>> = {
    name: TFieldName;
    autoFocus: boolean;
    ref: (element: Element) => void;
    onInput$: (event: Event, element: FieldElement) => void;
    onChange$: (event: QwikChangeEvent<FieldElement>, element: FieldElement) => void;
    onBlur$: (event: QwikFocusEvent<FieldElement>, element: FieldElement) => void;
};
/**
 * Value type of the field props.
 */
export type FieldProps<TFieldValues extends FieldValues, TResponseData extends ResponseData, TFieldName extends FieldPath<TFieldValues>> = {
    of: FormStore<TFieldValues, TResponseData>;
    name: TFieldName;
    type: FieldType<FieldPathValue<TFieldValues, TFieldName>>;
    children: (store: FieldStore<TFieldValues, TFieldName>, props: FieldElementProps<TFieldValues, TFieldName>) => JSX.Element;
    validate?: Maybe<MaybeArray<QRL<ValidateField<FieldPathValue<TFieldValues, TFieldName>>>>>;
    transform?: Maybe<MaybeArray<QRL<TransformField<FieldPathValue<TFieldValues, TFieldName>>>>>;
    keepActive?: Maybe<boolean>;
    keepState?: Maybe<boolean>;
    key?: Maybe<string | number>;
};
/**
 * Headless form field that provides reactive properties and state.
 */
export declare function Field<TFieldValues extends FieldValues, TResponseData extends ResponseData, TFieldName extends FieldPath<TFieldValues>>({ children, name, type, ...props }: FieldPathValue<TFieldValues, TFieldName> extends MaybeValue<string> ? PartialKey<FieldProps<TFieldValues, TResponseData, TFieldName>, 'type'> : FieldProps<TFieldValues, TResponseData, TFieldName>): JSX.Element;
