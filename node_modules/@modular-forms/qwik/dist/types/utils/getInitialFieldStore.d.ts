import type { FieldPath, FieldPathValue, FieldStore, FieldValues, Maybe } from '../types';
/**
 * Value type of the initial field state.
 */
type InitialFieldState<TFieldValues extends FieldValues, TFieldName extends FieldPath<TFieldValues>> = {
    value: Maybe<FieldPathValue<TFieldValues, TFieldName>>;
    initialValue: Maybe<FieldPathValue<TFieldValues, TFieldName>>;
    error: string;
};
/**
 * Returns the initial store of a field.
 *
 * @param initialState The initial state.
 *
 * @returns The initial store.
 */
export declare function getInitialFieldStore<TFieldValues extends FieldValues, TFieldName extends FieldPath<TFieldValues>>(name: TFieldName, { value, initialValue, error, }?: InitialFieldState<TFieldValues, TFieldName>): FieldStore<TFieldValues, TFieldName>;
export {};
