import type { FieldArrayPath, FieldArrayStore, FieldPath, FieldStore, FieldValues, FormStore, Maybe, ResponseData, ValidationMode } from '../types';
/**
 * Value type of the validate otions.
 */
type ValidateOptions = {
    on: Exclude<ValidationMode, 'submit'>[];
    shouldFocus?: Maybe<boolean>;
};
/**
 * Validates a field or field array only if required.
 *
 * @param form The form of the field or field array.
 * @param fieldOrFieldArray The store of the field or field array.
 * @param name The name of the field or field array.
 * @param options The validate options.
 */
export declare function validateIfRequired<TFieldValues extends FieldValues, TResponseData extends ResponseData, TFieldName extends FieldPath<TFieldValues>, TFieldArrayName extends FieldArrayPath<TFieldValues>>(form: FormStore<TFieldValues, TResponseData>, fieldOrFieldArray: FieldStore<TFieldValues, TFieldName> | FieldArrayStore<TFieldValues, TFieldArrayName>, name: TFieldName | TFieldArrayName, { on: modes, shouldFocus }: ValidateOptions): void;
export {};
