import { type QRL } from '@builder.io/qwik';
import { type RequestEventAction, type Action } from '@builder.io/qwik-city';
import type { FieldValues, ResponseData, FormResponse, Maybe, FormErrors, MaybePromise, ValidateForm, FormDataInfo, FormActionStore, PartialValues } from '../types';
/**
 * Value type of the form action result.
 */
export type FormActionResult<TFieldValues extends FieldValues, TResponseData extends ResponseData> = FormResponse<TResponseData> & {
    errors?: Maybe<FormErrors<TFieldValues>>;
};
/**
 * Function type of the form action.
 */
export type FormActionFunction<TFieldValues extends FieldValues, TResponseData extends ResponseData> = (values: TFieldValues, event: RequestEventAction) => MaybePromise<FormActionResult<TFieldValues, TResponseData> | void>;
/**
 * Value type of the second form action argument.
 */
export type FormActionArg2<TFieldValues extends FieldValues> = QRL<ValidateForm<TFieldValues>> | (FormDataInfo<TFieldValues> & {
    validate: QRL<ValidateForm<TFieldValues>>;
});
/**
 * See {@link formAction$}
 */
export declare function formActionQrl<TFieldValues extends FieldValues, TResponseData extends ResponseData = undefined>(action: QRL<FormActionFunction<TFieldValues, TResponseData>>, arg2: FormActionArg2<TFieldValues>): Action<FormActionStore<TFieldValues, TResponseData>, PartialValues<TFieldValues>, true>;
/**
 * Creates an action for progressively enhanced forms that handles validation
 * and submission on the server.
 *
 * @param action The server action function.
 * @param arg2 Validation and/or form data info.
 *
 * @returns Form action constructor.
 */
export declare const formAction$: <TFieldValues extends FieldValues, TResponseData extends ResponseData = undefined>(actionQrl: FormActionFunction<TFieldValues, TResponseData>, arg2: FormActionArg2<TFieldValues>) => Action<FormActionStore<TFieldValues, TResponseData>, PartialValues<TFieldValues>, true>;
