{"version":3,"file":"core.mjs","sources":["../../../dist-dev/tsc-out/packages/qwik/src/core/util/implicit_dollar.js","../../../dist-dev/tsc-out/packages/qwik/src/core/util/qdev.js","../../../dist-dev/tsc-out/packages/qwik/src/core/util/element.js","../../../dist-dev/tsc-out/packages/qwik/src/core/util/log.js","../../../dist-dev/tsc-out/packages/qwik/src/core/error/error.js","../../../dist-dev/tsc-out/packages/qwik/src/core/platform/platform.js","../../../dist-dev/tsc-out/packages/qwik/src/core/error/assert.js","../../../dist-dev/tsc-out/packages/qwik/src/core/util/types.js","../../../dist-dev/tsc-out/packages/qwik/src/core/util/promises.js","../../../dist-dev/tsc-out/packages/qwik/src/core/util/flyweight.js","../../../dist-dev/tsc-out/packages/qwik/src/core/util/dom.js","../../../dist-dev/tsc-out/packages/qwik/src/core/util/markers.js","../../../dist-dev/tsc-out/packages/qwik/src/core/state/constants.js","../../../dist-dev/tsc-out/packages/qwik/src/core/render/fast-calls.js","../../../dist-dev/tsc-out/packages/qwik/src/core/util/case.js","../../../dist-dev/tsc-out/packages/qwik/src/core/container/container.js","../../../dist-dev/tsc-out/packages/qwik/src/core/state/listeners.js","../../../dist-dev/tsc-out/packages/qwik/src/core/use/use-on.js","../../../dist-dev/tsc-out/packages/qwik/src/core/util/event.js","../../../dist-dev/tsc-out/packages/qwik/src/core/qrl/inlined-fn.js","../../../dist-dev/tsc-out/packages/qwik/src/core/state/signal.js","../../../dist-dev/tsc-out/packages/qwik/src/core/state/store.js","../../../dist-dev/tsc-out/packages/qwik/src/core/version.js","../../../dist-dev/tsc-out/packages/qwik/src/core/util/hash_code.js","../../../dist-dev/tsc-out/packages/qwik/src/core/style/qrl-styles.js","../../../dist-dev/tsc-out/packages/qwik/src/core/render/ssr/render-ssr.js","../../../dist-dev/tsc-out/packages/qwik/src/core/render/jsx/jsx-runtime.js","../../../dist-dev/tsc-out/packages/qwik/src/core/render/jsx/utils.public.js","../../../dist-dev/tsc-out/packages/qwik/src/core/render/dom/render-dom.js","../../../dist-dev/tsc-out/packages/qwik/src/core/container/resume.js","../../../dist-dev/tsc-out/packages/qwik/src/core/use/use-lexical-scope.public.js","../../../dist-dev/tsc-out/packages/qwik/src/core/render/dom/signals.js","../../../dist-dev/tsc-out/packages/qwik/src/core/render/dom/notify-render.js","../../../dist-dev/tsc-out/packages/qwik/src/core/use/use-sequential-scope.js","../../../dist-dev/tsc-out/packages/qwik/src/core/use/use-context.js","../../../dist-dev/tsc-out/packages/qwik/src/core/render/error-handling.js","../../../dist-dev/tsc-out/packages/qwik/src/core/use/use-task.js","../../../dist-dev/tsc-out/packages/qwik/src/testing/html.js","../../../dist-dev/tsc-out/packages/qwik/src/core/state/context.js","../../../dist-dev/tsc-out/packages/qwik/src/core/use/use-locale.js","../../../dist-dev/tsc-out/packages/qwik/src/core/use/use-core.js","../../../dist-dev/tsc-out/packages/qwik/src/core/util/unitless_number.js","../../../dist-dev/tsc-out/packages/qwik/src/core/render/execute-component.js","../../../dist-dev/tsc-out/packages/qwik/src/core/render/dom/visitor.js","../../../dist-dev/tsc-out/packages/qwik/src/core/render/dom/operations.js","../../../dist-dev/tsc-out/packages/qwik/src/core/render/dom/virtual-element.js","../../../dist-dev/tsc-out/packages/qwik/src/core/container/pause.js","../../../dist-dev/tsc-out/packages/qwik/src/core/qrl/qrl.js","../../../dist-dev/tsc-out/packages/qwik/src/core/use/use-resource.js","../../../dist-dev/tsc-out/packages/qwik/src/core/render/jsx/slot.public.js","../../../dist-dev/tsc-out/packages/qwik/src/core/container/serializers.js","../../../dist-dev/tsc-out/packages/qwik/src/core/state/common.js","../../../dist-dev/tsc-out/packages/qwik/src/core/qrl/qrl-class.js","../../../dist-dev/tsc-out/packages/qwik/src/core/qrl/qrl.public.js","../../../dist-dev/tsc-out/packages/qwik/src/core/component/component.public.js","../../../dist-dev/tsc-out/packages/qwik/src/core/render/jsx/factory.js","../../../dist-dev/tsc-out/packages/qwik/src/core/render/dom/render.public.js","../../../dist-dev/tsc-out/packages/qwik/src/core/use/use-store.public.js","../../../dist-dev/tsc-out/packages/qwik/src/core/use/use-id.js","../../../dist-dev/tsc-out/packages/qwik/src/core/use/use-env-data.js","../../../dist-dev/tsc-out/packages/qwik/src/core/style/scoped-stylesheet.js","../../../dist-dev/tsc-out/packages/qwik/src/core/use/use-styles.js","../../../dist-dev/tsc-out/packages/qwik/src/core/use/use-signal.js","../../../dist-dev/tsc-out/packages/qwik/src/core/use/use-error-boundary.js"],"sourcesContent":["import { $ } from '../qrl/qrl.public';\n// <docs markdown=\"../readme.md#implicit$FirstArg\">\n// !!DO NOT EDIT THIS COMMENT DIRECTLY!!!\n// (edit ../readme.md#implicit$FirstArg instead)\n/**\n * Create a `____$(...)` convenience method from `___(...)`.\n *\n * It is very common for functions to take a lazy-loadable resource as a first argument. For this\n * reason, the Qwik Optimizer automatically extracts the first argument from any function which ends\n * in `$`.\n *\n * This means that `foo$(arg0)` and `foo($(arg0))` are equivalent with respect to Qwik Optimizer.\n * The former is just a shorthand for the latter.\n *\n * For example, these function calls are equivalent:\n *\n * - `component$(() => {...})` is same as `component($(() => {...}))`\n *\n * ```tsx\n * export function myApi(callback: QRL<() => void>): void {\n *   // ...\n * }\n *\n * export const myApi$ = implicit$FirstArg(myApi);\n * // type of myApi$: (callback: () => void): void\n *\n * // can be used as:\n * myApi$(() => console.log('callback'));\n *\n * // will be transpiled to:\n * // FILE: <current file>\n * myApi(qrl('./chunk-abc.js', 'callback'));\n *\n * // FILE: chunk-abc.js\n * export const callback = () => console.log('callback');\n * ```\n *\n * @param fn - A function that should have its first argument automatically `$`.\n * @public\n */\n// </docs>\nexport const implicit$FirstArg = (fn) => {\n    return function (first, ...rest) {\n        return fn.call(null, $(first), ...rest);\n    };\n};\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW1wbGljaXRfZG9sbGFyLmpzIiwic291cmNlUm9vdCI6Ii4vIiwic291cmNlcyI6WyJwYWNrYWdlcy9xd2lrL3NyYy9jb3JlL3V0aWwvaW1wbGljaXRfZG9sbGFyLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxDQUFDLEVBQVksTUFBTSxtQkFBbUIsQ0FBQztBQUVoRCxtREFBbUQ7QUFDbkQseUNBQXlDO0FBQ3pDLGdEQUFnRDtBQUNoRDs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7R0FtQ0c7QUFDSCxVQUFVO0FBQ1YsTUFBTSxDQUFDLE1BQU0saUJBQWlCLEdBQUcsQ0FDL0IsRUFBNkMsRUFDTCxFQUFFO0lBQzFDLE9BQU8sVUFBVSxLQUFZLEVBQUUsR0FBRyxJQUFVO1FBQzFDLE9BQU8sRUFBRSxDQUFDLElBQUksQ0FBQyxJQUFJLEVBQUUsQ0FBQyxDQUFDLEtBQUssQ0FBQyxFQUFFLEdBQUcsSUFBSSxDQUFDLENBQUM7SUFDMUMsQ0FBQyxDQUFDO0FBQ0osQ0FBQyxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgJCwgdHlwZSBRUkwgfSBmcm9tICcuLi9xcmwvcXJsLnB1YmxpYyc7XG5cbi8vIDxkb2NzIG1hcmtkb3duPVwiLi4vcmVhZG1lLm1kI2ltcGxpY2l0JEZpcnN0QXJnXCI+XG4vLyAhIURPIE5PVCBFRElUIFRISVMgQ09NTUVOVCBESVJFQ1RMWSEhIVxuLy8gKGVkaXQgLi4vcmVhZG1lLm1kI2ltcGxpY2l0JEZpcnN0QXJnIGluc3RlYWQpXG4vKipcbiAqIENyZWF0ZSBhIGBfX19fJCguLi4pYCBjb252ZW5pZW5jZSBtZXRob2QgZnJvbSBgX19fKC4uLilgLlxuICpcbiAqIEl0IGlzIHZlcnkgY29tbW9uIGZvciBmdW5jdGlvbnMgdG8gdGFrZSBhIGxhenktbG9hZGFibGUgcmVzb3VyY2UgYXMgYSBmaXJzdCBhcmd1bWVudC4gRm9yIHRoaXNcbiAqIHJlYXNvbiwgdGhlIFF3aWsgT3B0aW1pemVyIGF1dG9tYXRpY2FsbHkgZXh0cmFjdHMgdGhlIGZpcnN0IGFyZ3VtZW50IGZyb20gYW55IGZ1bmN0aW9uIHdoaWNoIGVuZHNcbiAqIGluIGAkYC5cbiAqXG4gKiBUaGlzIG1lYW5zIHRoYXQgYGZvbyQoYXJnMClgIGFuZCBgZm9vKCQoYXJnMCkpYCBhcmUgZXF1aXZhbGVudCB3aXRoIHJlc3BlY3QgdG8gUXdpayBPcHRpbWl6ZXIuXG4gKiBUaGUgZm9ybWVyIGlzIGp1c3QgYSBzaG9ydGhhbmQgZm9yIHRoZSBsYXR0ZXIuXG4gKlxuICogRm9yIGV4YW1wbGUsIHRoZXNlIGZ1bmN0aW9uIGNhbGxzIGFyZSBlcXVpdmFsZW50OlxuICpcbiAqIC0gYGNvbXBvbmVudCQoKCkgPT4gey4uLn0pYCBpcyBzYW1lIGFzIGBjb21wb25lbnQoJCgoKSA9PiB7Li4ufSkpYFxuICpcbiAqIGBgYHRzeFxuICogZXhwb3J0IGZ1bmN0aW9uIG15QXBpKGNhbGxiYWNrOiBRUkw8KCkgPT4gdm9pZD4pOiB2b2lkIHtcbiAqICAgLy8gLi4uXG4gKiB9XG4gKlxuICogZXhwb3J0IGNvbnN0IG15QXBpJCA9IGltcGxpY2l0JEZpcnN0QXJnKG15QXBpKTtcbiAqIC8vIHR5cGUgb2YgbXlBcGkkOiAoY2FsbGJhY2s6ICgpID0+IHZvaWQpOiB2b2lkXG4gKlxuICogLy8gY2FuIGJlIHVzZWQgYXM6XG4gKiBteUFwaSQoKCkgPT4gY29uc29sZS5sb2coJ2NhbGxiYWNrJykpO1xuICpcbiAqIC8vIHdpbGwgYmUgdHJhbnNwaWxlZCB0bzpcbiAqIC8vIEZJTEU6IDxjdXJyZW50IGZpbGU+XG4gKiBteUFwaShxcmwoJy4vY2h1bmstYWJjLmpzJywgJ2NhbGxiYWNrJykpO1xuICpcbiAqIC8vIEZJTEU6IGNodW5rLWFiYy5qc1xuICogZXhwb3J0IGNvbnN0IGNhbGxiYWNrID0gKCkgPT4gY29uc29sZS5sb2coJ2NhbGxiYWNrJyk7XG4gKiBgYGBcbiAqXG4gKiBAcGFyYW0gZm4gLSBBIGZ1bmN0aW9uIHRoYXQgc2hvdWxkIGhhdmUgaXRzIGZpcnN0IGFyZ3VtZW50IGF1dG9tYXRpY2FsbHkgYCRgLlxuICogQHB1YmxpY1xuICovXG4vLyA8L2RvY3M+XG5leHBvcnQgY29uc3QgaW1wbGljaXQkRmlyc3RBcmcgPSA8RklSU1QsIFJFU1QgZXh0ZW5kcyBhbnlbXSwgUkVUPihcbiAgZm46IChmaXJzdDogUVJMPEZJUlNUPiwgLi4ucmVzdDogUkVTVCkgPT4gUkVUXG4pOiAoKGZpcnN0OiBGSVJTVCwgLi4ucmVzdDogUkVTVCkgPT4gUkVUKSA9PiB7XG4gIHJldHVybiBmdW5jdGlvbiAoZmlyc3Q6IEZJUlNULCAuLi5yZXN0OiBSRVNUKTogUkVUIHtcbiAgICByZXR1cm4gZm4uY2FsbChudWxsLCAkKGZpcnN0KSwgLi4ucmVzdCk7XG4gIH07XG59O1xuIl19","export const qDev = globalThis.qDev !== false;\nexport const qInspector = globalThis.qInspector === true;\nexport const qSerialize = globalThis.qSerialize !== false;\nexport const qDynamicPlatform = globalThis.qDynamicPlatform !== false;\nexport const qTest = globalThis.qTest === true;\nexport const qRuntimeQrl = globalThis.qRuntimeQrl === true;\nexport const seal = (obj) => {\n    if (qDev) {\n        Object.seal(obj);\n    }\n};\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicWRldi5qcyIsInNvdXJjZVJvb3QiOiIuLyIsInNvdXJjZXMiOlsicGFja2FnZXMvcXdpay9zcmMvY29yZS91dGlsL3FkZXYudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsTUFBTSxDQUFDLE1BQU0sSUFBSSxHQUFHLFVBQVUsQ0FBQyxJQUFJLEtBQUssS0FBSyxDQUFDO0FBQzlDLE1BQU0sQ0FBQyxNQUFNLFVBQVUsR0FBRyxVQUFVLENBQUMsVUFBVSxLQUFLLElBQUksQ0FBQztBQUN6RCxNQUFNLENBQUMsTUFBTSxVQUFVLEdBQUcsVUFBVSxDQUFDLFVBQVUsS0FBSyxLQUFLLENBQUM7QUFDMUQsTUFBTSxDQUFDLE1BQU0sZ0JBQWdCLEdBQUcsVUFBVSxDQUFDLGdCQUFnQixLQUFLLEtBQUssQ0FBQztBQUN0RSxNQUFNLENBQUMsTUFBTSxLQUFLLEdBQUcsVUFBVSxDQUFDLEtBQUssS0FBSyxJQUFJLENBQUM7QUFDL0MsTUFBTSxDQUFDLE1BQU0sV0FBVyxHQUFHLFVBQVUsQ0FBQyxXQUFXLEtBQUssSUFBSSxDQUFDO0FBRTNELE1BQU0sQ0FBQyxNQUFNLElBQUksR0FBRyxDQUFDLEdBQVEsRUFBRSxFQUFFO0lBQy9CLElBQUksSUFBSSxFQUFFLENBQUM7UUFDVCxNQUFNLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDO0lBQ25CLENBQUM7QUFDSCxDQUFDLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJleHBvcnQgY29uc3QgcURldiA9IGdsb2JhbFRoaXMucURldiAhPT0gZmFsc2U7XG5leHBvcnQgY29uc3QgcUluc3BlY3RvciA9IGdsb2JhbFRoaXMucUluc3BlY3RvciA9PT0gdHJ1ZTtcbmV4cG9ydCBjb25zdCBxU2VyaWFsaXplID0gZ2xvYmFsVGhpcy5xU2VyaWFsaXplICE9PSBmYWxzZTtcbmV4cG9ydCBjb25zdCBxRHluYW1pY1BsYXRmb3JtID0gZ2xvYmFsVGhpcy5xRHluYW1pY1BsYXRmb3JtICE9PSBmYWxzZTtcbmV4cG9ydCBjb25zdCBxVGVzdCA9IGdsb2JhbFRoaXMucVRlc3QgPT09IHRydWU7XG5leHBvcnQgY29uc3QgcVJ1bnRpbWVRcmwgPSBnbG9iYWxUaGlzLnFSdW50aW1lUXJsID09PSB0cnVlO1xuXG5leHBvcnQgY29uc3Qgc2VhbCA9IChvYmo6IGFueSkgPT4ge1xuICBpZiAocURldikge1xuICAgIE9iamVjdC5zZWFsKG9iaik7XG4gIH1cbn07XG5cbmRlY2xhcmUgY29uc3QgZ2xvYmFsVGhpczogYW55O1xuIl19","export const isNode = (value) => {\n    return value && typeof value.nodeType === 'number';\n};\nexport const isDocument = (value) => {\n    return value.nodeType === 9;\n};\nexport const isElement = (value) => {\n    return value.nodeType === 1;\n};\nexport const isQwikElement = (value) => {\n    const nodeType = value.nodeType;\n    return nodeType === 1 || nodeType === 111;\n};\nexport const isNodeElement = (value) => {\n    const nodeType = value.nodeType;\n    return nodeType === 1 || nodeType === 111 || nodeType === 3;\n};\nexport const isVirtualElement = (value) => {\n    return value.nodeType === 111;\n};\nexport const isText = (value) => {\n    return value.nodeType === 3;\n};\nexport const isComment = (value) => {\n    return value.nodeType === 8;\n};\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZWxlbWVudC5qcyIsInNvdXJjZVJvb3QiOiIuLyIsInNvdXJjZXMiOlsicGFja2FnZXMvcXdpay9zcmMvY29yZS91dGlsL2VsZW1lbnQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLE1BQU0sTUFBTSxHQUFHLENBQUMsS0FBVSxFQUFpQixFQUFFO0lBQ2xELE9BQU8sS0FBSyxJQUFJLE9BQU8sS0FBSyxDQUFDLFFBQVEsS0FBSyxRQUFRLENBQUM7QUFDckQsQ0FBQyxDQUFDO0FBRUYsTUFBTSxDQUFDLE1BQU0sVUFBVSxHQUFHLENBQUMsS0FBVyxFQUFxQixFQUFFO0lBQzNELE9BQU8sS0FBSyxDQUFDLFFBQVEsS0FBSyxDQUFDLENBQUM7QUFDOUIsQ0FBQyxDQUFDO0FBRUYsTUFBTSxDQUFDLE1BQU0sU0FBUyxHQUFHLENBQUMsS0FBNEIsRUFBb0IsRUFBRTtJQUMxRSxPQUFPLEtBQUssQ0FBQyxRQUFRLEtBQUssQ0FBQyxDQUFDO0FBQzlCLENBQUMsQ0FBQztBQUVGLE1BQU0sQ0FBQyxNQUFNLGFBQWEsR0FBRyxDQUFDLEtBQTRCLEVBQXdCLEVBQUU7SUFDbEYsTUFBTSxRQUFRLEdBQUcsS0FBSyxDQUFDLFFBQVEsQ0FBQztJQUNoQyxPQUFPLFFBQVEsS0FBSyxDQUFDLElBQUksUUFBUSxLQUFLLEdBQUcsQ0FBQztBQUM1QyxDQUFDLENBQUM7QUFFRixNQUFNLENBQUMsTUFBTSxhQUFhLEdBQUcsQ0FBQyxLQUFVLEVBQXdCLEVBQUU7SUFDaEUsTUFBTSxRQUFRLEdBQUcsS0FBSyxDQUFDLFFBQVEsQ0FBQztJQUNoQyxPQUFPLFFBQVEsS0FBSyxDQUFDLElBQUksUUFBUSxLQUFLLEdBQUcsSUFBSSxRQUFRLEtBQUssQ0FBQyxDQUFDO0FBQzlELENBQUMsQ0FBQztBQUVGLE1BQU0sQ0FBQyxNQUFNLGdCQUFnQixHQUFHLENBQUMsS0FBNEIsRUFBMkIsRUFBRTtJQUN4RixPQUFPLEtBQUssQ0FBQyxRQUFRLEtBQUssR0FBRyxDQUFDO0FBQ2hDLENBQUMsQ0FBQztBQUVGLE1BQU0sQ0FBQyxNQUFNLE1BQU0sR0FBRyxDQUFDLEtBQXlCLEVBQWlCLEVBQUU7SUFDakUsT0FBTyxLQUFLLENBQUMsUUFBUSxLQUFLLENBQUMsQ0FBQztBQUM5QixDQUFDLENBQUM7QUFFRixNQUFNLENBQUMsTUFBTSxTQUFTLEdBQUcsQ0FBQyxLQUF5QixFQUFvQixFQUFFO0lBQ3ZFLE9BQU8sS0FBSyxDQUFDLFFBQVEsS0FBSyxDQUFDLENBQUM7QUFDOUIsQ0FBQyxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHR5cGUgeyBRd2lrRWxlbWVudCwgVmlydHVhbEVsZW1lbnQgfSBmcm9tICcuLi9yZW5kZXIvZG9tL3ZpcnR1YWwtZWxlbWVudCc7XG5cbmV4cG9ydCBjb25zdCBpc05vZGUgPSAodmFsdWU6IGFueSk6IHZhbHVlIGlzIE5vZGUgPT4ge1xuICByZXR1cm4gdmFsdWUgJiYgdHlwZW9mIHZhbHVlLm5vZGVUeXBlID09PSAnbnVtYmVyJztcbn07XG5cbmV4cG9ydCBjb25zdCBpc0RvY3VtZW50ID0gKHZhbHVlOiBOb2RlKTogdmFsdWUgaXMgRG9jdW1lbnQgPT4ge1xuICByZXR1cm4gdmFsdWUubm9kZVR5cGUgPT09IDk7XG59O1xuXG5leHBvcnQgY29uc3QgaXNFbGVtZW50ID0gKHZhbHVlOiBOb2RlIHwgVmlydHVhbEVsZW1lbnQpOiB2YWx1ZSBpcyBFbGVtZW50ID0+IHtcbiAgcmV0dXJuIHZhbHVlLm5vZGVUeXBlID09PSAxO1xufTtcblxuZXhwb3J0IGNvbnN0IGlzUXdpa0VsZW1lbnQgPSAodmFsdWU6IE5vZGUgfCBWaXJ0dWFsRWxlbWVudCk6IHZhbHVlIGlzIFF3aWtFbGVtZW50ID0+IHtcbiAgY29uc3Qgbm9kZVR5cGUgPSB2YWx1ZS5ub2RlVHlwZTtcbiAgcmV0dXJuIG5vZGVUeXBlID09PSAxIHx8IG5vZGVUeXBlID09PSAxMTE7XG59O1xuXG5leHBvcnQgY29uc3QgaXNOb2RlRWxlbWVudCA9ICh2YWx1ZTogYW55KTogdmFsdWUgaXMgUXdpa0VsZW1lbnQgPT4ge1xuICBjb25zdCBub2RlVHlwZSA9IHZhbHVlLm5vZGVUeXBlO1xuICByZXR1cm4gbm9kZVR5cGUgPT09IDEgfHwgbm9kZVR5cGUgPT09IDExMSB8fCBub2RlVHlwZSA9PT0gMztcbn07XG5cbmV4cG9ydCBjb25zdCBpc1ZpcnR1YWxFbGVtZW50ID0gKHZhbHVlOiBOb2RlIHwgVmlydHVhbEVsZW1lbnQpOiB2YWx1ZSBpcyBWaXJ0dWFsRWxlbWVudCA9PiB7XG4gIHJldHVybiB2YWx1ZS5ub2RlVHlwZSA9PT0gMTExO1xufTtcblxuZXhwb3J0IGNvbnN0IGlzVGV4dCA9ICh2YWx1ZTogTm9kZSB8IFF3aWtFbGVtZW50KTogdmFsdWUgaXMgVGV4dCA9PiB7XG4gIHJldHVybiB2YWx1ZS5ub2RlVHlwZSA9PT0gMztcbn07XG5cbmV4cG9ydCBjb25zdCBpc0NvbW1lbnQgPSAodmFsdWU6IE5vZGUgfCBRd2lrRWxlbWVudCk6IHZhbHVlIGlzIENvbW1lbnQgPT4ge1xuICByZXR1cm4gdmFsdWUubm9kZVR5cGUgPT09IDg7XG59O1xuIl19","import { isElement, isNode } from './element';\nimport { qDev, qTest } from './qdev';\nconst STYLE = qDev\n    ? `background: #564CE0; color: white; padding: 2px 3px; border-radius: 2px; font-size: 0.8em;`\n    : '';\nexport const logError = (message, ...optionalParams) => {\n    return createAndLogError(true, message, ...optionalParams);\n};\nexport const throwErrorAndStop = (message, ...optionalParams) => {\n    const error = createAndLogError(false, message, ...optionalParams);\n    // eslint-disable-next-line no-debugger\n    debugger;\n    throw error;\n};\nexport const logErrorAndStop = (message, ...optionalParams) => {\n    const err = createAndLogError(true, message, ...optionalParams);\n    // eslint-disable-next-line no-debugger\n    debugger;\n    return err;\n};\nconst _printed = /*#__PURE__*/ new Set();\nexport const logOnceWarn = (message, ...optionalParams) => {\n    if (qDev) {\n        const key = 'warn' + String(message);\n        if (!_printed.has(key)) {\n            _printed.add(key);\n            logWarn(message, ...optionalParams);\n        }\n    }\n};\nexport const logWarn = (message, ...optionalParams) => {\n    if (qDev) {\n        console.warn('%cQWIK WARN', STYLE, message, ...printParams(optionalParams));\n    }\n};\nexport const logDebug = (message, ...optionalParams) => {\n    if (qDev) {\n        // eslint-disable-next-line no-console\n        console.debug('%cQWIK', STYLE, message, ...printParams(optionalParams));\n    }\n};\nexport const tryGetContext = (element) => {\n    return element['_qc_'];\n};\nconst printParams = (optionalParams) => {\n    if (qDev) {\n        return optionalParams.map((p) => {\n            if (isNode(p) && isElement(p)) {\n                return printElement(p);\n            }\n            return p;\n        });\n    }\n    return optionalParams;\n};\nconst printElement = (el) => {\n    const ctx = tryGetContext(el);\n    const isServer = /*#__PURE__*/ (() => typeof process !== 'undefined' && !!process.versions && !!process.versions.node)();\n    return {\n        tagName: el.tagName,\n        renderQRL: ctx?.$componentQrl$?.getSymbol(),\n        element: isServer ? undefined : el,\n        ctx: isServer ? undefined : ctx,\n    };\n};\nconst createAndLogError = (asyncThrow, message, ...optionalParams) => {\n    const err = message instanceof Error ? message : new Error(message);\n    const messageStr = err.stack || err.message;\n    console.error('%cQWIK ERROR', STYLE, messageStr, ...printParams(optionalParams));\n    asyncThrow &&\n        !qTest &&\n        setTimeout(() => {\n            // throwing error asynchronously to avoid breaking the current call stack.\n            // We throw so that the error is delivered to the global error handler for\n            // reporting it to a third-party tools such as Qwik Insights, Sentry or New Relic.\n            throw err;\n        }, 0);\n    return err;\n};\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibG9nLmpzIiwic291cmNlUm9vdCI6Ii4vIiwic291cmNlcyI6WyJwYWNrYWdlcy9xd2lrL3NyYy9jb3JlL3V0aWwvbG9nLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLE9BQU8sRUFBRSxTQUFTLEVBQUUsTUFBTSxFQUFFLE1BQU0sV0FBVyxDQUFDO0FBQzlDLE9BQU8sRUFBRSxJQUFJLEVBQUUsS0FBSyxFQUFFLE1BQU0sUUFBUSxDQUFDO0FBRXJDLE1BQU0sS0FBSyxHQUFHLElBQUk7SUFDaEIsQ0FBQyxDQUFDLDRGQUE0RjtJQUM5RixDQUFDLENBQUMsRUFBRSxDQUFDO0FBRVAsTUFBTSxDQUFDLE1BQU0sUUFBUSxHQUFHLENBQUMsT0FBYSxFQUFFLEdBQUcsY0FBcUIsRUFBRSxFQUFFO0lBQ2xFLE9BQU8saUJBQWlCLENBQUMsSUFBSSxFQUFFLE9BQU8sRUFBRSxHQUFHLGNBQWMsQ0FBQyxDQUFDO0FBQzdELENBQUMsQ0FBQztBQUVGLE1BQU0sQ0FBQyxNQUFNLGlCQUFpQixHQUFHLENBQUMsT0FBYSxFQUFFLEdBQUcsY0FBcUIsRUFBUyxFQUFFO0lBQ2xGLE1BQU0sS0FBSyxHQUFHLGlCQUFpQixDQUFDLEtBQUssRUFBRSxPQUFPLEVBQUUsR0FBRyxjQUFjLENBQUMsQ0FBQztJQUNuRSx1Q0FBdUM7SUFDdkMsUUFBUSxDQUFDO0lBQ1QsTUFBTSxLQUFLLENBQUM7QUFDZCxDQUFDLENBQUM7QUFFRixNQUFNLENBQUMsTUFBTSxlQUFlLEdBQUcsQ0FBQyxPQUFhLEVBQUUsR0FBRyxjQUFxQixFQUFFLEVBQUU7SUFDekUsTUFBTSxHQUFHLEdBQUcsaUJBQWlCLENBQUMsSUFBSSxFQUFFLE9BQU8sRUFBRSxHQUFHLGNBQWMsQ0FBQyxDQUFDO0lBQ2hFLHVDQUF1QztJQUN2QyxRQUFRLENBQUM7SUFDVCxPQUFPLEdBQUcsQ0FBQztBQUNiLENBQUMsQ0FBQztBQUVGLE1BQU0sUUFBUSxHQUFHLGFBQWEsQ0FBQyxJQUFJLEdBQUcsRUFBVSxDQUFDO0FBRWpELE1BQU0sQ0FBQyxNQUFNLFdBQVcsR0FBRyxDQUFDLE9BQWEsRUFBRSxHQUFHLGNBQXFCLEVBQUUsRUFBRTtJQUNyRSxJQUFJLElBQUksRUFBRSxDQUFDO1FBQ1QsTUFBTSxHQUFHLEdBQUcsTUFBTSxHQUFHLE1BQU0sQ0FBQyxPQUFPLENBQUMsQ0FBQztRQUNyQyxJQUFJLENBQUMsUUFBUSxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDO1lBQ3ZCLFFBQVEsQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLENBQUM7WUFDbEIsT0FBTyxDQUFDLE9BQU8sRUFBRSxHQUFHLGNBQWMsQ0FBQyxDQUFDO1FBQ3RDLENBQUM7SUFDSCxDQUFDO0FBQ0gsQ0FBQyxDQUFDO0FBRUYsTUFBTSxDQUFDLE1BQU0sT0FBTyxHQUFHLENBQUMsT0FBYSxFQUFFLEdBQUcsY0FBcUIsRUFBRSxFQUFFO0lBQ2pFLElBQUksSUFBSSxFQUFFLENBQUM7UUFDVCxPQUFPLENBQUMsSUFBSSxDQUFDLGFBQWEsRUFBRSxLQUFLLEVBQUUsT0FBTyxFQUFFLEdBQUcsV0FBVyxDQUFDLGNBQWMsQ0FBQyxDQUFDLENBQUM7SUFDOUUsQ0FBQztBQUNILENBQUMsQ0FBQztBQUVGLE1BQU0sQ0FBQyxNQUFNLFFBQVEsR0FBRyxDQUFDLE9BQWdCLEVBQUUsR0FBRyxjQUFxQixFQUFFLEVBQUU7SUFDckUsSUFBSSxJQUFJLEVBQUUsQ0FBQztRQUNULHNDQUFzQztRQUN0QyxPQUFPLENBQUMsS0FBSyxDQUFDLFFBQVEsRUFBRSxLQUFLLEVBQUUsT0FBTyxFQUFFLEdBQUcsV0FBVyxDQUFDLGNBQWMsQ0FBQyxDQUFDLENBQUM7SUFDMUUsQ0FBQztBQUNILENBQUMsQ0FBQztBQUVGLE1BQU0sQ0FBQyxNQUFNLGFBQWEsR0FBRyxDQUFDLE9BQW9CLEVBQXdCLEVBQUU7SUFDMUUsT0FBUSxPQUFlLENBQUMsTUFBTSxDQUFDLENBQUM7QUFDbEMsQ0FBQyxDQUFDO0FBRUYsTUFBTSxXQUFXLEdBQUcsQ0FBQyxjQUFxQixFQUFFLEVBQUU7SUFDNUMsSUFBSSxJQUFJLEVBQUUsQ0FBQztRQUNULE9BQU8sY0FBYyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsRUFBRSxFQUFFO1lBQzlCLElBQUksTUFBTSxDQUFDLENBQUMsQ0FBQyxJQUFJLFNBQVMsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDO2dCQUM5QixPQUFPLFlBQVksQ0FBQyxDQUFDLENBQUMsQ0FBQztZQUN6QixDQUFDO1lBQ0QsT0FBTyxDQUFDLENBQUM7UUFDWCxDQUFDLENBQUMsQ0FBQztJQUNMLENBQUM7SUFDRCxPQUFPLGNBQWMsQ0FBQztBQUN4QixDQUFDLENBQUM7QUFFRixNQUFNLFlBQVksR0FBRyxDQUFDLEVBQVcsRUFBRSxFQUFFO0lBQ25DLE1BQU0sR0FBRyxHQUFHLGFBQWEsQ0FBQyxFQUFFLENBQUMsQ0FBQztJQUM5QixNQUFNLFFBQVEsR0FBWSxhQUFhLENBQUMsQ0FBQyxHQUFHLEVBQUUsQ0FDNUMsT0FBTyxPQUFPLEtBQUssV0FBVyxJQUFJLENBQUMsQ0FBQyxPQUFPLENBQUMsUUFBUSxJQUFJLENBQUMsQ0FBQyxPQUFPLENBQUMsUUFBUSxDQUFDLElBQUksQ0FBQyxFQUFFLENBQUM7SUFFckYsT0FBTztRQUNMLE9BQU8sRUFBRSxFQUFFLENBQUMsT0FBTztRQUNuQixTQUFTLEVBQUUsR0FBRyxFQUFFLGNBQWMsRUFBRSxTQUFTLEVBQUU7UUFDM0MsT0FBTyxFQUFFLFFBQVEsQ0FBQyxDQUFDLENBQUMsU0FBUyxDQUFDLENBQUMsQ0FBQyxFQUFFO1FBQ2xDLEdBQUcsRUFBRSxRQUFRLENBQUMsQ0FBQyxDQUFDLFNBQVMsQ0FBQyxDQUFDLENBQUMsR0FBRztLQUNoQyxDQUFDO0FBQ0osQ0FBQyxDQUFDO0FBRUYsTUFBTSxpQkFBaUIsR0FBRyxDQUFDLFVBQW1CLEVBQUUsT0FBYSxFQUFFLEdBQUcsY0FBcUIsRUFBRSxFQUFFO0lBQ3pGLE1BQU0sR0FBRyxHQUFHLE9BQU8sWUFBWSxLQUFLLENBQUMsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUMsSUFBSSxLQUFLLENBQUMsT0FBTyxDQUFDLENBQUM7SUFDcEUsTUFBTSxVQUFVLEdBQUcsR0FBRyxDQUFDLEtBQUssSUFBSSxHQUFHLENBQUMsT0FBTyxDQUFDO0lBQzVDLE9BQU8sQ0FBQyxLQUFLLENBQUMsY0FBYyxFQUFFLEtBQUssRUFBRSxVQUFVLEVBQUUsR0FBRyxXQUFXLENBQUMsY0FBYyxDQUFDLENBQUMsQ0FBQztJQUNqRixVQUFVO1FBQ1IsQ0FBQyxLQUFLO1FBQ04sVUFBVSxDQUFDLEdBQUcsRUFBRTtZQUNkLDBFQUEwRTtZQUMxRSwwRUFBMEU7WUFDMUUsa0ZBQWtGO1lBQ2xGLE1BQU0sR0FBRyxDQUFDO1FBQ1osQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDO0lBQ1IsT0FBTyxHQUFHLENBQUM7QUFDYixDQUFDLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgdHlwZSB7IFF3aWtFbGVtZW50IH0gZnJvbSAnLi4vcmVuZGVyL2RvbS92aXJ0dWFsLWVsZW1lbnQnO1xuaW1wb3J0IHR5cGUgeyBRQ29udGV4dCB9IGZyb20gJy4uL3N0YXRlL2NvbnRleHQnO1xuaW1wb3J0IHsgaXNFbGVtZW50LCBpc05vZGUgfSBmcm9tICcuL2VsZW1lbnQnO1xuaW1wb3J0IHsgcURldiwgcVRlc3QgfSBmcm9tICcuL3FkZXYnO1xuXG5jb25zdCBTVFlMRSA9IHFEZXZcbiAgPyBgYmFja2dyb3VuZDogIzU2NENFMDsgY29sb3I6IHdoaXRlOyBwYWRkaW5nOiAycHggM3B4OyBib3JkZXItcmFkaXVzOiAycHg7IGZvbnQtc2l6ZTogMC44ZW07YFxuICA6ICcnO1xuXG5leHBvcnQgY29uc3QgbG9nRXJyb3IgPSAobWVzc2FnZT86IGFueSwgLi4ub3B0aW9uYWxQYXJhbXM6IGFueVtdKSA9PiB7XG4gIHJldHVybiBjcmVhdGVBbmRMb2dFcnJvcih0cnVlLCBtZXNzYWdlLCAuLi5vcHRpb25hbFBhcmFtcyk7XG59O1xuXG5leHBvcnQgY29uc3QgdGhyb3dFcnJvckFuZFN0b3AgPSAobWVzc2FnZT86IGFueSwgLi4ub3B0aW9uYWxQYXJhbXM6IGFueVtdKTogbmV2ZXIgPT4ge1xuICBjb25zdCBlcnJvciA9IGNyZWF0ZUFuZExvZ0Vycm9yKGZhbHNlLCBtZXNzYWdlLCAuLi5vcHRpb25hbFBhcmFtcyk7XG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1kZWJ1Z2dlclxuICBkZWJ1Z2dlcjtcbiAgdGhyb3cgZXJyb3I7XG59O1xuXG5leHBvcnQgY29uc3QgbG9nRXJyb3JBbmRTdG9wID0gKG1lc3NhZ2U/OiBhbnksIC4uLm9wdGlvbmFsUGFyYW1zOiBhbnlbXSkgPT4ge1xuICBjb25zdCBlcnIgPSBjcmVhdGVBbmRMb2dFcnJvcih0cnVlLCBtZXNzYWdlLCAuLi5vcHRpb25hbFBhcmFtcyk7XG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1kZWJ1Z2dlclxuICBkZWJ1Z2dlcjtcbiAgcmV0dXJuIGVycjtcbn07XG5cbmNvbnN0IF9wcmludGVkID0gLyojX19QVVJFX18qLyBuZXcgU2V0PHN0cmluZz4oKTtcblxuZXhwb3J0IGNvbnN0IGxvZ09uY2VXYXJuID0gKG1lc3NhZ2U/OiBhbnksIC4uLm9wdGlvbmFsUGFyYW1zOiBhbnlbXSkgPT4ge1xuICBpZiAocURldikge1xuICAgIGNvbnN0IGtleSA9ICd3YXJuJyArIFN0cmluZyhtZXNzYWdlKTtcbiAgICBpZiAoIV9wcmludGVkLmhhcyhrZXkpKSB7XG4gICAgICBfcHJpbnRlZC5hZGQoa2V5KTtcbiAgICAgIGxvZ1dhcm4obWVzc2FnZSwgLi4ub3B0aW9uYWxQYXJhbXMpO1xuICAgIH1cbiAgfVxufTtcblxuZXhwb3J0IGNvbnN0IGxvZ1dhcm4gPSAobWVzc2FnZT86IGFueSwgLi4ub3B0aW9uYWxQYXJhbXM6IGFueVtdKSA9PiB7XG4gIGlmIChxRGV2KSB7XG4gICAgY29uc29sZS53YXJuKCclY1FXSUsgV0FSTicsIFNUWUxFLCBtZXNzYWdlLCAuLi5wcmludFBhcmFtcyhvcHRpb25hbFBhcmFtcykpO1xuICB9XG59O1xuXG5leHBvcnQgY29uc3QgbG9nRGVidWcgPSAobWVzc2FnZT86IHN0cmluZywgLi4ub3B0aW9uYWxQYXJhbXM6IGFueVtdKSA9PiB7XG4gIGlmIChxRGV2KSB7XG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLWNvbnNvbGVcbiAgICBjb25zb2xlLmRlYnVnKCclY1FXSUsnLCBTVFlMRSwgbWVzc2FnZSwgLi4ucHJpbnRQYXJhbXMob3B0aW9uYWxQYXJhbXMpKTtcbiAgfVxufTtcblxuZXhwb3J0IGNvbnN0IHRyeUdldENvbnRleHQgPSAoZWxlbWVudDogUXdpa0VsZW1lbnQpOiBRQ29udGV4dCB8IHVuZGVmaW5lZCA9PiB7XG4gIHJldHVybiAoZWxlbWVudCBhcyBhbnkpWydfcWNfJ107XG59O1xuXG5jb25zdCBwcmludFBhcmFtcyA9IChvcHRpb25hbFBhcmFtczogYW55W10pID0+IHtcbiAgaWYgKHFEZXYpIHtcbiAgICByZXR1cm4gb3B0aW9uYWxQYXJhbXMubWFwKChwKSA9PiB7XG4gICAgICBpZiAoaXNOb2RlKHApICYmIGlzRWxlbWVudChwKSkge1xuICAgICAgICByZXR1cm4gcHJpbnRFbGVtZW50KHApO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHA7XG4gICAgfSk7XG4gIH1cbiAgcmV0dXJuIG9wdGlvbmFsUGFyYW1zO1xufTtcblxuY29uc3QgcHJpbnRFbGVtZW50ID0gKGVsOiBFbGVtZW50KSA9PiB7XG4gIGNvbnN0IGN0eCA9IHRyeUdldENvbnRleHQoZWwpO1xuICBjb25zdCBpc1NlcnZlcjogYm9vbGVhbiA9IC8qI19fUFVSRV9fKi8gKCgpID0+XG4gICAgdHlwZW9mIHByb2Nlc3MgIT09ICd1bmRlZmluZWQnICYmICEhcHJvY2Vzcy52ZXJzaW9ucyAmJiAhIXByb2Nlc3MudmVyc2lvbnMubm9kZSkoKTtcblxuICByZXR1cm4ge1xuICAgIHRhZ05hbWU6IGVsLnRhZ05hbWUsXG4gICAgcmVuZGVyUVJMOiBjdHg/LiRjb21wb25lbnRRcmwkPy5nZXRTeW1ib2woKSxcbiAgICBlbGVtZW50OiBpc1NlcnZlciA/IHVuZGVmaW5lZCA6IGVsLFxuICAgIGN0eDogaXNTZXJ2ZXIgPyB1bmRlZmluZWQgOiBjdHgsXG4gIH07XG59O1xuXG5jb25zdCBjcmVhdGVBbmRMb2dFcnJvciA9IChhc3luY1Rocm93OiBib29sZWFuLCBtZXNzYWdlPzogYW55LCAuLi5vcHRpb25hbFBhcmFtczogYW55W10pID0+IHtcbiAgY29uc3QgZXJyID0gbWVzc2FnZSBpbnN0YW5jZW9mIEVycm9yID8gbWVzc2FnZSA6IG5ldyBFcnJvcihtZXNzYWdlKTtcbiAgY29uc3QgbWVzc2FnZVN0ciA9IGVyci5zdGFjayB8fCBlcnIubWVzc2FnZTtcbiAgY29uc29sZS5lcnJvcignJWNRV0lLIEVSUk9SJywgU1RZTEUsIG1lc3NhZ2VTdHIsIC4uLnByaW50UGFyYW1zKG9wdGlvbmFsUGFyYW1zKSk7XG4gIGFzeW5jVGhyb3cgJiZcbiAgICAhcVRlc3QgJiZcbiAgICBzZXRUaW1lb3V0KCgpID0+IHtcbiAgICAgIC8vIHRocm93aW5nIGVycm9yIGFzeW5jaHJvbm91c2x5IHRvIGF2b2lkIGJyZWFraW5nIHRoZSBjdXJyZW50IGNhbGwgc3RhY2suXG4gICAgICAvLyBXZSB0aHJvdyBzbyB0aGF0IHRoZSBlcnJvciBpcyBkZWxpdmVyZWQgdG8gdGhlIGdsb2JhbCBlcnJvciBoYW5kbGVyIGZvclxuICAgICAgLy8gcmVwb3J0aW5nIGl0IHRvIGEgdGhpcmQtcGFydHkgdG9vbHMgc3VjaCBhcyBRd2lrIEluc2lnaHRzLCBTZW50cnkgb3IgTmV3IFJlbGljLlxuICAgICAgdGhyb3cgZXJyO1xuICAgIH0sIDApO1xuICByZXR1cm4gZXJyO1xufTtcbiJdfQ==","import { logErrorAndStop } from '../util/log';\nimport { qDev } from '../util/qdev';\nexport const QError_stringifyClassOrStyle = 0;\nexport const QError_cannotSerializeNode = 1; // 'Can not serialize a HTML Node that is not an Element'\nexport const QError_runtimeQrlNoElement = 2; // `Q-ERROR: '${qrl}' is runtime but no instance found on element.`\nexport const QError_verifySerializable = 3; // 'Only primitive and object literals can be serialized', value,\nexport const QError_errorWhileRendering = 4; // Crash while rendering\nexport const QError_cannotRenderOverExistingContainer = 5; //'You can render over a existing q:container. Skipping render().'\nexport const QError_setProperty = 6; //'Set property'\nexport const QError_qrlOrError = 7;\nexport const QError_onlyObjectWrapped = 8;\nexport const QError_onlyLiteralWrapped = 9;\nexport const QError_qrlIsNotFunction = 10;\nexport const QError_dynamicImportFailed = 11;\nexport const QError_unknownTypeArgument = 12;\nexport const QError_notFoundContext = 13;\nexport const QError_useMethodOutsideContext = 14;\nexport const QError_missingRenderCtx = 15;\nexport const QError_missingDoc = 16;\nexport const QError_immutableProps = 17;\nexport const QError_hostCanOnlyBeAtRoot = 18;\nexport const QError_immutableJsxProps = 19;\nexport const QError_useInvokeContext = 20;\nexport const QError_containerAlreadyPaused = 21;\nexport const QError_canNotMountUseServerMount = 22;\nexport const QError_rootNodeMustBeHTML = 23;\nexport const QError_strictHTMLChildren = 24;\nexport const QError_invalidJsxNodeType = 25;\nexport const QError_trackUseStore = 26;\nexport const QError_missingObjectId = 27;\nexport const QError_invalidContext = 28;\nexport const QError_canNotRenderHTML = 29;\nexport const QError_qrlMissingContainer = 30;\nexport const QError_qrlMissingChunk = 31;\nexport const QError_invalidRefValue = 32;\nexport const qError = (code, ...parts) => {\n    const text = codeToText(code);\n    return logErrorAndStop(text, ...parts);\n};\nexport const codeToText = (code) => {\n    if (qDev) {\n        const MAP = [\n            'Error while serializing class attribute', // 0\n            'Can not serialize a HTML Node that is not an Element', // 1\n            'Runtime but no instance found on element.', // 2\n            'Only primitive and object literals can be serialized', // 3\n            'Crash while rendering', // 4\n            'You can render over a existing q:container. Skipping render().', // 5\n            'Set property', // 6\n            \"Only function's and 'string's are supported.\", // 7\n            \"Only objects can be wrapped in 'QObject'\", // 8\n            `Only objects literals can be wrapped in 'QObject'`, // 9\n            'QRL is not a function', // 10\n            'Dynamic import not found', // 11\n            'Unknown type argument', // 12\n            'Actual value for useContext() can not be found, make sure some ancestor component has set a value using useContextProvider()', // 13\n            \"Invoking 'use*()' method outside of invocation context.\", // 14\n            'Cant access renderCtx for existing context', // 15\n            'Cant access document for existing context', // 16\n            'props are immutable', // 17\n            '<div> component can only be used at the root of a Qwik component$()', // 18\n            'Props are immutable by default.', // 19\n            `Calling a 'use*()' method outside 'component$(() => { HERE })' is not allowed. 'use*()' methods provide hooks to the 'component$' state and lifecycle, ie 'use' hooks can only be called synchronously within the 'component$' function or another 'use' method.\nFor more information see: https://qwik.builder.io/docs/components/tasks/#use-method-rules`, // 20\n            'Container is already paused. Skipping', // 21\n            'Components using useServerMount() can only be mounted in the server, if you need your component to be mounted in the client, use \"useMount$()\" instead', // 22\n            'When rendering directly on top of Document, the root node must be a <html>', // 23\n            'A <html> node must have 2 children. The first one <head> and the second one a <body>', // 24\n            'Invalid JSXNode type. It must be either a function or a string. Found:', // 25\n            'Tracking value changes can only be done to useStore() objects and component props', // 26\n            'Missing Object ID for captured object', // 27\n            'The provided Context reference is not a valid context created by createContextId()', // 28\n            '<html> is the root container, it can not be rendered inside a component', // 29\n            'QRLs can not be resolved because it does not have an attached container. This means that the QRL does not know where it belongs inside the DOM, so it cant dynamically import() from a relative path.', // 30\n            'QRLs can not be dynamically resolved, because it does not have a chunk path', // 31\n            'The JSX ref attribute must be a Signal', // 32\n        ];\n        return `Code(${code}): ${MAP[code] ?? ''}`;\n    }\n    else {\n        return `Code(${code})`;\n    }\n};\n//# sourceMappingURL=data:application/json;base64,","import { isServer } from '@builder.io/qwik/build';\nimport { qError, QError_qrlMissingChunk, QError_qrlMissingContainer } from '../error/error';\nimport { getSymbolHash } from '../qrl/qrl-class';\nimport { qDynamicPlatform } from '../util/qdev';\nexport const createPlatform = () => {\n    return {\n        isServer,\n        importSymbol(containerEl, url, symbolName) {\n            if (isServer) {\n                const hash = getSymbolHash(symbolName);\n                const regSym = globalThis.__qwik_reg_symbols?.get(hash);\n                if (regSym) {\n                    return regSym;\n                }\n            }\n            if (!url) {\n                throw qError(QError_qrlMissingChunk, symbolName);\n            }\n            if (!containerEl) {\n                throw qError(QError_qrlMissingContainer, url, symbolName);\n            }\n            const urlDoc = toUrl(containerEl.ownerDocument, containerEl, url).toString();\n            const urlCopy = new URL(urlDoc);\n            urlCopy.hash = '';\n            urlCopy.search = '';\n            const importURL = urlCopy.href;\n            return import(/* @vite-ignore */ importURL).then((mod) => {\n                return mod[symbolName];\n            });\n        },\n        raf: (fn) => {\n            return new Promise((resolve) => {\n                requestAnimationFrame(() => {\n                    resolve(fn());\n                });\n            });\n        },\n        nextTick: (fn) => {\n            return new Promise((resolve) => {\n                setTimeout(() => {\n                    resolve(fn());\n                });\n            });\n        },\n        chunkForSymbol(symbolName, chunk) {\n            return [symbolName, chunk ?? '_'];\n        },\n    };\n};\n/**\n * Convert relative base URI and relative URL into a fully qualified URL.\n *\n * @param base -`QRL`s are relative, and therefore they need a base for resolution.\n *\n *   - `Element` use `base.ownerDocument.baseURI`\n *   - `Document` use `base.baseURI`\n *   - `string` use `base` as is\n *   - `QConfig` use `base.baseURI`\n *\n * @param url - Relative URL\n * @returns Fully qualified URL.\n */\nexport const toUrl = (doc, containerEl, url) => {\n    const baseURI = doc.baseURI;\n    const base = new URL(containerEl.getAttribute('q:base') ?? baseURI, baseURI);\n    return new URL(url, base);\n};\nlet _platform = /*#__PURE__ */ createPlatform();\n// <docs markdown=\"./readme.md#setPlatform\">\n// !!DO NOT EDIT THIS COMMENT DIRECTLY!!!\n// (edit ./readme.md#setPlatform instead)\n/**\n * Sets the `CorePlatform`.\n *\n * This is useful to override the platform in tests to change the behavior of,\n * `requestAnimationFrame`, and import resolution.\n *\n * @param doc - The document of the application for which the platform is needed.\n * @param platform - The platform to use.\n * @public\n */\n// </docs>\nexport const setPlatform = (plt) => (_platform = plt);\n// <docs markdown=\"./readme.md#getPlatform\">\n// !!DO NOT EDIT THIS COMMENT DIRECTLY!!!\n// (edit ./readme.md#getPlatform instead)\n/**\n * Retrieve the `CorePlatform`.\n *\n * The `CorePlatform` is also responsible for retrieving the Manifest, that contains mappings from\n * symbols to javascript import chunks. For this reason, `CorePlatform` can't be global, but is\n * specific to the application currently running. On server it is possible that many different\n * applications are running in a single server instance, and for this reason the `CorePlatform` is\n * associated with the application document.\n *\n * @param docOrNode - The document (or node) of the application for which the platform is needed.\n * @public\n */\n// </docs>\nexport const getPlatform = () => {\n    return _platform;\n};\nexport const isServerPlatform = () => {\n    if (qDynamicPlatform) {\n        return _platform.isServer;\n    }\n    return false;\n};\n//# sourceMappingURL=data:application/json;base64,","import { isElement, isQwikElement } from '../util/element';\nimport { throwErrorAndStop } from '../util/log';\nimport { qDev } from '../util/qdev';\nconst ASSERT_DISCLAIMER = 'Internal assert, this is likely caused by a bug in Qwik: ';\nexport function assertDefined(value, text, ...parts) {\n    if (qDev) {\n        if (value != null) {\n            return;\n        }\n        throwErrorAndStop(ASSERT_DISCLAIMER + text, ...parts);\n    }\n}\nexport function assertEqual(value1, value2, text, ...parts) {\n    if (qDev) {\n        if (value1 === value2) {\n            return;\n        }\n        throwErrorAndStop(ASSERT_DISCLAIMER + text, ...parts);\n    }\n}\nexport function assertFail(text, ...parts) {\n    if (qDev) {\n        throwErrorAndStop(ASSERT_DISCLAIMER + text, ...parts);\n    }\n}\nexport function assertTrue(value1, text, ...parts) {\n    if (qDev) {\n        if (value1 === true) {\n            return;\n        }\n        throwErrorAndStop(ASSERT_DISCLAIMER + text, ...parts);\n    }\n}\nexport function assertNumber(value1, text, ...parts) {\n    if (qDev) {\n        if (typeof value1 === 'number') {\n            return;\n        }\n        throwErrorAndStop(ASSERT_DISCLAIMER + text, ...parts);\n    }\n}\nexport function assertString(value1, text, ...parts) {\n    if (qDev) {\n        if (typeof value1 === 'string') {\n            return;\n        }\n        throwErrorAndStop(ASSERT_DISCLAIMER + text, ...parts);\n    }\n}\nexport function assertQwikElement(el) {\n    if (qDev) {\n        if (!isQwikElement(el)) {\n            console.error('Not a Qwik Element, got', el);\n            throwErrorAndStop(ASSERT_DISCLAIMER + 'Not a Qwik Element');\n        }\n    }\n}\nexport function assertElement(el) {\n    if (qDev) {\n        if (!isElement(el)) {\n            console.error('Not a Element, got', el);\n            throwErrorAndStop(ASSERT_DISCLAIMER + 'Not an Element');\n        }\n    }\n}\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYXNzZXJ0LmpzIiwic291cmNlUm9vdCI6Ii4vIiwic291cmNlcyI6WyJwYWNrYWdlcy9xd2lrL3NyYy9jb3JlL2Vycm9yL2Fzc2VydC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFDQSxPQUFPLEVBQUUsU0FBUyxFQUFFLGFBQWEsRUFBRSxNQUFNLGlCQUFpQixDQUFDO0FBQzNELE9BQU8sRUFBRSxpQkFBaUIsRUFBRSxNQUFNLGFBQWEsQ0FBQztBQUNoRCxPQUFPLEVBQUUsSUFBSSxFQUFFLE1BQU0sY0FBYyxDQUFDO0FBRXBDLE1BQU0saUJBQWlCLEdBQUcsMkRBQTJELENBQUM7QUFFdEYsTUFBTSxVQUFVLGFBQWEsQ0FDM0IsS0FBUSxFQUNSLElBQVksRUFDWixHQUFHLEtBQVk7SUFFZixJQUFJLElBQUksRUFBRSxDQUFDO1FBQ1QsSUFBSSxLQUFLLElBQUksSUFBSSxFQUFFLENBQUM7WUFDbEIsT0FBTztRQUNULENBQUM7UUFDRCxpQkFBaUIsQ0FBQyxpQkFBaUIsR0FBRyxJQUFJLEVBQUUsR0FBRyxLQUFLLENBQUMsQ0FBQztJQUN4RCxDQUFDO0FBQ0gsQ0FBQztBQUVELE1BQU0sVUFBVSxXQUFXLENBQ3pCLE1BQVcsRUFDWCxNQUFXLEVBQ1gsSUFBWSxFQUNaLEdBQUcsS0FBWTtJQUVmLElBQUksSUFBSSxFQUFFLENBQUM7UUFDVCxJQUFJLE1BQU0sS0FBSyxNQUFNLEVBQUUsQ0FBQztZQUN0QixPQUFPO1FBQ1QsQ0FBQztRQUNELGlCQUFpQixDQUFDLGlCQUFpQixHQUFHLElBQUksRUFBRSxHQUFHLEtBQUssQ0FBQyxDQUFDO0lBQ3hELENBQUM7QUFDSCxDQUFDO0FBR0QsTUFBTSxVQUFVLFVBQVUsQ0FBQyxJQUFZLEVBQUUsR0FBRyxLQUFZO0lBQ3RELElBQUksSUFBSSxFQUFFLENBQUM7UUFDVCxpQkFBaUIsQ0FBQyxpQkFBaUIsR0FBRyxJQUFJLEVBQUUsR0FBRyxLQUFLLENBQUMsQ0FBQztJQUN4RCxDQUFDO0FBQ0gsQ0FBQztBQUVELE1BQU0sVUFBVSxVQUFVLENBQUMsTUFBVyxFQUFFLElBQVksRUFBRSxHQUFHLEtBQVk7SUFDbkUsSUFBSSxJQUFJLEVBQUUsQ0FBQztRQUNULElBQUksTUFBTSxLQUFLLElBQUksRUFBRSxDQUFDO1lBQ3BCLE9BQU87UUFDVCxDQUFDO1FBQ0QsaUJBQWlCLENBQUMsaUJBQWlCLEdBQUcsSUFBSSxFQUFFLEdBQUcsS0FBSyxDQUFDLENBQUM7SUFDeEQsQ0FBQztBQUNILENBQUM7QUFFRCxNQUFNLFVBQVUsWUFBWSxDQUFDLE1BQVcsRUFBRSxJQUFZLEVBQUUsR0FBRyxLQUFZO0lBQ3JFLElBQUksSUFBSSxFQUFFLENBQUM7UUFDVCxJQUFJLE9BQU8sTUFBTSxLQUFLLFFBQVEsRUFBRSxDQUFDO1lBQy9CLE9BQU87UUFDVCxDQUFDO1FBQ0QsaUJBQWlCLENBQUMsaUJBQWlCLEdBQUcsSUFBSSxFQUFFLEdBQUcsS0FBSyxDQUFDLENBQUM7SUFDeEQsQ0FBQztBQUNILENBQUM7QUFFRCxNQUFNLFVBQVUsWUFBWSxDQUFDLE1BQVcsRUFBRSxJQUFZLEVBQUUsR0FBRyxLQUFZO0lBQ3JFLElBQUksSUFBSSxFQUFFLENBQUM7UUFDVCxJQUFJLE9BQU8sTUFBTSxLQUFLLFFBQVEsRUFBRSxDQUFDO1lBQy9CLE9BQU87UUFDVCxDQUFDO1FBQ0QsaUJBQWlCLENBQUMsaUJBQWlCLEdBQUcsSUFBSSxFQUFFLEdBQUcsS0FBSyxDQUFDLENBQUM7SUFDeEQsQ0FBQztBQUNILENBQUM7QUFFRCxNQUFNLFVBQVUsaUJBQWlCLENBQUMsRUFBTztJQUN2QyxJQUFJLElBQUksRUFBRSxDQUFDO1FBQ1QsSUFBSSxDQUFDLGFBQWEsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDO1lBQ3ZCLE9BQU8sQ0FBQyxLQUFLLENBQUMseUJBQXlCLEVBQUUsRUFBRSxDQUFDLENBQUM7WUFDN0MsaUJBQWlCLENBQUMsaUJBQWlCLEdBQUcsb0JBQW9CLENBQUMsQ0FBQztRQUM5RCxDQUFDO0lBQ0gsQ0FBQztBQUNILENBQUM7QUFFRCxNQUFNLFVBQVUsYUFBYSxDQUFDLEVBQXlCO0lBQ3JELElBQUksSUFBSSxFQUFFLENBQUM7UUFDVCxJQUFJLENBQUMsU0FBUyxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUM7WUFDbkIsT0FBTyxDQUFDLEtBQUssQ0FBQyxvQkFBb0IsRUFBRSxFQUFFLENBQUMsQ0FBQztZQUN4QyxpQkFBaUIsQ0FBQyxpQkFBaUIsR0FBRyxnQkFBZ0IsQ0FBQyxDQUFDO1FBQzFELENBQUM7SUFDSCxDQUFDO0FBQ0gsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB0eXBlIHsgUXdpa0VsZW1lbnQsIFZpcnR1YWxFbGVtZW50IH0gZnJvbSAnLi4vcmVuZGVyL2RvbS92aXJ0dWFsLWVsZW1lbnQnO1xuaW1wb3J0IHsgaXNFbGVtZW50LCBpc1F3aWtFbGVtZW50IH0gZnJvbSAnLi4vdXRpbC9lbGVtZW50JztcbmltcG9ydCB7IHRocm93RXJyb3JBbmRTdG9wIH0gZnJvbSAnLi4vdXRpbC9sb2cnO1xuaW1wb3J0IHsgcURldiB9IGZyb20gJy4uL3V0aWwvcWRldic7XG5cbmNvbnN0IEFTU0VSVF9ESVNDTEFJTUVSID0gJ0ludGVybmFsIGFzc2VydCwgdGhpcyBpcyBsaWtlbHkgY2F1c2VkIGJ5IGEgYnVnIGluIFF3aWs6ICc7XG5cbmV4cG9ydCBmdW5jdGlvbiBhc3NlcnREZWZpbmVkPFQ+KFxuICB2YWx1ZTogVCxcbiAgdGV4dDogc3RyaW5nLFxuICAuLi5wYXJ0czogYW55W11cbik6IGFzc2VydHMgdmFsdWUgaXMgTm9uTnVsbGFibGU8VD4ge1xuICBpZiAocURldikge1xuICAgIGlmICh2YWx1ZSAhPSBudWxsKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIHRocm93RXJyb3JBbmRTdG9wKEFTU0VSVF9ESVNDTEFJTUVSICsgdGV4dCwgLi4ucGFydHMpO1xuICB9XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBhc3NlcnRFcXVhbChcbiAgdmFsdWUxOiBhbnksXG4gIHZhbHVlMjogYW55LFxuICB0ZXh0OiBzdHJpbmcsXG4gIC4uLnBhcnRzOiBhbnlbXVxuKTogYXNzZXJ0cyB2YWx1ZTEgaXMgdHlwZW9mIHZhbHVlMiB7XG4gIGlmIChxRGV2KSB7XG4gICAgaWYgKHZhbHVlMSA9PT0gdmFsdWUyKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIHRocm93RXJyb3JBbmRTdG9wKEFTU0VSVF9ESVNDTEFJTUVSICsgdGV4dCwgLi4ucGFydHMpO1xuICB9XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBhc3NlcnRGYWlsKHRleHQ6IHN0cmluZywgLi4ucGFydHM6IGFueVtdKTogbmV2ZXI7XG5leHBvcnQgZnVuY3Rpb24gYXNzZXJ0RmFpbCh0ZXh0OiBzdHJpbmcsIC4uLnBhcnRzOiBhbnlbXSkge1xuICBpZiAocURldikge1xuICAgIHRocm93RXJyb3JBbmRTdG9wKEFTU0VSVF9ESVNDTEFJTUVSICsgdGV4dCwgLi4ucGFydHMpO1xuICB9XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBhc3NlcnRUcnVlKHZhbHVlMTogYW55LCB0ZXh0OiBzdHJpbmcsIC4uLnBhcnRzOiBhbnlbXSk6IGFzc2VydHMgdmFsdWUxIGlzIHRydWUge1xuICBpZiAocURldikge1xuICAgIGlmICh2YWx1ZTEgPT09IHRydWUpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgdGhyb3dFcnJvckFuZFN0b3AoQVNTRVJUX0RJU0NMQUlNRVIgKyB0ZXh0LCAuLi5wYXJ0cyk7XG4gIH1cbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGFzc2VydE51bWJlcih2YWx1ZTE6IGFueSwgdGV4dDogc3RyaW5nLCAuLi5wYXJ0czogYW55W10pOiBhc3NlcnRzIHZhbHVlMSBpcyBudW1iZXIge1xuICBpZiAocURldikge1xuICAgIGlmICh0eXBlb2YgdmFsdWUxID09PSAnbnVtYmVyJykge1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICB0aHJvd0Vycm9yQW5kU3RvcChBU1NFUlRfRElTQ0xBSU1FUiArIHRleHQsIC4uLnBhcnRzKTtcbiAgfVxufVxuXG5leHBvcnQgZnVuY3Rpb24gYXNzZXJ0U3RyaW5nKHZhbHVlMTogYW55LCB0ZXh0OiBzdHJpbmcsIC4uLnBhcnRzOiBhbnlbXSk6IGFzc2VydHMgdmFsdWUxIGlzIHN0cmluZyB7XG4gIGlmIChxRGV2KSB7XG4gICAgaWYgKHR5cGVvZiB2YWx1ZTEgPT09ICdzdHJpbmcnKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIHRocm93RXJyb3JBbmRTdG9wKEFTU0VSVF9ESVNDTEFJTUVSICsgdGV4dCwgLi4ucGFydHMpO1xuICB9XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBhc3NlcnRRd2lrRWxlbWVudChlbDogYW55KTogYXNzZXJ0cyBlbCBpcyBRd2lrRWxlbWVudCB7XG4gIGlmIChxRGV2KSB7XG4gICAgaWYgKCFpc1F3aWtFbGVtZW50KGVsKSkge1xuICAgICAgY29uc29sZS5lcnJvcignTm90IGEgUXdpayBFbGVtZW50LCBnb3QnLCBlbCk7XG4gICAgICB0aHJvd0Vycm9yQW5kU3RvcChBU1NFUlRfRElTQ0xBSU1FUiArICdOb3QgYSBRd2lrIEVsZW1lbnQnKTtcbiAgICB9XG4gIH1cbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGFzc2VydEVsZW1lbnQoZWw6IE5vZGUgfCBWaXJ0dWFsRWxlbWVudCk6IGFzc2VydHMgZWwgaXMgRWxlbWVudCB7XG4gIGlmIChxRGV2KSB7XG4gICAgaWYgKCFpc0VsZW1lbnQoZWwpKSB7XG4gICAgICBjb25zb2xlLmVycm9yKCdOb3QgYSBFbGVtZW50LCBnb3QnLCBlbCk7XG4gICAgICB0aHJvd0Vycm9yQW5kU3RvcChBU1NFUlRfRElTQ0xBSU1FUiArICdOb3QgYW4gRWxlbWVudCcpO1xuICAgIH1cbiAgfVxufVxuIl19","/** @private */\nexport const isHtmlElement = (node) => {\n    return node ? node.nodeType === 1 : false;\n};\nexport const isSerializableObject = (v) => {\n    const proto = Object.getPrototypeOf(v);\n    return proto === Object.prototype || proto === null;\n};\nexport const isObject = (v) => {\n    return v && typeof v === 'object';\n};\nexport const isArray = (v) => {\n    return Array.isArray(v);\n};\nexport const isString = (v) => {\n    return typeof v === 'string';\n};\nexport const isFunction = (v) => {\n    return typeof v === 'function';\n};\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidHlwZXMuanMiLCJzb3VyY2VSb290IjoiLi8iLCJzb3VyY2VzIjpbInBhY2thZ2VzL3F3aWsvc3JjL2NvcmUvdXRpbC90eXBlcy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxlQUFlO0FBQ2YsTUFBTSxDQUFDLE1BQU0sYUFBYSxHQUFHLENBQUMsSUFBUyxFQUFtQixFQUFFO0lBQzFELE9BQU8sSUFBSSxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsUUFBUSxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUMsS0FBSyxDQUFDO0FBQzVDLENBQUMsQ0FBQztBQUVGLE1BQU0sQ0FBQyxNQUFNLG9CQUFvQixHQUFHLENBQUMsQ0FBTSxFQUFFLEVBQUU7SUFDN0MsTUFBTSxLQUFLLEdBQUcsTUFBTSxDQUFDLGNBQWMsQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUN2QyxPQUFPLEtBQUssS0FBSyxNQUFNLENBQUMsU0FBUyxJQUFJLEtBQUssS0FBSyxJQUFJLENBQUM7QUFDdEQsQ0FBQyxDQUFDO0FBRUYsTUFBTSxDQUFDLE1BQU0sUUFBUSxHQUFHLENBQUMsQ0FBTSxFQUFZLEVBQUU7SUFDM0MsT0FBTyxDQUFDLElBQUksT0FBTyxDQUFDLEtBQUssUUFBUSxDQUFDO0FBQ3BDLENBQUMsQ0FBQztBQUVGLE1BQU0sQ0FBQyxNQUFNLE9BQU8sR0FBRyxDQUFDLENBQU0sRUFBYyxFQUFFO0lBQzVDLE9BQU8sS0FBSyxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUMsQ0FBQztBQUMxQixDQUFDLENBQUM7QUFFRixNQUFNLENBQUMsTUFBTSxRQUFRLEdBQUcsQ0FBQyxDQUFNLEVBQWUsRUFBRTtJQUM5QyxPQUFPLE9BQU8sQ0FBQyxLQUFLLFFBQVEsQ0FBQztBQUMvQixDQUFDLENBQUM7QUFFRixNQUFNLENBQUMsTUFBTSxVQUFVLEdBQUcsQ0FBa0MsQ0FBTSxFQUFVLEVBQUU7SUFDNUUsT0FBTyxPQUFPLENBQUMsS0FBSyxVQUFVLENBQUM7QUFDakMsQ0FBQyxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiLyoqIEBwcml2YXRlICovXG5leHBvcnQgY29uc3QgaXNIdG1sRWxlbWVudCA9IChub2RlOiBhbnkpOiBub2RlIGlzIEVsZW1lbnQgPT4ge1xuICByZXR1cm4gbm9kZSA/IG5vZGUubm9kZVR5cGUgPT09IDEgOiBmYWxzZTtcbn07XG5cbmV4cG9ydCBjb25zdCBpc1NlcmlhbGl6YWJsZU9iamVjdCA9ICh2OiBhbnkpID0+IHtcbiAgY29uc3QgcHJvdG8gPSBPYmplY3QuZ2V0UHJvdG90eXBlT2Yodik7XG4gIHJldHVybiBwcm90byA9PT0gT2JqZWN0LnByb3RvdHlwZSB8fCBwcm90byA9PT0gbnVsbDtcbn07XG5cbmV4cG9ydCBjb25zdCBpc09iamVjdCA9ICh2OiBhbnkpOiB2IGlzIGFueSA9PiB7XG4gIHJldHVybiB2ICYmIHR5cGVvZiB2ID09PSAnb2JqZWN0Jztcbn07XG5cbmV4cG9ydCBjb25zdCBpc0FycmF5ID0gKHY6IGFueSk6IHYgaXMgYW55W10gPT4ge1xuICByZXR1cm4gQXJyYXkuaXNBcnJheSh2KTtcbn07XG5cbmV4cG9ydCBjb25zdCBpc1N0cmluZyA9ICh2OiBhbnkpOiB2IGlzIHN0cmluZyA9PiB7XG4gIHJldHVybiB0eXBlb2YgdiA9PT0gJ3N0cmluZyc7XG59O1xuXG5leHBvcnQgY29uc3QgaXNGdW5jdGlvbiA9IDxUIGV4dGVuZHMgKC4uLmFyZ3M6IGFueSkgPT4gYW55Pih2OiBhbnkpOiB2IGlzIFQgPT4ge1xuICByZXR1cm4gdHlwZW9mIHYgPT09ICdmdW5jdGlvbic7XG59O1xuXG4vKipcbiAqIFR5cGUgcmVwcmVzZW50aW5nIGEgdmFsdWUgd2hpY2ggaXMgZWl0aGVyIHJlc29sdmUgb3IgYSBwcm9taXNlLlxuICpcbiAqIEBwdWJsaWNcbiAqL1xuZXhwb3J0IHR5cGUgVmFsdWVPclByb21pc2U8VD4gPSBUIHwgUHJvbWlzZTxUPjtcbiJdfQ==","export const isPromise = (value) => {\n    // not using \"value instanceof Promise\" to have zone.js support\n    return value && typeof value.then === 'function';\n};\nexport const safeCall = (call, thenFn, rejectFn) => {\n    try {\n        const promise = call();\n        if (isPromise(promise)) {\n            return promise.then(thenFn, rejectFn);\n        }\n        else {\n            return thenFn(promise);\n        }\n    }\n    catch (e) {\n        return rejectFn(e);\n    }\n};\nexport const maybeThen = (promise, thenFn) => {\n    return isPromise(promise) ? promise.then(thenFn) : thenFn(promise);\n};\nexport const promiseAll = (promises) => {\n    const hasPromise = promises.some(isPromise);\n    if (hasPromise) {\n        return Promise.all(promises);\n    }\n    return promises;\n};\nexport const promiseAllLazy = (promises) => {\n    if (promises.length > 0) {\n        return Promise.all(promises);\n    }\n    return promises;\n};\nexport const isNotNullable = (v) => {\n    return v != null;\n};\nexport const delay = (timeout) => {\n    return new Promise((resolve) => {\n        setTimeout(resolve, timeout);\n    });\n};\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicHJvbWlzZXMuanMiLCJzb3VyY2VSb290IjoiLi8iLCJzb3VyY2VzIjpbInBhY2thZ2VzL3F3aWsvc3JjL2NvcmUvdXRpbC9wcm9taXNlcy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFJQSxNQUFNLENBQUMsTUFBTSxTQUFTLEdBQUcsQ0FBQyxLQUFVLEVBQXlCLEVBQUU7SUFDN0QsK0RBQStEO0lBQy9ELE9BQU8sS0FBSyxJQUFJLE9BQU8sS0FBSyxDQUFDLElBQUksS0FBSyxVQUFVLENBQUM7QUFDbkQsQ0FBQyxDQUFDO0FBRUYsTUFBTSxDQUFDLE1BQU0sUUFBUSxHQUFHLENBQ3RCLElBQTZCLEVBQzdCLE1BQThDLEVBQzlDLFFBQTRDLEVBQ3JCLEVBQUU7SUFDekIsSUFBSSxDQUFDO1FBQ0gsTUFBTSxPQUFPLEdBQUcsSUFBSSxFQUFFLENBQUM7UUFDdkIsSUFBSSxTQUFTLENBQUMsT0FBTyxDQUFDLEVBQUUsQ0FBQztZQUN2QixPQUFPLE9BQU8sQ0FBQyxJQUFJLENBQUMsTUFBYSxFQUFFLFFBQVEsQ0FBQyxDQUFDO1FBQy9DLENBQUM7YUFBTSxDQUFDO1lBQ04sT0FBTyxNQUFNLENBQUMsT0FBYyxDQUFDLENBQUM7UUFDaEMsQ0FBQztJQUNILENBQUM7SUFBQyxPQUFPLENBQUMsRUFBRSxDQUFDO1FBQ1gsT0FBTyxRQUFRLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFDckIsQ0FBQztBQUNILENBQUMsQ0FBQztBQUVGLE1BQU0sQ0FBQyxNQUFNLFNBQVMsR0FBRyxDQUN2QixPQUEwQixFQUMxQixNQUE4QyxFQUMzQixFQUFFO0lBQ3JCLE9BQU8sU0FBUyxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUMsQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLE1BQWEsQ0FBQyxDQUFDLENBQUMsQ0FBQyxNQUFNLENBQUMsT0FBYyxDQUFDLENBQUM7QUFDbkYsQ0FBQyxDQUFDO0FBRUYsTUFBTSxDQUFDLE1BQU0sVUFBVSxHQUFHLENBQ3hCLFFBQVcsRUFDa0QsRUFBRTtJQUMvRCxNQUFNLFVBQVUsR0FBRyxRQUFRLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxDQUFDO0lBQzVDLElBQUksVUFBVSxFQUFFLENBQUM7UUFDZixPQUFPLE9BQU8sQ0FBQyxHQUFHLENBQUMsUUFBUSxDQUFDLENBQUM7SUFDL0IsQ0FBQztJQUNELE9BQU8sUUFBZSxDQUFDO0FBQ3pCLENBQUMsQ0FBQztBQUVGLE1BQU0sQ0FBQyxNQUFNLGNBQWMsR0FBRyxDQUM1QixRQUFXLEVBQ1csRUFBRTtJQUN4QixJQUFJLFFBQVEsQ0FBQyxNQUFNLEdBQUcsQ0FBQyxFQUFFLENBQUM7UUFDeEIsT0FBTyxPQUFPLENBQUMsR0FBRyxDQUFDLFFBQVEsQ0FBUSxDQUFDO0lBQ3RDLENBQUM7SUFDRCxPQUFPLFFBQWUsQ0FBQztBQUN6QixDQUFDLENBQUM7QUFFRixNQUFNLENBQUMsTUFBTSxhQUFhLEdBQUcsQ0FBSSxDQUFJLEVBQXVCLEVBQUU7SUFDNUQsT0FBTyxDQUFDLElBQUksSUFBSSxDQUFDO0FBQ25CLENBQUMsQ0FBQztBQUVGLE1BQU0sQ0FBQyxNQUFNLEtBQUssR0FBRyxDQUFDLE9BQWUsRUFBRSxFQUFFO0lBQ3ZDLE9BQU8sSUFBSSxPQUFPLENBQUMsQ0FBQyxPQUFPLEVBQUUsRUFBRTtRQUM3QixVQUFVLENBQUMsT0FBTyxFQUFFLE9BQU8sQ0FBQyxDQUFDO0lBQy9CLENBQUMsQ0FBQyxDQUFDO0FBQ0wsQ0FBQyxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHR5cGUgeyBWYWx1ZU9yUHJvbWlzZSB9IGZyb20gJy4vdHlwZXMnO1xuXG5leHBvcnQgdHlwZSBQcm9taXNlVHJlZTxUPiA9IFQgfCBQcm9taXNlPFQ+IHwgUHJvbWlzZTxUW10+IHwgQXJyYXk8UHJvbWlzZVRyZWU8VD4+O1xuXG5leHBvcnQgY29uc3QgaXNQcm9taXNlID0gKHZhbHVlOiBhbnkpOiB2YWx1ZSBpcyBQcm9taXNlPGFueT4gPT4ge1xuICAvLyBub3QgdXNpbmcgXCJ2YWx1ZSBpbnN0YW5jZW9mIFByb21pc2VcIiB0byBoYXZlIHpvbmUuanMgc3VwcG9ydFxuICByZXR1cm4gdmFsdWUgJiYgdHlwZW9mIHZhbHVlLnRoZW4gPT09ICdmdW5jdGlvbic7XG59O1xuXG5leHBvcnQgY29uc3Qgc2FmZUNhbGwgPSA8VCwgQiwgQz4oXG4gIGNhbGw6ICgpID0+IFZhbHVlT3JQcm9taXNlPFQ+LFxuICB0aGVuRm46IChhcmc6IEF3YWl0ZWQ8VD4pID0+IFZhbHVlT3JQcm9taXNlPEI+LFxuICByZWplY3RGbjogKHJlYXNvbjogYW55KSA9PiBWYWx1ZU9yUHJvbWlzZTxDPlxuKTogVmFsdWVPclByb21pc2U8QiB8IEM+ID0+IHtcbiAgdHJ5IHtcbiAgICBjb25zdCBwcm9taXNlID0gY2FsbCgpO1xuICAgIGlmIChpc1Byb21pc2UocHJvbWlzZSkpIHtcbiAgICAgIHJldHVybiBwcm9taXNlLnRoZW4odGhlbkZuIGFzIGFueSwgcmVqZWN0Rm4pO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gdGhlbkZuKHByb21pc2UgYXMgYW55KTtcbiAgICB9XG4gIH0gY2F0Y2ggKGUpIHtcbiAgICByZXR1cm4gcmVqZWN0Rm4oZSk7XG4gIH1cbn07XG5cbmV4cG9ydCBjb25zdCBtYXliZVRoZW4gPSA8VCwgQj4oXG4gIHByb21pc2U6IFZhbHVlT3JQcm9taXNlPFQ+LFxuICB0aGVuRm46IChhcmc6IEF3YWl0ZWQ8VD4pID0+IFZhbHVlT3JQcm9taXNlPEI+XG4pOiBWYWx1ZU9yUHJvbWlzZTxCPiA9PiB7XG4gIHJldHVybiBpc1Byb21pc2UocHJvbWlzZSkgPyBwcm9taXNlLnRoZW4odGhlbkZuIGFzIGFueSkgOiB0aGVuRm4ocHJvbWlzZSBhcyBhbnkpO1xufTtcblxuZXhwb3J0IGNvbnN0IHByb21pc2VBbGwgPSA8VCBleHRlbmRzIHJlYWRvbmx5IHVua25vd25bXSB8IFtdPihcbiAgcHJvbWlzZXM6IFRcbik6IFZhbHVlT3JQcm9taXNlPHsgLXJlYWRvbmx5IFtQIGluIGtleW9mIFRdOiBBd2FpdGVkPFRbUF0+IH0+ID0+IHtcbiAgY29uc3QgaGFzUHJvbWlzZSA9IHByb21pc2VzLnNvbWUoaXNQcm9taXNlKTtcbiAgaWYgKGhhc1Byb21pc2UpIHtcbiAgICByZXR1cm4gUHJvbWlzZS5hbGwocHJvbWlzZXMpO1xuICB9XG4gIHJldHVybiBwcm9taXNlcyBhcyBhbnk7XG59O1xuXG5leHBvcnQgY29uc3QgcHJvbWlzZUFsbExhenkgPSA8VCBleHRlbmRzIHJlYWRvbmx5IHVua25vd25bXSB8IFtdPihcbiAgcHJvbWlzZXM6IFRcbik6IFZhbHVlT3JQcm9taXNlPHZvaWQ+ID0+IHtcbiAgaWYgKHByb21pc2VzLmxlbmd0aCA+IDApIHtcbiAgICByZXR1cm4gUHJvbWlzZS5hbGwocHJvbWlzZXMpIGFzIGFueTtcbiAgfVxuICByZXR1cm4gcHJvbWlzZXMgYXMgYW55O1xufTtcblxuZXhwb3J0IGNvbnN0IGlzTm90TnVsbGFibGUgPSA8VD4odjogVCk6IHYgaXMgTm9uTnVsbGFibGU8VD4gPT4ge1xuICByZXR1cm4gdiAhPSBudWxsO1xufTtcblxuZXhwb3J0IGNvbnN0IGRlbGF5ID0gKHRpbWVvdXQ6IG51bWJlcikgPT4ge1xuICByZXR1cm4gbmV3IFByb21pc2UoKHJlc29sdmUpID0+IHtcbiAgICBzZXRUaW1lb3V0KHJlc29sdmUsIHRpbWVvdXQpO1xuICB9KTtcbn07XG4iXX0=","// import { qDev } from './qdev';\nimport { qDev } from './qdev';\nexport const EMPTY_ARRAY = [];\nexport const EMPTY_OBJ = {};\nif (qDev) {\n    Object.freeze(EMPTY_ARRAY);\n    Object.freeze(EMPTY_OBJ);\n}\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZmx5d2VpZ2h0LmpzIiwic291cmNlUm9vdCI6Ii4vIiwic291cmNlcyI6WyJwYWNrYWdlcy9xd2lrL3NyYy9jb3JlL3V0aWwvZmx5d2VpZ2h0LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLGlDQUFpQztBQUVqQyxPQUFPLEVBQUUsSUFBSSxFQUFFLE1BQU0sUUFBUSxDQUFDO0FBRTlCLE1BQU0sQ0FBQyxNQUFNLFdBQVcsR0FBRyxFQUFXLENBQUM7QUFDdkMsTUFBTSxDQUFDLE1BQU0sU0FBUyxHQUFHLEVBQXlCLENBQUM7QUFFbkQsSUFBSSxJQUFJLEVBQUUsQ0FBQztJQUNULE1BQU0sQ0FBQyxNQUFNLENBQUMsV0FBVyxDQUFDLENBQUM7SUFDM0IsTUFBTSxDQUFDLE1BQU0sQ0FBQyxTQUFTLENBQUMsQ0FBQztBQUMzQixDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiLy8gaW1wb3J0IHsgcURldiB9IGZyb20gJy4vcWRldic7XG5cbmltcG9ydCB7IHFEZXYgfSBmcm9tICcuL3FkZXYnO1xuXG5leHBvcnQgY29uc3QgRU1QVFlfQVJSQVkgPSBbXSBhcyBhbnlbXTtcbmV4cG9ydCBjb25zdCBFTVBUWV9PQkogPSB7fSBhcyBSZWNvcmQ8c3RyaW5nLCBhbnk+O1xuXG5pZiAocURldikge1xuICBPYmplY3QuZnJlZXplKEVNUFRZX0FSUkFZKTtcbiAgT2JqZWN0LmZyZWV6ZShFTVBUWV9PQkopO1xufVxuIl19","import { assertDefined } from '../error/assert';\nimport { qDynamicPlatform } from './qdev';\nexport const getDocument = (node) => {\n    if (!qDynamicPlatform) {\n        return document;\n    }\n    if (typeof document !== 'undefined') {\n        return document;\n    }\n    if (node.nodeType === 9) {\n        return node;\n    }\n    const doc = node.ownerDocument;\n    assertDefined(doc, 'doc must be defined');\n    return doc;\n};\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZG9tLmpzIiwic291cmNlUm9vdCI6Ii4vIiwic291cmNlcyI6WyJwYWNrYWdlcy9xd2lrL3NyYy9jb3JlL3V0aWwvZG9tLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxhQUFhLEVBQUUsTUFBTSxpQkFBaUIsQ0FBQztBQUVoRCxPQUFPLEVBQUUsZ0JBQWdCLEVBQUUsTUFBTSxRQUFRLENBQUM7QUFFMUMsTUFBTSxDQUFDLE1BQU0sV0FBVyxHQUFHLENBQUMsSUFBNEIsRUFBWSxFQUFFO0lBQ3BFLElBQUksQ0FBQyxnQkFBZ0IsRUFBRSxDQUFDO1FBQ3RCLE9BQU8sUUFBUSxDQUFDO0lBQ2xCLENBQUM7SUFDRCxJQUFJLE9BQU8sUUFBUSxLQUFLLFdBQVcsRUFBRSxDQUFDO1FBQ3BDLE9BQU8sUUFBUSxDQUFDO0lBQ2xCLENBQUM7SUFDRCxJQUFJLElBQUksQ0FBQyxRQUFRLEtBQUssQ0FBQyxFQUFFLENBQUM7UUFDeEIsT0FBTyxJQUF1QixDQUFDO0lBQ2pDLENBQUM7SUFDRCxNQUFNLEdBQUcsR0FBRyxJQUFJLENBQUMsYUFBYSxDQUFDO0lBQy9CLGFBQWEsQ0FBQyxHQUFHLEVBQUUscUJBQXFCLENBQUMsQ0FBQztJQUMxQyxPQUFPLEdBQUksQ0FBQztBQUNkLENBQUMsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IGFzc2VydERlZmluZWQgfSBmcm9tICcuLi9lcnJvci9hc3NlcnQnO1xuaW1wb3J0IHR5cGUgeyBRd2lrRWxlbWVudCB9IGZyb20gJy4uL3JlbmRlci9kb20vdmlydHVhbC1lbGVtZW50JztcbmltcG9ydCB7IHFEeW5hbWljUGxhdGZvcm0gfSBmcm9tICcuL3FkZXYnO1xuXG5leHBvcnQgY29uc3QgZ2V0RG9jdW1lbnQgPSAobm9kZTogUXdpa0VsZW1lbnQgfCBEb2N1bWVudCk6IERvY3VtZW50ID0+IHtcbiAgaWYgKCFxRHluYW1pY1BsYXRmb3JtKSB7XG4gICAgcmV0dXJuIGRvY3VtZW50O1xuICB9XG4gIGlmICh0eXBlb2YgZG9jdW1lbnQgIT09ICd1bmRlZmluZWQnKSB7XG4gICAgcmV0dXJuIGRvY3VtZW50O1xuICB9XG4gIGlmIChub2RlLm5vZGVUeXBlID09PSA5KSB7XG4gICAgcmV0dXJuIG5vZGUgYXMgYW55IGFzIERvY3VtZW50O1xuICB9XG4gIGNvbnN0IGRvYyA9IG5vZGUub3duZXJEb2N1bWVudDtcbiAgYXNzZXJ0RGVmaW5lZChkb2MsICdkb2MgbXVzdCBiZSBkZWZpbmVkJyk7XG4gIHJldHVybiBkb2MhO1xufTtcbiJdfQ==","/** State factory of the component. */\nexport const OnRenderProp = 'q:renderFn';\n/** Component style host prefix */\nexport const ComponentStylesPrefixHost = '💎';\n/** Component style content prefix */\nexport const ComponentStylesPrefixContent = '⭐️';\n/** Prefix used to identify on listeners. */\nexport const EventPrefix = 'on:';\n/** Attribute used to mark that an event listener is attached. */\nexport const EventAny = 'on:.';\n/** `<some-element q:slot=\"...\">` */\nexport const QSlot = 'q:slot';\nexport const QSlotRef = 'q:sref';\nexport const QSlotS = 'q:s';\nexport const QStyle = 'q:style';\nexport const QScopedStyle = 'q:sstyle';\nexport const QCtxAttr = 'q:ctx';\nexport const QLocaleAttr = 'q:locale';\nexport const QContainerAttr = 'q:container';\nexport const QContainerSelector = '[q\\\\:container]';\nexport const ResourceEvent = 'qResource';\nexport const ComputedEvent = 'qComputed';\nexport const RenderEvent = 'qRender';\nexport const TaskEvent = 'qTask';\n/** `<q:slot name=\"...\">` */\nexport const QSlotInertName = '\\u0000';\nexport const ELEMENT_ID = 'q:id';\nexport const ELEMENT_ID_SELECTOR = '[q\\\\:id]';\nexport const ELEMENT_ID_PREFIX = '#';\nexport const INLINE_FN_PREFIX = '@';\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibWFya2Vycy5qcyIsInNvdXJjZVJvb3QiOiIuLyIsInNvdXJjZXMiOlsicGFja2FnZXMvcXdpay9zcmMvY29yZS91dGlsL21hcmtlcnMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsc0NBQXNDO0FBQ3RDLE1BQU0sQ0FBQyxNQUFNLFlBQVksR0FBRyxZQUFZLENBQUM7QUFFekMsa0NBQWtDO0FBQ2xDLE1BQU0sQ0FBQyxNQUFNLHlCQUF5QixHQUFHLElBQUksQ0FBQztBQUU5QyxxQ0FBcUM7QUFDckMsTUFBTSxDQUFDLE1BQU0sNEJBQTRCLEdBQUcsSUFBSSxDQUFDO0FBRWpELDRDQUE0QztBQUM1QyxNQUFNLENBQUMsTUFBTSxXQUFXLEdBQUcsS0FBSyxDQUFDO0FBRWpDLGlFQUFpRTtBQUNqRSxNQUFNLENBQUMsTUFBTSxRQUFRLEdBQUcsTUFBTSxDQUFDO0FBQy9CLG9DQUFvQztBQUNwQyxNQUFNLENBQUMsTUFBTSxLQUFLLEdBQUcsUUFBUSxDQUFDO0FBQzlCLE1BQU0sQ0FBQyxNQUFNLFFBQVEsR0FBRyxRQUFRLENBQUM7QUFDakMsTUFBTSxDQUFDLE1BQU0sTUFBTSxHQUFHLEtBQUssQ0FBQztBQUM1QixNQUFNLENBQUMsTUFBTSxNQUFNLEdBQUcsU0FBUyxDQUFDO0FBQ2hDLE1BQU0sQ0FBQyxNQUFNLFlBQVksR0FBRyxVQUFVLENBQUM7QUFDdkMsTUFBTSxDQUFDLE1BQU0sUUFBUSxHQUFHLE9BQU8sQ0FBQztBQUVoQyxNQUFNLENBQUMsTUFBTSxXQUFXLEdBQUcsVUFBVSxDQUFDO0FBQ3RDLE1BQU0sQ0FBQyxNQUFNLGNBQWMsR0FBRyxhQUFhLENBQUM7QUFFNUMsTUFBTSxDQUFDLE1BQU0sa0JBQWtCLEdBQUcsaUJBQWlCLENBQUM7QUFFcEQsTUFBTSxDQUFDLE1BQU0sYUFBYSxHQUFHLFdBQVcsQ0FBQztBQUN6QyxNQUFNLENBQUMsTUFBTSxhQUFhLEdBQUcsV0FBVyxDQUFDO0FBQ3pDLE1BQU0sQ0FBQyxNQUFNLFdBQVcsR0FBRyxTQUFTLENBQUM7QUFDckMsTUFBTSxDQUFDLE1BQU0sU0FBUyxHQUFHLE9BQU8sQ0FBQztBQUVqQyw0QkFBNEI7QUFDNUIsTUFBTSxDQUFDLE1BQU0sY0FBYyxHQUFHLFFBQVEsQ0FBQztBQUV2QyxNQUFNLENBQUMsTUFBTSxVQUFVLEdBQUcsTUFBTSxDQUFDO0FBQ2pDLE1BQU0sQ0FBQyxNQUFNLG1CQUFtQixHQUFHLFVBQVUsQ0FBQztBQUM5QyxNQUFNLENBQUMsTUFBTSxpQkFBaUIsR0FBRyxHQUFHLENBQUM7QUFDckMsTUFBTSxDQUFDLE1BQU0sZ0JBQWdCLEdBQUcsR0FBRyxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiLyoqIFN0YXRlIGZhY3Rvcnkgb2YgdGhlIGNvbXBvbmVudC4gKi9cbmV4cG9ydCBjb25zdCBPblJlbmRlclByb3AgPSAncTpyZW5kZXJGbic7XG5cbi8qKiBDb21wb25lbnQgc3R5bGUgaG9zdCBwcmVmaXggKi9cbmV4cG9ydCBjb25zdCBDb21wb25lbnRTdHlsZXNQcmVmaXhIb3N0ID0gJ/Cfko4nO1xuXG4vKiogQ29tcG9uZW50IHN0eWxlIGNvbnRlbnQgcHJlZml4ICovXG5leHBvcnQgY29uc3QgQ29tcG9uZW50U3R5bGVzUHJlZml4Q29udGVudCA9ICfirZDvuI8nO1xuXG4vKiogUHJlZml4IHVzZWQgdG8gaWRlbnRpZnkgb24gbGlzdGVuZXJzLiAqL1xuZXhwb3J0IGNvbnN0IEV2ZW50UHJlZml4ID0gJ29uOic7XG5cbi8qKiBBdHRyaWJ1dGUgdXNlZCB0byBtYXJrIHRoYXQgYW4gZXZlbnQgbGlzdGVuZXIgaXMgYXR0YWNoZWQuICovXG5leHBvcnQgY29uc3QgRXZlbnRBbnkgPSAnb246Lic7XG4vKiogYDxzb21lLWVsZW1lbnQgcTpzbG90PVwiLi4uXCI+YCAqL1xuZXhwb3J0IGNvbnN0IFFTbG90ID0gJ3E6c2xvdCc7XG5leHBvcnQgY29uc3QgUVNsb3RSZWYgPSAncTpzcmVmJztcbmV4cG9ydCBjb25zdCBRU2xvdFMgPSAncTpzJztcbmV4cG9ydCBjb25zdCBRU3R5bGUgPSAncTpzdHlsZSc7XG5leHBvcnQgY29uc3QgUVNjb3BlZFN0eWxlID0gJ3E6c3N0eWxlJztcbmV4cG9ydCBjb25zdCBRQ3R4QXR0ciA9ICdxOmN0eCc7XG5cbmV4cG9ydCBjb25zdCBRTG9jYWxlQXR0ciA9ICdxOmxvY2FsZSc7XG5leHBvcnQgY29uc3QgUUNvbnRhaW5lckF0dHIgPSAncTpjb250YWluZXInO1xuXG5leHBvcnQgY29uc3QgUUNvbnRhaW5lclNlbGVjdG9yID0gJ1txXFxcXDpjb250YWluZXJdJztcblxuZXhwb3J0IGNvbnN0IFJlc291cmNlRXZlbnQgPSAncVJlc291cmNlJztcbmV4cG9ydCBjb25zdCBDb21wdXRlZEV2ZW50ID0gJ3FDb21wdXRlZCc7XG5leHBvcnQgY29uc3QgUmVuZGVyRXZlbnQgPSAncVJlbmRlcic7XG5leHBvcnQgY29uc3QgVGFza0V2ZW50ID0gJ3FUYXNrJztcblxuLyoqIGA8cTpzbG90IG5hbWU9XCIuLi5cIj5gICovXG5leHBvcnQgY29uc3QgUVNsb3RJbmVydE5hbWUgPSAnXFx1MDAwMCc7XG5cbmV4cG9ydCBjb25zdCBFTEVNRU5UX0lEID0gJ3E6aWQnO1xuZXhwb3J0IGNvbnN0IEVMRU1FTlRfSURfU0VMRUNUT1IgPSAnW3FcXFxcOmlkXSc7XG5leHBvcnQgY29uc3QgRUxFTUVOVF9JRF9QUkVGSVggPSAnIyc7XG5leHBvcnQgY29uc3QgSU5MSU5FX0ZOX1BSRUZJWCA9ICdAJztcbiJdfQ==","export const QObjectRecursive = 1 << 0;\nexport const QObjectImmutable = 1 << 1;\nexport const QOjectTargetSymbol = Symbol('proxy target');\nexport const QObjectFlagsSymbol = Symbol('proxy flags');\nexport const QObjectManagerSymbol = Symbol('proxy manager');\n/** @internal */\nexport const _IMMUTABLE = Symbol('IMMUTABLE');\nexport const _IMMUTABLE_PREFIX = '$$';\n/**\n * @internal\n * Key for the virtual element stored on qv comments\n */\nexport const VIRTUAL_SYMBOL = '__virtual';\n/**\n * @internal\n * Key for the `QContext` object stored on QwikElements\n */\nexport const Q_CTX = '_qc_';\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29uc3RhbnRzLmpzIiwic291cmNlUm9vdCI6Ii4vIiwic291cmNlcyI6WyJwYWNrYWdlcy9xd2lrL3NyYy9jb3JlL3N0YXRlL2NvbnN0YW50cy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxNQUFNLENBQUMsTUFBTSxnQkFBZ0IsR0FBRyxDQUFDLElBQUksQ0FBQyxDQUFDO0FBQ3ZDLE1BQU0sQ0FBQyxNQUFNLGdCQUFnQixHQUFHLENBQUMsSUFBSSxDQUFDLENBQUM7QUFFdkMsTUFBTSxDQUFDLE1BQU0sa0JBQWtCLEdBQUcsTUFBTSxDQUFDLGNBQWMsQ0FBQyxDQUFDO0FBQ3pELE1BQU0sQ0FBQyxNQUFNLGtCQUFrQixHQUFHLE1BQU0sQ0FBQyxhQUFhLENBQUMsQ0FBQztBQUN4RCxNQUFNLENBQUMsTUFBTSxvQkFBb0IsR0FBRyxNQUFNLENBQUMsZUFBZSxDQUFDLENBQUM7QUFFNUQsZ0JBQWdCO0FBQ2hCLE1BQU0sQ0FBQyxNQUFNLFVBQVUsR0FBRyxNQUFNLENBQUMsV0FBVyxDQUFDLENBQUM7QUFFOUMsTUFBTSxDQUFDLE1BQU0saUJBQWlCLEdBQUcsSUFBSSxDQUFDO0FBRXRDOzs7R0FHRztBQUNILE1BQU0sQ0FBQyxNQUFNLGNBQWMsR0FBRyxXQUFXLENBQUM7QUFDMUM7OztHQUdHO0FBQ0gsTUFBTSxDQUFDLE1BQU0sS0FBSyxHQUFHLE1BQU0sQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImV4cG9ydCBjb25zdCBRT2JqZWN0UmVjdXJzaXZlID0gMSA8PCAwO1xuZXhwb3J0IGNvbnN0IFFPYmplY3RJbW11dGFibGUgPSAxIDw8IDE7XG5cbmV4cG9ydCBjb25zdCBRT2plY3RUYXJnZXRTeW1ib2wgPSBTeW1ib2woJ3Byb3h5IHRhcmdldCcpO1xuZXhwb3J0IGNvbnN0IFFPYmplY3RGbGFnc1N5bWJvbCA9IFN5bWJvbCgncHJveHkgZmxhZ3MnKTtcbmV4cG9ydCBjb25zdCBRT2JqZWN0TWFuYWdlclN5bWJvbCA9IFN5bWJvbCgncHJveHkgbWFuYWdlcicpO1xuXG4vKiogQGludGVybmFsICovXG5leHBvcnQgY29uc3QgX0lNTVVUQUJMRSA9IFN5bWJvbCgnSU1NVVRBQkxFJyk7XG5cbmV4cG9ydCBjb25zdCBfSU1NVVRBQkxFX1BSRUZJWCA9ICckJCc7XG5cbi8qKlxuICogQGludGVybmFsXG4gKiBLZXkgZm9yIHRoZSB2aXJ0dWFsIGVsZW1lbnQgc3RvcmVkIG9uIHF2IGNvbW1lbnRzXG4gKi9cbmV4cG9ydCBjb25zdCBWSVJUVUFMX1NZTUJPTCA9ICdfX3ZpcnR1YWwnO1xuLyoqXG4gKiBAaW50ZXJuYWxcbiAqIEtleSBmb3IgdGhlIGBRQ29udGV4dGAgb2JqZWN0IHN0b3JlZCBvbiBRd2lrRWxlbWVudHNcbiAqL1xuZXhwb3J0IGNvbnN0IFFfQ1RYID0gJ19xY18nO1xuIl19","export const directSetAttribute = (el, prop, value) => {\n    return el.setAttribute(prop, value);\n};\nexport const directGetAttribute = (el, prop) => {\n    return el.getAttribute(prop);\n};\nexport const directRemoveAttribute = (el, prop) => {\n    return el.removeAttribute(prop);\n};\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZmFzdC1jYWxscy5qcyIsInNvdXJjZVJvb3QiOiIuLyIsInNvdXJjZXMiOlsicGFja2FnZXMvcXdpay9zcmMvY29yZS9yZW5kZXIvZmFzdC1jYWxscy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFFQSxNQUFNLENBQUMsTUFBTSxrQkFBa0IsR0FBRyxDQUFDLEVBQWUsRUFBRSxJQUFZLEVBQUUsS0FBYSxFQUFFLEVBQUU7SUFDakYsT0FBTyxFQUFFLENBQUMsWUFBWSxDQUFDLElBQUksRUFBRSxLQUFLLENBQUMsQ0FBQztBQUN0QyxDQUFDLENBQUM7QUFFRixNQUFNLENBQUMsTUFBTSxrQkFBa0IsR0FBRyxDQUFDLEVBQWUsRUFBRSxJQUFZLEVBQUUsRUFBRTtJQUNsRSxPQUFPLEVBQUUsQ0FBQyxZQUFZLENBQUMsSUFBSSxDQUFDLENBQUM7QUFDL0IsQ0FBQyxDQUFDO0FBRUYsTUFBTSxDQUFDLE1BQU0scUJBQXFCLEdBQUcsQ0FBQyxFQUFlLEVBQUUsSUFBWSxFQUFFLEVBQUU7SUFDckUsT0FBTyxFQUFFLENBQUMsZUFBZSxDQUFDLElBQUksQ0FBQyxDQUFDO0FBQ2xDLENBQUMsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB0eXBlIHsgUXdpa0VsZW1lbnQgfSBmcm9tICcuL2RvbS92aXJ0dWFsLWVsZW1lbnQnO1xuXG5leHBvcnQgY29uc3QgZGlyZWN0U2V0QXR0cmlidXRlID0gKGVsOiBRd2lrRWxlbWVudCwgcHJvcDogc3RyaW5nLCB2YWx1ZTogc3RyaW5nKSA9PiB7XG4gIHJldHVybiBlbC5zZXRBdHRyaWJ1dGUocHJvcCwgdmFsdWUpO1xufTtcblxuZXhwb3J0IGNvbnN0IGRpcmVjdEdldEF0dHJpYnV0ZSA9IChlbDogUXdpa0VsZW1lbnQsIHByb3A6IHN0cmluZykgPT4ge1xuICByZXR1cm4gZWwuZ2V0QXR0cmlidXRlKHByb3ApO1xufTtcblxuZXhwb3J0IGNvbnN0IGRpcmVjdFJlbW92ZUF0dHJpYnV0ZSA9IChlbDogUXdpa0VsZW1lbnQsIHByb3A6IHN0cmluZykgPT4ge1xuICByZXR1cm4gZWwucmVtb3ZlQXR0cmlidXRlKHByb3ApO1xufTtcbiJdfQ==","export const fromCamelToKebabCase = (text) => {\n    return text.replace(/([A-Z])/g, '-$1').toLowerCase();\n};\nexport const fromKebabToCamelCase = (text) => {\n    return text.replace(/-./g, (x) => x[1].toUpperCase());\n};\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY2FzZS5qcyIsInNvdXJjZVJvb3QiOiIuLyIsInNvdXJjZXMiOlsicGFja2FnZXMvcXdpay9zcmMvY29yZS91dGlsL2Nhc2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsTUFBTSxDQUFDLE1BQU0sb0JBQW9CLEdBQUcsQ0FBQyxJQUFZLEVBQVUsRUFBRTtJQUMzRCxPQUFPLElBQUksQ0FBQyxPQUFPLENBQUMsVUFBVSxFQUFFLEtBQUssQ0FBQyxDQUFDLFdBQVcsRUFBRSxDQUFDO0FBQ3ZELENBQUMsQ0FBQztBQUVGLE1BQU0sQ0FBQyxNQUFNLG9CQUFvQixHQUFHLENBQUMsSUFBWSxFQUFVLEVBQUU7SUFDM0QsT0FBTyxJQUFJLENBQUMsT0FBTyxDQUFDLEtBQUssRUFBRSxDQUFDLENBQUMsRUFBRSxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLFdBQVcsRUFBRSxDQUFDLENBQUM7QUFDeEQsQ0FBQyxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiZXhwb3J0IGNvbnN0IGZyb21DYW1lbFRvS2ViYWJDYXNlID0gKHRleHQ6IHN0cmluZyk6IHN0cmluZyA9PiB7XG4gIHJldHVybiB0ZXh0LnJlcGxhY2UoLyhbQS1aXSkvZywgJy0kMScpLnRvTG93ZXJDYXNlKCk7XG59O1xuXG5leHBvcnQgY29uc3QgZnJvbUtlYmFiVG9DYW1lbENhc2UgPSAodGV4dDogc3RyaW5nKTogc3RyaW5nID0+IHtcbiAgcmV0dXJuIHRleHQucmVwbGFjZSgvLS4vZywgKHgpID0+IHhbMV0udG9VcHBlckNhc2UoKSk7XG59O1xuIl19","import { qError, QError_invalidRefValue } from '../error/error';\nimport { seal } from '../util/qdev';\nimport { isFunction, isObject } from '../util/types';\nimport { fromKebabToCamelCase } from '../util/case';\nimport { QContainerAttr } from '../util/markers';\nimport { isElement } from '../util/element';\nimport { createSubscriptionManager, } from '../state/common';\nimport { directGetAttribute } from '../render/fast-calls';\nconst CONTAINER_STATE = Symbol('ContainerState');\n/** @internal */\nexport const _getContainerState = (containerEl) => {\n    let set = containerEl[CONTAINER_STATE];\n    if (!set) {\n        containerEl[CONTAINER_STATE] = set = createContainerState(containerEl, directGetAttribute(containerEl, 'q:base') ?? '/');\n    }\n    return set;\n};\nexport const createContainerState = (containerEl, base) => {\n    const containerState = {\n        $containerEl$: containerEl,\n        $elementIndex$: 0,\n        $styleMoved$: false,\n        $proxyMap$: new WeakMap(),\n        $opsNext$: new Set(),\n        $taskNext$: new Set(),\n        $taskStaging$: new Set(),\n        $hostsNext$: new Set(),\n        $hostsStaging$: new Set(),\n        $styleIds$: new Set(),\n        $events$: new Set(),\n        $serverData$: {},\n        $base$: base,\n        $renderPromise$: undefined,\n        $hostsRendering$: undefined,\n        $pauseCtx$: undefined,\n        $subsManager$: null,\n    };\n    seal(containerState);\n    containerState.$subsManager$ = createSubscriptionManager(containerState);\n    return containerState;\n};\nexport const removeContainerState = (containerEl) => {\n    delete containerEl[CONTAINER_STATE];\n};\nexport const setRef = (value, elm) => {\n    if (isFunction(value)) {\n        return value(elm);\n    }\n    else if (isObject(value)) {\n        if ('value' in value) {\n            return (value.value = elm);\n        }\n    }\n    throw qError(QError_invalidRefValue, value);\n};\nexport const SHOW_ELEMENT = 1;\nexport const SHOW_COMMENT = 128;\nexport const FILTER_ACCEPT = 1;\nexport const FILTER_REJECT = 2;\nexport const FILTER_SKIP = 3;\nexport const isContainer = (el) => {\n    return isElement(el) && el.hasAttribute(QContainerAttr);\n};\nexport const intToStr = (nu) => {\n    return nu.toString(36);\n};\nexport const strToInt = (nu) => {\n    return parseInt(nu, 36);\n};\nexport const getEventName = (attribute) => {\n    const colonPos = attribute.indexOf(':');\n    if (attribute) {\n        return fromKebabToCamelCase(attribute.slice(colonPos + 1));\n    }\n    else {\n        return attribute;\n    }\n};\n//# sourceMappingURL=data:application/json;base64,","import { inflateQrl, parseQRL } from '../qrl/qrl';\nimport { assertQrl, isQrl } from '../qrl/qrl-class';\nimport { $ } from '../qrl/qrl.public';\nimport { isArray } from '../util/types';\nimport { assertTrue } from '../error/assert';\nimport { EMPTY_ARRAY } from '../util/flyweight';\nimport { qRuntimeQrl, qSerialize } from '../util/qdev';\nimport { fromCamelToKebabCase } from '../util/case';\nconst ON_PROP_REGEX = /^(on|window:|document:)/;\nexport const PREVENT_DEFAULT = 'preventdefault:';\nexport const isOnProp = (prop) => {\n    return prop.endsWith('$') && ON_PROP_REGEX.test(prop);\n};\nexport const groupListeners = (listeners) => {\n    if (listeners.length === 0) {\n        return EMPTY_ARRAY;\n    }\n    if (listeners.length === 1) {\n        const listener = listeners[0];\n        return [[listener[0], [listener[1]]]];\n    }\n    const keys = [];\n    for (let i = 0; i < listeners.length; i++) {\n        const eventName = listeners[i][0];\n        if (!keys.includes(eventName)) {\n            keys.push(eventName);\n        }\n    }\n    return keys.map((eventName) => {\n        return [eventName, listeners.filter((l) => l[0] === eventName).map((a) => a[1])];\n    });\n};\nexport const setEvent = (existingListeners, prop, input, containerEl) => {\n    assertTrue(prop.endsWith('$'), 'render: event property does not end with $', prop);\n    prop = normalizeOnProp(prop.slice(0, -1));\n    if (input) {\n        if (isArray(input)) {\n            const processed = input\n                .flat(Infinity)\n                .filter((q) => q != null)\n                .map((q) => [prop, ensureQrl(q, containerEl)]);\n            existingListeners.push(...processed);\n        }\n        else {\n            existingListeners.push([prop, ensureQrl(input, containerEl)]);\n        }\n    }\n    return prop;\n};\nconst PREFIXES = ['on', 'window:on', 'document:on'];\nconst SCOPED = ['on', 'on-window', 'on-document'];\nexport const normalizeOnProp = (prop) => {\n    let scope = 'on';\n    for (let i = 0; i < PREFIXES.length; i++) {\n        const prefix = PREFIXES[i];\n        if (prop.startsWith(prefix)) {\n            scope = SCOPED[i];\n            prop = prop.slice(prefix.length);\n            break;\n        }\n    }\n    if (prop.startsWith('-')) {\n        prop = fromCamelToKebabCase(prop.slice(1));\n    }\n    else {\n        prop = prop.toLowerCase();\n    }\n    return scope + ':' + prop;\n};\nconst ensureQrl = (value, containerEl) => {\n    if (qSerialize && !qRuntimeQrl) {\n        assertQrl(value);\n        value.$setContainer$(containerEl);\n        return value;\n    }\n    const qrl = isQrl(value) ? value : $(value);\n    qrl.$setContainer$(containerEl);\n    return qrl;\n};\nexport const getDomListeners = (elCtx, containerEl) => {\n    const attributes = elCtx.$element$.attributes;\n    const listeners = [];\n    for (let i = 0; i < attributes.length; i++) {\n        const { name, value } = attributes.item(i);\n        if (name.startsWith('on:') ||\n            name.startsWith('on-window:') ||\n            name.startsWith('on-document:')) {\n            const urls = value.split('\\n');\n            for (const url of urls) {\n                const qrl = parseQRL(url, containerEl);\n                if (qrl.$capture$) {\n                    inflateQrl(qrl, elCtx);\n                }\n                listeners.push([name, qrl]);\n            }\n        }\n    }\n    return listeners;\n};\n//# sourceMappingURL=data:application/json;base64,","import { assertQrl } from '../qrl/qrl-class';\nimport { getContext, HOST_FLAG_NEED_ATTACH_LISTENER } from '../state/context';\nimport { normalizeOnProp } from '../state/listeners';\nimport { useInvokeContext } from './use-core';\nimport {} from '../render/jsx/types/jsx-qwik-events';\n// <docs markdown=\"../readme.md#useOn\">\n// !!DO NOT EDIT THIS COMMENT DIRECTLY!!!\n// (edit ../readme.md#useOn instead)\n/**\n * Register a listener on the current component's host element.\n *\n * Used to programmatically add event listeners. Useful from custom `use*` methods, which do not\n * have access to the JSX. Otherwise, it's adding a JSX listener in the `<div>` is a better idea.\n *\n * @public\n * @see `useOn`, `useOnWindow`, `useOnDocument`.\n */\n// </docs>\nexport const useOn = (event, eventQrl) => {\n    _useOn(createEventName(event, undefined), eventQrl);\n};\n// <docs markdown=\"../readme.md#useOnDocument\">\n// !!DO NOT EDIT THIS COMMENT DIRECTLY!!!\n// (edit ../readme.md#useOnDocument instead)\n/**\n * Register a listener on `document`.\n *\n * Used to programmatically add event listeners. Useful from custom `use*` methods, which do not\n * have access to the JSX.\n *\n * @public\n * @see `useOn`, `useOnWindow`, `useOnDocument`.\n *\n * ```tsx\n * function useScroll() {\n *   useOnDocument(\n *     'scroll',\n *     $((event) => {\n *       console.log('body scrolled', event);\n *     })\n *   );\n * }\n *\n * const Cmp = component$(() => {\n *   useScroll();\n *   return <div>Profit!</div>;\n * });\n * ```\n */\n// </docs>\nexport const useOnDocument = (event, eventQrl) => {\n    _useOn(createEventName(event, 'document'), eventQrl);\n};\n// <docs markdown=\"../readme.md#useOnWindow\">\n// !!DO NOT EDIT THIS COMMENT DIRECTLY!!!\n// (edit ../readme.md#useOnWindow instead)\n/**\n * Register a listener on `window`.\n *\n * Used to programmatically add event listeners. Useful from custom `use*` methods, which do not\n * have access to the JSX.\n *\n * @public\n * @see `useOn`, `useOnWindow`, `useOnDocument`.\n *\n * ```tsx\n * function useAnalytics() {\n *   useOnWindow(\n *     'popstate',\n *     $((event) => {\n *       console.log('navigation happened', event);\n *       // report to analytics\n *     })\n *   );\n * }\n *\n * const Cmp = component$(() => {\n *   useAnalytics();\n *   return <div>Profit!</div>;\n * });\n * ```\n */\n// </docs>\nexport const useOnWindow = (event, eventQrl) => {\n    _useOn(createEventName(event, 'window'), eventQrl);\n};\nconst createEventName = (event, eventType) => {\n    const formattedEventType = eventType !== undefined ? eventType + ':' : '';\n    const res = Array.isArray(event)\n        ? event.map((e) => `${formattedEventType}on-${e}`)\n        : `${formattedEventType}on-${event}`;\n    return res;\n};\nconst _useOn = (eventName, eventQrl) => {\n    if (eventQrl) {\n        const invokeCtx = useInvokeContext();\n        const elCtx = getContext(invokeCtx.$hostElement$, invokeCtx.$renderCtx$.$static$.$containerState$);\n        assertQrl(eventQrl);\n        if (typeof eventName === 'string') {\n            elCtx.li.push([normalizeOnProp(eventName), eventQrl]);\n        }\n        else {\n            elCtx.li.push(...eventName.map((name) => [normalizeOnProp(name), eventQrl]));\n        }\n        elCtx.$flags$ |= HOST_FLAG_NEED_ATTACH_LISTENER;\n    }\n};\n//# sourceMappingURL=data:application/json;base64,","import { isBrowser } from '@builder.io/qwik/build';\nimport { qTest } from './qdev';\nexport const emitEvent = (el, eventName, detail, bubbles) => {\n    if (!qTest && (isBrowser || typeof CustomEvent === 'function')) {\n        if (el) {\n            el.dispatchEvent(new CustomEvent(eventName, {\n                detail,\n                bubbles: bubbles,\n                composed: bubbles,\n            }));\n        }\n    }\n};\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZXZlbnQuanMiLCJzb3VyY2VSb290IjoiLi8iLCJzb3VyY2VzIjpbInBhY2thZ2VzL3F3aWsvc3JjL2NvcmUvdXRpbC9ldmVudC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsU0FBUyxFQUFFLE1BQU0sd0JBQXdCLENBQUM7QUFDbkQsT0FBTyxFQUFFLEtBQUssRUFBRSxNQUFNLFFBQVEsQ0FBQztBQUUvQixNQUFNLENBQUMsTUFBTSxTQUFTLEdBQUcsQ0FDdkIsRUFBdUIsRUFDdkIsU0FBaUIsRUFDakIsTUFBVyxFQUNYLE9BQWdCLEVBQ2hCLEVBQUU7SUFDRixJQUFJLENBQUMsS0FBSyxJQUFJLENBQUMsU0FBUyxJQUFJLE9BQU8sV0FBVyxLQUFLLFVBQVUsQ0FBQyxFQUFFLENBQUM7UUFDL0QsSUFBSSxFQUFFLEVBQUUsQ0FBQztZQUNQLEVBQUUsQ0FBQyxhQUFhLENBQ2QsSUFBSSxXQUFXLENBQUMsU0FBUyxFQUFFO2dCQUN6QixNQUFNO2dCQUNOLE9BQU8sRUFBRSxPQUFPO2dCQUNoQixRQUFRLEVBQUUsT0FBTzthQUNsQixDQUFDLENBQ0gsQ0FBQztRQUNKLENBQUM7SUFDSCxDQUFDO0FBQ0gsQ0FBQyxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgaXNCcm93c2VyIH0gZnJvbSAnQGJ1aWxkZXIuaW8vcXdpay9idWlsZCc7XG5pbXBvcnQgeyBxVGVzdCB9IGZyb20gJy4vcWRldic7XG5cbmV4cG9ydCBjb25zdCBlbWl0RXZlbnQgPSAoXG4gIGVsOiBFbGVtZW50IHwgdW5kZWZpbmVkLFxuICBldmVudE5hbWU6IHN0cmluZyxcbiAgZGV0YWlsOiBhbnksXG4gIGJ1YmJsZXM6IGJvb2xlYW5cbikgPT4ge1xuICBpZiAoIXFUZXN0ICYmIChpc0Jyb3dzZXIgfHwgdHlwZW9mIEN1c3RvbUV2ZW50ID09PSAnZnVuY3Rpb24nKSkge1xuICAgIGlmIChlbCkge1xuICAgICAgZWwuZGlzcGF0Y2hFdmVudChcbiAgICAgICAgbmV3IEN1c3RvbUV2ZW50KGV2ZW50TmFtZSwge1xuICAgICAgICAgIGRldGFpbCxcbiAgICAgICAgICBidWJibGVzOiBidWJibGVzLFxuICAgICAgICAgIGNvbXBvc2VkOiBidWJibGVzLFxuICAgICAgICB9KVxuICAgICAgKTtcbiAgICB9XG4gIH1cbn07XG4iXX0=","import { assertDefined } from '../error/assert';\nimport { SignalDerived } from '../state/signal';\nimport { qSerialize } from '../util/qdev';\n/** @internal */\nexport const _fnSignal = (fn, args, fnStr) => {\n    return new SignalDerived(fn, args, fnStr);\n};\nexport const serializeDerivedSignalFunc = (signal) => {\n    const fnBody = qSerialize ? signal.$funcStr$ : 'null';\n    assertDefined(fnBody, 'If qSerialize is true then fnStr must be provided.');\n    let args = '';\n    for (let i = 0; i < signal.$args$.length; i++) {\n        args += `p${i},`;\n    }\n    return `(${args})=>(${fnBody})`;\n};\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5saW5lZC1mbi5qcyIsInNvdXJjZVJvb3QiOiIuLyIsInNvdXJjZXMiOlsicGFja2FnZXMvcXdpay9zcmMvY29yZS9xcmwvaW5saW5lZC1mbi50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsYUFBYSxFQUFFLE1BQU0saUJBQWlCLENBQUM7QUFDaEQsT0FBTyxFQUFFLGFBQWEsRUFBRSxNQUFNLGlCQUFpQixDQUFDO0FBQ2hELE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSxjQUFjLENBQUM7QUFFMUMsZ0JBQWdCO0FBQ2hCLE1BQU0sQ0FBQyxNQUFNLFNBQVMsR0FBRyxDQUN2QixFQUFLLEVBQ0wsSUFBbUIsRUFDbkIsS0FBYyxFQUNkLEVBQUU7SUFDRixPQUFPLElBQUksYUFBYSxDQUErQixFQUFFLEVBQUUsSUFBSSxFQUFFLEtBQUssQ0FBQyxDQUFDO0FBQzFFLENBQUMsQ0FBQztBQUVGLE1BQU0sQ0FBQyxNQUFNLDBCQUEwQixHQUFHLENBQUMsTUFBcUIsRUFBRSxFQUFFO0lBQ2xFLE1BQU0sTUFBTSxHQUFHLFVBQVUsQ0FBQyxDQUFDLENBQUMsTUFBTSxDQUFDLFNBQVMsQ0FBQyxDQUFDLENBQUMsTUFBTSxDQUFDO0lBQ3RELGFBQWEsQ0FBQyxNQUFNLEVBQUUsb0RBQW9ELENBQUMsQ0FBQztJQUM1RSxJQUFJLElBQUksR0FBRyxFQUFFLENBQUM7SUFDZCxLQUFLLElBQUksQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLEdBQUcsTUFBTSxDQUFDLE1BQU0sQ0FBQyxNQUFNLEVBQUUsQ0FBQyxFQUFFLEVBQUUsQ0FBQztRQUM5QyxJQUFJLElBQUksSUFBSSxDQUFDLEdBQUcsQ0FBQztJQUNuQixDQUFDO0lBQ0QsT0FBTyxJQUFJLElBQUksT0FBTyxNQUFNLEdBQUcsQ0FBQztBQUNsQyxDQUFDLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBhc3NlcnREZWZpbmVkIH0gZnJvbSAnLi4vZXJyb3IvYXNzZXJ0JztcbmltcG9ydCB7IFNpZ25hbERlcml2ZWQgfSBmcm9tICcuLi9zdGF0ZS9zaWduYWwnO1xuaW1wb3J0IHsgcVNlcmlhbGl6ZSB9IGZyb20gJy4uL3V0aWwvcWRldic7XG5cbi8qKiBAaW50ZXJuYWwgKi9cbmV4cG9ydCBjb25zdCBfZm5TaWduYWwgPSA8VCBleHRlbmRzICguLi5hcmdzOiBhbnkpID0+IGFueT4oXG4gIGZuOiBULFxuICBhcmdzOiBQYXJhbWV0ZXJzPFQ+LFxuICBmblN0cj86IHN0cmluZ1xuKSA9PiB7XG4gIHJldHVybiBuZXcgU2lnbmFsRGVyaXZlZDxSZXR1cm5UeXBlPFQ+LCBQYXJhbWV0ZXJzPFQ+PihmbiwgYXJncywgZm5TdHIpO1xufTtcblxuZXhwb3J0IGNvbnN0IHNlcmlhbGl6ZURlcml2ZWRTaWduYWxGdW5jID0gKHNpZ25hbDogU2lnbmFsRGVyaXZlZCkgPT4ge1xuICBjb25zdCBmbkJvZHkgPSBxU2VyaWFsaXplID8gc2lnbmFsLiRmdW5jU3RyJCA6ICdudWxsJztcbiAgYXNzZXJ0RGVmaW5lZChmbkJvZHksICdJZiBxU2VyaWFsaXplIGlzIHRydWUgdGhlbiBmblN0ciBtdXN0IGJlIHByb3ZpZGVkLicpO1xuICBsZXQgYXJncyA9ICcnO1xuICBmb3IgKGxldCBpID0gMDsgaSA8IHNpZ25hbC4kYXJncyQubGVuZ3RoOyBpKyspIHtcbiAgICBhcmdzICs9IGBwJHtpfSxgO1xuICB9XG4gIHJldHVybiBgKCR7YXJnc30pPT4oJHtmbkJvZHl9KWA7XG59O1xuIl19","var _a;\nimport { assertEqual, assertTrue } from '../error/assert';\nimport { tryGetInvokeContext } from '../use/use-core';\nimport { logWarn } from '../util/log';\nimport { qDev, qSerialize } from '../util/qdev';\nimport { ComputedEvent, RenderEvent, ResourceEvent } from '../util/markers';\nimport { isObject } from '../util/types';\nimport { getSubscriptionManager, getProxyTarget, LocalSubscriptionManager, verifySerializable, } from './common';\nimport { QObjectManagerSymbol, _IMMUTABLE, _IMMUTABLE_PREFIX } from './constants';\nimport { _fnSignal } from '../qrl/inlined-fn';\n/** @internal */\nexport const _createSignal = (value, containerState, flags, subscriptions) => {\n    const manager = containerState.$subsManager$.$createManager$(subscriptions);\n    const signal = new SignalImpl(value, manager, flags);\n    return signal;\n};\nexport const QObjectSignalFlags = Symbol('proxy manager');\nexport const SIGNAL_IMMUTABLE = 1 << 0;\nexport const SIGNAL_UNASSIGNED = 1 << 1;\nexport const SignalUnassignedException = Symbol('unassigned signal');\nexport class SignalBase {\n}\nexport class SignalImpl extends SignalBase {\n    constructor(v, manager, flags) {\n        super();\n        this[_a] = 0;\n        this.untrackedValue = v;\n        this[QObjectManagerSymbol] = manager;\n        this[QObjectSignalFlags] = flags;\n    }\n    // prevent accidental use as value\n    valueOf() {\n        if (qDev) {\n            throw new TypeError('Cannot coerce a Signal, use `.value` instead');\n        }\n    }\n    toString() {\n        return `[Signal ${String(this.value)}]`;\n    }\n    toJSON() {\n        return { value: this.value };\n    }\n    get value() {\n        if (this[QObjectSignalFlags] & SIGNAL_UNASSIGNED) {\n            throw SignalUnassignedException;\n        }\n        const sub = tryGetInvokeContext()?.$subscriber$;\n        if (sub) {\n            this[QObjectManagerSymbol].$addSub$(sub);\n        }\n        return this.untrackedValue;\n    }\n    set value(v) {\n        if (qDev) {\n            if (this[QObjectSignalFlags] & SIGNAL_IMMUTABLE) {\n                throw new Error('Cannot mutate immutable signal');\n            }\n            if (qSerialize) {\n                verifySerializable(v);\n            }\n            const invokeCtx = tryGetInvokeContext();\n            if (invokeCtx) {\n                if (invokeCtx.$event$ === RenderEvent) {\n                    logWarn('State mutation inside render function. Use useTask$() instead.', invokeCtx.$hostElement$);\n                }\n                else if (invokeCtx.$event$ === ComputedEvent) {\n                    logWarn('State mutation inside useComputed$() is an antipattern. Use useTask$() instead', invokeCtx.$hostElement$);\n                }\n                else if (invokeCtx.$event$ === ResourceEvent) {\n                    logWarn('State mutation inside useResource$() is an antipattern. Use useTask$() instead', invokeCtx.$hostElement$);\n                }\n            }\n        }\n        const manager = this[QObjectManagerSymbol];\n        const oldValue = this.untrackedValue;\n        if (manager && oldValue !== v) {\n            this.untrackedValue = v;\n            manager.$notifySubs$();\n        }\n    }\n}\n_a = QObjectSignalFlags;\nexport class SignalDerived extends SignalBase {\n    constructor($func$, $args$, $funcStr$) {\n        super();\n        this.$func$ = $func$;\n        this.$args$ = $args$;\n        this.$funcStr$ = $funcStr$;\n    }\n    get value() {\n        return this.$func$.apply(undefined, this.$args$);\n    }\n}\nexport class SignalWrapper extends SignalBase {\n    constructor(ref, prop) {\n        super();\n        this.ref = ref;\n        this.prop = prop;\n    }\n    get [QObjectManagerSymbol]() {\n        return getSubscriptionManager(this.ref);\n    }\n    get value() {\n        return this.ref[this.prop];\n    }\n    set value(value) {\n        this.ref[this.prop] = value;\n    }\n}\n/**\n * Checks if a given object is a `Signal`.\n *\n * @param obj - The object to check if `Signal`.\n * @returns Boolean - True if the object is a `Signal`.\n * @public\n */\nexport const isSignal = (obj) => {\n    return obj instanceof SignalBase;\n};\n/** @internal */\nexport const _wrapProp = (obj, prop) => {\n    if (!isObject(obj)) {\n        return obj[prop];\n    }\n    if (obj instanceof SignalBase) {\n        assertEqual(prop, 'value', 'Left side is a signal, prop must be value');\n        return obj;\n    }\n    const target = getProxyTarget(obj);\n    if (target) {\n        const signal = target[_IMMUTABLE_PREFIX + prop];\n        if (signal) {\n            assertTrue(isSignal(signal), `${_IMMUTABLE_PREFIX} has to be a signal kind`);\n            return signal;\n        }\n        if (target[_IMMUTABLE]?.[prop] !== true) {\n            return new SignalWrapper(obj, prop);\n        }\n    }\n    const immutable = obj[_IMMUTABLE]?.[prop];\n    if (isSignal(immutable)) {\n        return immutable;\n    }\n    return _IMMUTABLE;\n};\n/** @internal */\nexport const _wrapSignal = (obj, prop) => {\n    const r = _wrapProp(obj, prop);\n    if (r === _IMMUTABLE) {\n        return obj[prop];\n    }\n    return r;\n};\n//# sourceMappingURL=data:application/json;base64,","import { assertEqual, assertNumber, assertTrue } from '../error/assert';\nimport { qError, QError_immutableProps } from '../error/error';\nimport { tryGetInvokeContext } from '../use/use-core';\nimport { qDev, qSerialize } from '../util/qdev';\nimport { ComputedEvent, RenderEvent, ResourceEvent } from '../util/markers';\nimport { isArray, isObject, isSerializableObject } from '../util/types';\nimport { fastSkipSerialize, LocalSubscriptionManager, unwrapProxy, verifySerializable, } from './common';\nimport { isSignal } from './signal';\nimport { QObjectFlagsSymbol, QObjectImmutable, QObjectManagerSymbol, QObjectRecursive, QOjectTargetSymbol, _IMMUTABLE, _IMMUTABLE_PREFIX, } from './constants';\nimport { logError, logWarn } from '../util/log';\n/** Creates a proxy that notifies of any writes. */\nexport const getOrCreateProxy = (target, containerState, flags = 0) => {\n    const proxy = containerState.$proxyMap$.get(target);\n    if (proxy) {\n        return proxy;\n    }\n    if (flags !== 0) {\n        setObjectFlags(target, flags);\n    }\n    return createProxy(target, containerState, undefined);\n};\nexport const createProxy = (target, containerState, subs) => {\n    assertEqual(unwrapProxy(target), target, 'Unexpected proxy at this location', target);\n    assertTrue(!containerState.$proxyMap$.has(target), 'Proxy was already created', target);\n    assertTrue(isObject(target), 'Target must be an object');\n    assertTrue(isSerializableObject(target) || isArray(target), 'Target must be a serializable object');\n    const manager = containerState.$subsManager$.$createManager$(subs);\n    const proxy = new Proxy(target, new ReadWriteProxyHandler(containerState, manager));\n    containerState.$proxyMap$.set(target, proxy);\n    return proxy;\n};\nexport const createPropsState = () => {\n    const props = {};\n    setObjectFlags(props, QObjectImmutable);\n    return props;\n};\nexport const setObjectFlags = (obj, flags) => {\n    Object.defineProperty(obj, QObjectFlagsSymbol, { value: flags, enumerable: false });\n};\n/** @internal */\nexport const _restProps = (props, omit) => {\n    const rest = {};\n    for (const key in props) {\n        if (!omit.includes(key)) {\n            rest[key] = props[key];\n        }\n    }\n    return rest;\n};\nexport class ReadWriteProxyHandler {\n    constructor($containerState$, $manager$) {\n        this.$containerState$ = $containerState$;\n        this.$manager$ = $manager$;\n    }\n    deleteProperty(target, prop) {\n        if (target[QObjectFlagsSymbol] & QObjectImmutable) {\n            throw qError(QError_immutableProps);\n        }\n        if (typeof prop != 'string' || !delete target[prop]) {\n            return false;\n        }\n        this.$manager$.$notifySubs$(isArray(target) ? undefined : prop);\n        return true;\n    }\n    get(target, prop) {\n        if (typeof prop === 'symbol') {\n            if (prop === QOjectTargetSymbol) {\n                return target;\n            }\n            if (prop === QObjectManagerSymbol) {\n                return this.$manager$;\n            }\n            return target[prop];\n        }\n        const flags = target[QObjectFlagsSymbol] ?? 0;\n        assertNumber(flags, 'flags must be an number');\n        const invokeCtx = tryGetInvokeContext();\n        const recursive = (flags & QObjectRecursive) !== 0;\n        const immutable = (flags & QObjectImmutable) !== 0;\n        const hiddenSignal = target[_IMMUTABLE_PREFIX + prop];\n        let subscriber;\n        let value;\n        if (invokeCtx) {\n            subscriber = invokeCtx.$subscriber$;\n        }\n        if (immutable && (!(prop in target) || immutableValue(target[_IMMUTABLE]?.[prop]))) {\n            subscriber = null;\n        }\n        if (hiddenSignal) {\n            assertTrue(isSignal(hiddenSignal), '$$ prop must be a signal');\n            value = hiddenSignal.value;\n            subscriber = null;\n        }\n        else {\n            value = target[prop];\n        }\n        if (subscriber) {\n            const isA = isArray(target);\n            this.$manager$.$addSub$(subscriber, isA ? undefined : prop);\n        }\n        return recursive ? wrap(value, this.$containerState$) : value;\n    }\n    set(target, prop, newValue) {\n        if (typeof prop === 'symbol') {\n            target[prop] = newValue;\n            return true;\n        }\n        const flags = target[QObjectFlagsSymbol] ?? 0;\n        assertNumber(flags, 'flags must be an number');\n        const immutable = (flags & QObjectImmutable) !== 0;\n        if (immutable) {\n            throw qError(QError_immutableProps);\n        }\n        const recursive = (flags & QObjectRecursive) !== 0;\n        const unwrappedNewValue = recursive ? unwrapProxy(newValue) : newValue;\n        if (qDev) {\n            if (qSerialize) {\n                verifySerializable(unwrappedNewValue);\n            }\n            const invokeCtx = tryGetInvokeContext();\n            if (invokeCtx) {\n                if (invokeCtx.$event$ === RenderEvent) {\n                    logError('State mutation inside render function. Move mutation to useTask$() or useVisibleTask$()', prop);\n                }\n                else if (invokeCtx.$event$ === ComputedEvent) {\n                    logWarn('State mutation inside useComputed$() is an antipattern. Use useTask$() instead', invokeCtx.$hostElement$);\n                }\n                else if (invokeCtx.$event$ === ResourceEvent) {\n                    logWarn('State mutation inside useResource$() is an antipattern. Use useTask$() instead', invokeCtx.$hostElement$);\n                }\n            }\n        }\n        const isA = isArray(target);\n        if (isA) {\n            target[prop] = unwrappedNewValue;\n            this.$manager$.$notifySubs$();\n            return true;\n        }\n        const oldValue = target[prop];\n        target[prop] = unwrappedNewValue;\n        if (oldValue !== unwrappedNewValue) {\n            this.$manager$.$notifySubs$(prop);\n        }\n        return true;\n    }\n    has(target, property) {\n        if (property === QOjectTargetSymbol) {\n            return true;\n        }\n        const hasOwnProperty = Object.prototype.hasOwnProperty;\n        if (hasOwnProperty.call(target, property)) {\n            return true;\n        }\n        if (typeof property === 'string' && hasOwnProperty.call(target, _IMMUTABLE_PREFIX + property)) {\n            return true;\n        }\n        return false;\n    }\n    ownKeys(target) {\n        const flags = target[QObjectFlagsSymbol] ?? 0;\n        assertNumber(flags, 'flags must be an number');\n        const immutable = (flags & QObjectImmutable) !== 0;\n        if (!immutable) {\n            let subscriber = null;\n            const invokeCtx = tryGetInvokeContext();\n            if (invokeCtx) {\n                subscriber = invokeCtx.$subscriber$;\n            }\n            if (subscriber) {\n                this.$manager$.$addSub$(subscriber);\n            }\n        }\n        if (isArray(target)) {\n            return Reflect.ownKeys(target);\n        }\n        return Reflect.ownKeys(target).map((a) => {\n            return typeof a === 'string' && a.startsWith(_IMMUTABLE_PREFIX)\n                ? a.slice(_IMMUTABLE_PREFIX.length)\n                : a;\n        });\n    }\n    getOwnPropertyDescriptor(target, prop) {\n        if (isArray(target) || typeof prop === 'symbol') {\n            return Object.getOwnPropertyDescriptor(target, prop);\n        }\n        return {\n            enumerable: true,\n            configurable: true,\n        };\n    }\n}\nconst immutableValue = (value) => {\n    return value === _IMMUTABLE || isSignal(value);\n};\nconst wrap = (value, containerState) => {\n    if (isObject(value)) {\n        if (Object.isFrozen(value)) {\n            return value;\n        }\n        const nakedValue = unwrapProxy(value);\n        if (nakedValue !== value) {\n            // already a proxy return;\n            return value;\n        }\n        if (fastSkipSerialize(nakedValue)) {\n            return value;\n        }\n        if (isSerializableObject(nakedValue) || isArray(nakedValue)) {\n            const proxy = containerState.$proxyMap$.get(nakedValue);\n            return proxy ? proxy : getOrCreateProxy(nakedValue, containerState, QObjectRecursive);\n        }\n    }\n    return value;\n};\n//# sourceMappingURL=data:application/json;base64,","/**\n * QWIK_VERSION\n *\n * @public\n */\nexport const version = globalThis.QWIK_VERSION;\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidmVyc2lvbi5qcyIsInNvdXJjZVJvb3QiOiIuLyIsInNvdXJjZXMiOlsicGFja2FnZXMvcXdpay9zcmMvY29yZS92ZXJzaW9uLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBOzs7O0dBSUc7QUFDSCxNQUFNLENBQUMsTUFBTSxPQUFPLEdBQUksVUFBa0IsQ0FBQyxZQUFzQixDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBRV0lLX1ZFUlNJT05cbiAqXG4gKiBAcHVibGljXG4gKi9cbmV4cG9ydCBjb25zdCB2ZXJzaW9uID0gKGdsb2JhbFRoaXMgYXMgYW55KS5RV0lLX1ZFUlNJT04gYXMgc3RyaW5nO1xuIl19","export const hashCode = (text, hash = 0) => {\n    for (let i = 0; i < text.length; i++) {\n        const chr = text.charCodeAt(i);\n        hash = (hash << 5) - hash + chr;\n        hash |= 0; // Convert to 32bit integer\n    }\n    return Number(Math.abs(hash)).toString(36);\n};\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaGFzaF9jb2RlLmpzIiwic291cmNlUm9vdCI6Ii4vIiwic291cmNlcyI6WyJwYWNrYWdlcy9xd2lrL3NyYy9jb3JlL3V0aWwvaGFzaF9jb2RlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE1BQU0sQ0FBQyxNQUFNLFFBQVEsR0FBRyxDQUFDLElBQVksRUFBRSxPQUFlLENBQUMsRUFBRSxFQUFFO0lBQ3pELEtBQUssSUFBSSxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsR0FBRyxJQUFJLENBQUMsTUFBTSxFQUFFLENBQUMsRUFBRSxFQUFFLENBQUM7UUFDckMsTUFBTSxHQUFHLEdBQUcsSUFBSSxDQUFDLFVBQVUsQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUMvQixJQUFJLEdBQUcsQ0FBQyxJQUFJLElBQUksQ0FBQyxDQUFDLEdBQUcsSUFBSSxHQUFHLEdBQUcsQ0FBQztRQUNoQyxJQUFJLElBQUksQ0FBQyxDQUFDLENBQUMsMkJBQTJCO0lBQ3hDLENBQUM7SUFDRCxPQUFPLE1BQU0sQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsUUFBUSxDQUFDLEVBQUUsQ0FBQyxDQUFDO0FBQzdDLENBQUMsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImV4cG9ydCBjb25zdCBoYXNoQ29kZSA9ICh0ZXh0OiBzdHJpbmcsIGhhc2g6IG51bWJlciA9IDApID0+IHtcbiAgZm9yIChsZXQgaSA9IDA7IGkgPCB0ZXh0Lmxlbmd0aDsgaSsrKSB7XG4gICAgY29uc3QgY2hyID0gdGV4dC5jaGFyQ29kZUF0KGkpO1xuICAgIGhhc2ggPSAoaGFzaCA8PCA1KSAtIGhhc2ggKyBjaHI7XG4gICAgaGFzaCB8PSAwOyAvLyBDb252ZXJ0IHRvIDMyYml0IGludGVnZXJcbiAgfVxuICByZXR1cm4gTnVtYmVyKE1hdGguYWJzKGhhc2gpKS50b1N0cmluZygzNik7XG59O1xuIl19","import { ComponentStylesPrefixContent } from '../util/markers';\nimport { hashCode } from '../util/hash_code';\nimport { assertQrl } from '../qrl/qrl-class';\nexport const styleKey = (qStyles, index) => {\n    assertQrl(qStyles);\n    return `${hashCode(qStyles.$hash$)}-${index}`;\n};\nexport const styleHost = (styleId) => {\n    return styleId;\n};\nexport const styleContent = (styleId) => {\n    return ComponentStylesPrefixContent + styleId;\n};\nexport const serializeSStyle = (scopeIds) => {\n    const value = scopeIds.join('|');\n    if (value.length > 0) {\n        return value;\n    }\n    return undefined;\n};\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicXJsLXN0eWxlcy5qcyIsInNvdXJjZVJvb3QiOiIuLyIsInNvdXJjZXMiOlsicGFja2FnZXMvcXdpay9zcmMvY29yZS9zdHlsZS9xcmwtc3R5bGVzLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSw0QkFBNEIsRUFBRSxNQUFNLGlCQUFpQixDQUFDO0FBQy9ELE9BQU8sRUFBRSxRQUFRLEVBQUUsTUFBTSxtQkFBbUIsQ0FBQztBQUU3QyxPQUFPLEVBQUUsU0FBUyxFQUFFLE1BQU0sa0JBQWtCLENBQUM7QUFFN0MsTUFBTSxDQUFDLE1BQU0sUUFBUSxHQUFHLENBQUMsT0FBb0IsRUFBRSxLQUFhLEVBQVUsRUFBRTtJQUN0RSxTQUFTLENBQUMsT0FBTyxDQUFDLENBQUM7SUFDbkIsT0FBTyxHQUFHLFFBQVEsQ0FBQyxPQUFPLENBQUMsTUFBTSxDQUFDLElBQUksS0FBSyxFQUFFLENBQUM7QUFDaEQsQ0FBQyxDQUFDO0FBRUYsTUFBTSxDQUFDLE1BQU0sU0FBUyxHQUFHLENBQUMsT0FBZSxFQUFVLEVBQUU7SUFDbkQsT0FBTyxPQUFPLENBQUM7QUFDakIsQ0FBQyxDQUFDO0FBRUYsTUFBTSxDQUFDLE1BQU0sWUFBWSxHQUFHLENBQUMsT0FBZSxFQUFVLEVBQUU7SUFDdEQsT0FBTyw0QkFBNEIsR0FBRyxPQUFPLENBQUM7QUFDaEQsQ0FBQyxDQUFDO0FBRUYsTUFBTSxDQUFDLE1BQU0sZUFBZSxHQUFHLENBQUMsUUFBa0IsRUFBRSxFQUFFO0lBQ3BELE1BQU0sS0FBSyxHQUFHLFFBQVEsQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUM7SUFDakMsSUFBSSxLQUFLLENBQUMsTUFBTSxHQUFHLENBQUMsRUFBRSxDQUFDO1FBQ3JCLE9BQU8sS0FBSyxDQUFDO0lBQ2YsQ0FBQztJQUNELE9BQU8sU0FBUyxDQUFDO0FBQ25CLENBQUMsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IENvbXBvbmVudFN0eWxlc1ByZWZpeENvbnRlbnQgfSBmcm9tICcuLi91dGlsL21hcmtlcnMnO1xuaW1wb3J0IHsgaGFzaENvZGUgfSBmcm9tICcuLi91dGlsL2hhc2hfY29kZSc7XG5pbXBvcnQgdHlwZSB7IFFSTCB9IGZyb20gJy4uL3FybC9xcmwucHVibGljJztcbmltcG9ydCB7IGFzc2VydFFybCB9IGZyb20gJy4uL3FybC9xcmwtY2xhc3MnO1xuXG5leHBvcnQgY29uc3Qgc3R5bGVLZXkgPSAocVN0eWxlczogUVJMPHN0cmluZz4sIGluZGV4OiBudW1iZXIpOiBzdHJpbmcgPT4ge1xuICBhc3NlcnRRcmwocVN0eWxlcyk7XG4gIHJldHVybiBgJHtoYXNoQ29kZShxU3R5bGVzLiRoYXNoJCl9LSR7aW5kZXh9YDtcbn07XG5cbmV4cG9ydCBjb25zdCBzdHlsZUhvc3QgPSAoc3R5bGVJZDogc3RyaW5nKTogc3RyaW5nID0+IHtcbiAgcmV0dXJuIHN0eWxlSWQ7XG59O1xuXG5leHBvcnQgY29uc3Qgc3R5bGVDb250ZW50ID0gKHN0eWxlSWQ6IHN0cmluZyk6IHN0cmluZyA9PiB7XG4gIHJldHVybiBDb21wb25lbnRTdHlsZXNQcmVmaXhDb250ZW50ICsgc3R5bGVJZDtcbn07XG5cbmV4cG9ydCBjb25zdCBzZXJpYWxpemVTU3R5bGUgPSAoc2NvcGVJZHM6IHN0cmluZ1tdKSA9PiB7XG4gIGNvbnN0IHZhbHVlID0gc2NvcGVJZHMuam9pbignfCcpO1xuICBpZiAodmFsdWUubGVuZ3RoID4gMCkge1xuICAgIHJldHVybiB2YWx1ZTtcbiAgfVxuICByZXR1cm4gdW5kZWZpbmVkO1xufTtcbiJdfQ==","var _a;\nimport { isPromise, maybeThen } from '../../util/promises';\nimport { newInvokeContext, invoke, trackSignal } from '../../use/use-core';\nimport { Virtual, _jsxC, _jsxQ, createJSXError, isJSXNode } from '../jsx/jsx-runtime';\nimport { isArray, isFunction, isString } from '../../util/types';\nimport { createRenderContext, executeComponent, getNextIndex, isAriaAttribute, jsxToString, pushRenderContext, serializeClass, shouldWrapFunctional, static_subtree, stringifyStyle, dangerouslySetInnerHTML, } from '../execute-component';\nimport { ELEMENT_ID, OnRenderProp, QScopedStyle, QSlot, QSlotS, QStyle } from '../../util/markers';\nimport { InternalSSRStream, SSRRaw } from '../jsx/utils.public';\nimport { logError, logWarn } from '../../util/log';\nimport { groupListeners, isOnProp, PREVENT_DEFAULT, setEvent, } from '../../state/listeners';\nimport { version } from '../../version';\nimport { createContainerState, setRef, getEventName, } from '../../container/container';\nimport { assertDefined } from '../../error/assert';\nimport { serializeSStyle } from '../../style/qrl-styles';\nimport { qDev, qInspector, seal } from '../../util/qdev';\nimport { qError, QError_canNotRenderHTML } from '../../error/error';\nimport { isSignal } from '../../state/signal';\nimport { serializeQRLs } from '../../qrl/qrl';\nimport { EMPTY_OBJ } from '../../util/flyweight';\nimport { createContext, HOST_FLAG_DIRTY, HOST_FLAG_NEED_ATTACH_LISTENER, HOST_FLAG_DYNAMIC, } from '../../state/context';\nimport { createPropsState, createProxy } from '../../state/store';\nimport { Q_CTX, _IMMUTABLE, _IMMUTABLE_PREFIX } from '../../state/constants';\nconst FLUSH_COMMENT = '<!--qkssr-f-->';\nconst IS_HEAD = 1 << 0;\nconst IS_HTML = 1 << 2;\nconst IS_TEXT = 1 << 3;\nconst IS_INVISIBLE = 1 << 4;\nconst IS_PHASING = 1 << 5;\nconst IS_ANCHOR = 1 << 6;\nconst IS_BUTTON = 1 << 7;\nconst IS_TABLE = 1 << 8;\nconst IS_PHRASING_CONTAINER = 1 << 9;\nconst IS_IMMUTABLE = 1 << 10;\nclass MockElement {\n    constructor(nodeType) {\n        this.nodeType = nodeType;\n        this[_a] = null;\n        seal(this);\n    }\n}\n_a = Q_CTX;\nconst createDocument = () => {\n    return new MockElement(9);\n};\n/** @internal */\nexport const _renderSSR = async (node, opts) => {\n    const root = opts.containerTagName;\n    const containerEl = createMockQContext(1).$element$;\n    const containerState = createContainerState(containerEl, opts.base ?? '/');\n    containerState.$serverData$.locale = opts.serverData?.locale;\n    const doc = createDocument();\n    const rCtx = createRenderContext(doc, containerState);\n    const headNodes = opts.beforeContent ?? [];\n    if (qDev) {\n        if (root in phasingContent ||\n            root in emptyElements ||\n            root in tableContent ||\n            root in startPhasingContent ||\n            root in invisibleElements) {\n            throw new Error(`The \"containerTagName\" can not be \"${root}\". Please choose a different tag name like: \"div\", \"html\", \"custom-container\".`);\n        }\n    }\n    const ssrCtx = {\n        $static$: {\n            $contexts$: [],\n            $headNodes$: root === 'html' ? headNodes : [],\n            $locale$: opts.serverData?.locale,\n            $textNodes$: new Map(),\n        },\n        $projectedChildren$: undefined,\n        $projectedCtxs$: undefined,\n        $invocationContext$: undefined,\n    };\n    seal(ssrCtx);\n    let qRender = qDev ? 'ssr-dev' : 'ssr';\n    if (opts.containerAttributes['q:render']) {\n        qRender = `${opts.containerAttributes['q:render']}-${qRender}`;\n    }\n    const containerAttributes = {\n        ...opts.containerAttributes,\n        'q:container': 'paused',\n        'q:version': version ?? 'dev',\n        'q:render': qRender,\n        'q:base': opts.base,\n        'q:locale': opts.serverData?.locale,\n        'q:manifest-hash': opts.manifestHash,\n    };\n    const children = root === 'html' ? [node] : [headNodes, node];\n    if (root !== 'html') {\n        containerAttributes.class =\n            'qc📦' + (containerAttributes.class ? ' ' + containerAttributes.class : '');\n    }\n    if (opts.serverData) {\n        containerState.$serverData$ = opts.serverData;\n    }\n    node = _jsxQ(root, null, containerAttributes, children, HOST_FLAG_DIRTY | HOST_FLAG_NEED_ATTACH_LISTENER, null);\n    containerState.$hostsRendering$ = new Set();\n    await Promise.resolve().then(() => renderRoot(node, rCtx, ssrCtx, opts.stream, containerState, opts));\n};\nconst renderRoot = async (node, rCtx, ssrCtx, stream, containerState, opts) => {\n    const beforeClose = opts.beforeClose;\n    await renderNode(node, rCtx, ssrCtx, stream, 0, beforeClose\n        ? (stream) => {\n            const result = beforeClose(ssrCtx.$static$.$contexts$, containerState, false, ssrCtx.$static$.$textNodes$);\n            return processData(result, rCtx, ssrCtx, stream, 0, undefined);\n        }\n        : undefined);\n    if (qDev) {\n        if (ssrCtx.$static$.$headNodes$.length > 0) {\n            logError('Missing <head>. Global styles could not be rendered. Please render a <head> element at the root of the app');\n        }\n    }\n    return rCtx;\n};\nconst renderGenerator = async (node, rCtx, ssrCtx, stream, flags) => {\n    stream.write(FLUSH_COMMENT);\n    const generator = node.props.children;\n    let value;\n    if (isFunction(generator)) {\n        const v = generator({\n            write(chunk) {\n                stream.write(chunk);\n                stream.write(FLUSH_COMMENT);\n            },\n        });\n        if (isPromise(v)) {\n            return v;\n        }\n        value = v;\n    }\n    else {\n        value = generator;\n    }\n    for await (const chunk of value) {\n        await processData(chunk, rCtx, ssrCtx, stream, flags, undefined);\n        stream.write(FLUSH_COMMENT);\n    }\n};\nconst renderNodeVirtual = (node, elCtx, extraNodes, rCtx, ssrCtx, stream, flags, beforeClose) => {\n    const props = node.props;\n    const renderQrl = props[OnRenderProp];\n    if (renderQrl) {\n        elCtx.$componentQrl$ = renderQrl;\n        return renderSSRComponent(rCtx, ssrCtx, stream, elCtx, node, flags, beforeClose);\n    }\n    let virtualComment = '<!--qv' + renderVirtualAttributes(props);\n    const isSlot = QSlotS in props;\n    const key = node.key != null ? String(node.key) : null;\n    if (isSlot) {\n        assertDefined(rCtx.$cmpCtx$?.$id$, 'hostId must be defined for a slot');\n        virtualComment += ' q:sref=' + rCtx.$cmpCtx$.$id$;\n    }\n    if (key != null) {\n        virtualComment += ' q:key=' + key;\n    }\n    virtualComment += '-->';\n    stream.write(virtualComment);\n    const html = node.props[dangerouslySetInnerHTML];\n    if (html) {\n        stream.write(html);\n        stream.write(CLOSE_VIRTUAL);\n        return;\n    }\n    if (extraNodes) {\n        for (const node of extraNodes) {\n            // We trust that the attributes are strings\n            renderNodeElementSync(node.type, node.props, stream);\n        }\n    }\n    const promise = walkChildren(node.children, rCtx, ssrCtx, stream, flags);\n    return maybeThen(promise, () => {\n        // Fast path\n        if (!isSlot && !beforeClose) {\n            stream.write(CLOSE_VIRTUAL);\n            return;\n        }\n        let promise;\n        if (isSlot) {\n            assertDefined(key, 'key must be defined for a slot');\n            const content = ssrCtx.$projectedChildren$?.[key];\n            if (content) {\n                const [rCtx, sCtx] = ssrCtx.$projectedCtxs$;\n                const newSlotRctx = pushRenderContext(rCtx);\n                newSlotRctx.$slotCtx$ = elCtx;\n                ssrCtx.$projectedChildren$[key] = undefined;\n                promise = processData(content, newSlotRctx, sCtx, stream, flags);\n            }\n        }\n        // Inject before close\n        if (beforeClose) {\n            promise = maybeThen(promise, () => beforeClose(stream));\n        }\n        return maybeThen(promise, () => {\n            stream.write(CLOSE_VIRTUAL);\n        });\n    });\n};\nconst CLOSE_VIRTUAL = `<!--/qv-->`;\nconst renderAttributes = (attributes) => {\n    let text = '';\n    for (const prop in attributes) {\n        if (prop === dangerouslySetInnerHTML) {\n            continue;\n        }\n        const value = attributes[prop];\n        if (value != null) {\n            text += ' ' + (value === '' ? prop : prop + '=\"' + value + '\"');\n        }\n    }\n    return text;\n};\nconst renderVirtualAttributes = (attributes) => {\n    let text = '';\n    for (const prop in attributes) {\n        if (prop === 'children' || prop === dangerouslySetInnerHTML) {\n            continue;\n        }\n        const value = attributes[prop];\n        if (value != null) {\n            text += ' ' + (value === '' ? prop : prop + '=' + value + '');\n        }\n    }\n    return text;\n};\nconst renderNodeElementSync = (tagName, attributes, stream) => {\n    stream.write('<' + tagName + renderAttributes(attributes) + '>');\n    const empty = !!emptyElements[tagName];\n    if (empty) {\n        return;\n    }\n    // Render innerHTML\n    const innerHTML = attributes[dangerouslySetInnerHTML];\n    if (innerHTML != null) {\n        stream.write(innerHTML);\n    }\n    stream.write(`</${tagName}>`);\n};\nconst renderSSRComponent = (rCtx, ssrCtx, stream, elCtx, node, flags, beforeClose) => {\n    const props = node.props;\n    setComponentProps(rCtx, elCtx, props.props);\n    return maybeThen(executeComponent(rCtx, elCtx), (res) => {\n        const hostElement = elCtx.$element$;\n        const newRCtx = res.rCtx;\n        const iCtx = newInvokeContext(ssrCtx.$static$.$locale$, hostElement, undefined);\n        iCtx.$subscriber$ = [0, hostElement];\n        iCtx.$renderCtx$ = newRCtx;\n        const newSSrContext = {\n            $static$: ssrCtx.$static$,\n            $projectedChildren$: splitProjectedChildren(node.children, ssrCtx),\n            $projectedCtxs$: [rCtx, ssrCtx],\n            $invocationContext$: iCtx,\n        };\n        const extraNodes = [];\n        if (elCtx.$appendStyles$) {\n            const isHTML = !!(flags & IS_HTML);\n            const array = isHTML ? ssrCtx.$static$.$headNodes$ : extraNodes;\n            for (const style of elCtx.$appendStyles$) {\n                array.push(_jsxQ('style', {\n                    [QStyle]: style.styleId,\n                    [dangerouslySetInnerHTML]: style.content,\n                    hidden: '',\n                }, null, null, 0, null));\n            }\n        }\n        const newID = getNextIndex(rCtx);\n        const scopeId = elCtx.$scopeIds$ ? serializeSStyle(elCtx.$scopeIds$) : undefined;\n        const processedNode = _jsxC(node.type, {\n            [QScopedStyle]: scopeId,\n            [ELEMENT_ID]: newID,\n            children: res.node,\n        }, 0, node.key);\n        elCtx.$id$ = newID;\n        ssrCtx.$static$.$contexts$.push(elCtx);\n        return renderNodeVirtual(processedNode, elCtx, extraNodes, newRCtx, newSSrContext, stream, flags, (stream) => {\n            if (elCtx.$flags$ & HOST_FLAG_NEED_ATTACH_LISTENER) {\n                const placeholderCtx = createMockQContext(1);\n                const listeners = placeholderCtx.li;\n                listeners.push(...elCtx.li);\n                elCtx.$flags$ &= ~HOST_FLAG_NEED_ATTACH_LISTENER;\n                placeholderCtx.$id$ = getNextIndex(rCtx);\n                const attributes = {\n                    type: 'placeholder',\n                    hidden: '',\n                    'q:id': placeholderCtx.$id$,\n                };\n                ssrCtx.$static$.$contexts$.push(placeholderCtx);\n                const groups = groupListeners(listeners);\n                for (const listener of groups) {\n                    const eventName = normalizeInvisibleEvents(listener[0]);\n                    attributes[eventName] = serializeQRLs(listener[1], placeholderCtx);\n                    registerQwikEvent(eventName, rCtx.$static$.$containerState$);\n                }\n                renderNodeElementSync('script', attributes, stream);\n            }\n            const projectedChildren = newSSrContext.$projectedChildren$;\n            let missingSlotsDone;\n            if (projectedChildren) {\n                const nodes = Object.keys(projectedChildren).map((slotName) => {\n                    const content = projectedChildren[slotName];\n                    // projectedChildren[slotName] = undefined;\n                    if (content) {\n                        return _jsxQ('q:template', { [QSlot]: slotName, hidden: '', 'aria-hidden': 'true' }, null, content, 0, null);\n                    }\n                });\n                const [_rCtx, sCtx] = newSSrContext.$projectedCtxs$;\n                const newSlotRctx = pushRenderContext(_rCtx);\n                newSlotRctx.$slotCtx$ = elCtx;\n                missingSlotsDone = processData(nodes, newSlotRctx, sCtx, stream, 0, undefined);\n            }\n            return beforeClose\n                ? maybeThen(missingSlotsDone, () => beforeClose(stream))\n                : missingSlotsDone;\n        });\n    });\n};\nconst splitProjectedChildren = (children, ssrCtx) => {\n    const flatChildren = flatVirtualChildren(children, ssrCtx);\n    if (flatChildren === null) {\n        return undefined;\n    }\n    const slotMap = {};\n    for (const child of flatChildren) {\n        let slotName = '';\n        if (isJSXNode(child)) {\n            slotName = child.props[QSlot] || '';\n        }\n        (slotMap[slotName] || (slotMap[slotName] = [])).push(child);\n    }\n    return slotMap;\n};\nconst createMockQContext = (nodeType) => {\n    const elm = new MockElement(nodeType);\n    return createContext(elm);\n};\nconst renderNode = (node, rCtx, ssrCtx, stream, flags, beforeClose) => {\n    const tagName = node.type;\n    const hostCtx = rCtx.$cmpCtx$;\n    if (typeof tagName === 'string') {\n        const key = node.key;\n        const props = node.props;\n        const immutable = node.immutableProps;\n        const elCtx = createMockQContext(1);\n        const elm = elCtx.$element$;\n        const isHead = tagName === 'head';\n        let openingElement = '<' + tagName;\n        let useSignal = false;\n        let hasRef = false;\n        let classStr = '';\n        let htmlStr = null;\n        if (qDev && props.class && props.className) {\n            throw new TypeError('Can only have one of class or className');\n        }\n        if (immutable) {\n            for (const prop in immutable) {\n                let value = immutable[prop];\n                if (isOnProp(prop)) {\n                    setEvent(elCtx.li, prop, value, undefined);\n                    continue;\n                }\n                const attrName = processPropKey(prop);\n                if (isSignal(value)) {\n                    assertDefined(hostCtx, 'Signals can not be used outside the root');\n                    value = trackSignal(value, [1, elm, value, hostCtx.$element$, attrName]);\n                    useSignal = true;\n                }\n                if (prop === dangerouslySetInnerHTML) {\n                    htmlStr = value;\n                    continue;\n                }\n                if (prop.startsWith(PREVENT_DEFAULT)) {\n                    registerQwikEvent(prop.slice(PREVENT_DEFAULT.length), rCtx.$static$.$containerState$);\n                }\n                const attrValue = processPropValue(attrName, value);\n                if (attrValue != null) {\n                    if (attrName === 'class') {\n                        classStr = attrValue;\n                    }\n                    else if (attrName === 'value' && tagName === 'textarea') {\n                        htmlStr = escapeHtml(attrValue);\n                    }\n                    else if (isSSRUnsafeAttr(attrName)) {\n                        if (qDev) {\n                            logError('Attribute value is unsafe for SSR');\n                        }\n                    }\n                    else {\n                        openingElement +=\n                            ' ' + (value === '' ? attrName : attrName + '=\"' + escapeAttr(attrValue) + '\"');\n                    }\n                }\n            }\n        }\n        for (const prop in props) {\n            let value = props[prop];\n            if (prop === 'ref') {\n                if (value !== undefined) {\n                    setRef(value, elm);\n                    hasRef = true;\n                }\n                continue;\n            }\n            if (isOnProp(prop)) {\n                setEvent(elCtx.li, prop, value, undefined);\n                continue;\n            }\n            const attrName = processPropKey(prop);\n            if (isSignal(value)) {\n                assertDefined(hostCtx, 'Signals can not be used outside the root');\n                value = trackSignal(value, [2, hostCtx.$element$, value, elm, attrName]);\n                useSignal = true;\n            }\n            if (prop === dangerouslySetInnerHTML) {\n                htmlStr = value;\n                continue;\n            }\n            if (prop.startsWith(PREVENT_DEFAULT)) {\n                registerQwikEvent(prop.slice(PREVENT_DEFAULT.length), rCtx.$static$.$containerState$);\n            }\n            const attrValue = processPropValue(attrName, value);\n            if (attrValue != null) {\n                if (attrName === 'class') {\n                    classStr = attrValue;\n                }\n                else if (attrName === 'value' && tagName === 'textarea') {\n                    htmlStr = escapeHtml(attrValue);\n                }\n                else if (isSSRUnsafeAttr(attrName)) {\n                    if (qDev) {\n                        logError('Attribute value is unsafe for SSR');\n                    }\n                }\n                else {\n                    openingElement +=\n                        ' ' + (value === '' ? attrName : attrName + '=\"' + escapeAttr(attrValue) + '\"');\n                }\n            }\n        }\n        const listeners = elCtx.li;\n        if (hostCtx) {\n            if (qDev) {\n                if (tagName === 'html') {\n                    throw qError(QError_canNotRenderHTML);\n                }\n            }\n            if (hostCtx.$scopeIds$?.length) {\n                const extra = hostCtx.$scopeIds$.join(' ');\n                classStr = classStr ? `${extra} ${classStr}` : extra;\n            }\n            if (hostCtx.$flags$ & HOST_FLAG_NEED_ATTACH_LISTENER) {\n                listeners.push(...hostCtx.li);\n                hostCtx.$flags$ &= ~HOST_FLAG_NEED_ATTACH_LISTENER;\n            }\n        }\n        // Reset HOST flags\n        if (qDev) {\n            if (flags & IS_PHASING && !(flags & IS_PHRASING_CONTAINER)) {\n                if (!(tagName in phasingContent)) {\n                    throw createJSXError(`<${tagName}> can not be rendered because one of its ancestor is a <p> or a <pre>.\\n\nThis goes against the HTML spec: https://html.spec.whatwg.org/multipage/dom.html#phrasing-content-2`, node);\n                }\n            }\n            if (tagName === 'table') {\n                flags |= IS_TABLE;\n            }\n            else {\n                if (flags & IS_TABLE && !(tagName in tableContent)) {\n                    throw createJSXError(`The <table> element requires that its direct children to be '<tbody>', '<thead>', '<tfoot>' or '<caption>' instead, '<${tagName}>' was rendered.`, node);\n                }\n                flags &= ~IS_TABLE;\n            }\n            if (tagName === 'button') {\n                if (flags & IS_BUTTON) {\n                    throw createJSXError(`<${tagName}> can not be rendered because one of its ancestor is already a <button>.\\n\nThis goes against the HTML spec: https://html.spec.whatwg.org/multipage/dom.html#interactive-content`, node);\n                }\n                else {\n                    flags |= IS_BUTTON;\n                }\n            }\n            if (tagName === 'a') {\n                if (flags & IS_ANCHOR) {\n                    throw createJSXError(`<${tagName}> can not be rendered because one of its ancestor is already a <a>.\\n\nThis goes against the HTML spec: https://html.spec.whatwg.org/multipage/dom.html#interactive-content`, node);\n                }\n                else {\n                    flags |= IS_ANCHOR;\n                }\n            }\n            if (tagName === 'svg' || tagName === 'math') {\n                // These types of elements are considered phrasing content, but contain children that aren't phrasing content.\n                flags |= IS_PHRASING_CONTAINER;\n            }\n            if (flags & IS_HEAD) {\n                if (!(tagName in headContent)) {\n                    throw createJSXError(`<${tagName}> can not be rendered because it's not a valid children of the <head> element. https://html.spec.whatwg.org/multipage/dom.html#metadata-content`, node);\n                }\n            }\n            if (flags & IS_HTML) {\n                if (!(tagName in htmlContent)) {\n                    throw createJSXError(`<${tagName}> can not be rendered because it's not a valid direct children of the <html> element, only <head> and <body> are allowed.`, node);\n                }\n            }\n            else if (tagName in htmlContent) {\n                throw createJSXError(`<${tagName}> can not be rendered because its parent is not a <html> element. Make sure the 'containerTagName' is set to 'html' in entry.ssr.tsx`, node);\n            }\n            if (tagName in startPhasingContent) {\n                flags |= IS_PHASING;\n            }\n        }\n        if (isHead) {\n            flags |= IS_HEAD;\n        }\n        if (tagName in invisibleElements) {\n            flags |= IS_INVISIBLE;\n        }\n        if (tagName in textOnlyElements) {\n            flags |= IS_TEXT;\n        }\n        if (classStr) {\n            openingElement += ' class=\"' + escapeAttr(classStr) + '\"';\n        }\n        if (listeners.length > 0) {\n            const groups = groupListeners(listeners);\n            const isInvisible = (flags & IS_INVISIBLE) !== 0;\n            for (const listener of groups) {\n                const eventName = isInvisible ? normalizeInvisibleEvents(listener[0]) : listener[0];\n                openingElement += ' ' + eventName + '=\"' + serializeQRLs(listener[1], elCtx) + '\"';\n                registerQwikEvent(eventName, rCtx.$static$.$containerState$);\n            }\n        }\n        if (key != null) {\n            openingElement += ' q:key=\"' + escapeAttr(key) + '\"';\n        }\n        if (hasRef || useSignal || listeners.length > 0) {\n            if (hasRef || useSignal || listenersNeedId(listeners)) {\n                const newID = getNextIndex(rCtx);\n                openingElement += ' q:id=\"' + newID + '\"';\n                elCtx.$id$ = newID;\n            }\n            ssrCtx.$static$.$contexts$.push(elCtx);\n        }\n        if (flags & IS_HEAD) {\n            openingElement += ' q:head';\n        }\n        if (qDev && qInspector && node.dev && !(flags & IS_HEAD)) {\n            const sanitizedFileName = node?.dev?.fileName?.replace(/\\\\/g, '/');\n            if (sanitizedFileName) {\n                openingElement += ` data-qwik-inspector=\"${escapeAttr(`${sanitizedFileName}:${node.dev.lineNumber}:${node.dev.columnNumber}`)}\"`;\n            }\n        }\n        openingElement += '>';\n        stream.write(openingElement);\n        if (tagName in emptyElements) {\n            return;\n        }\n        if (htmlStr != null) {\n            stream.write(String(htmlStr));\n            stream.write(`</${tagName}>`);\n            return;\n        }\n        if (tagName === 'html') {\n            flags |= IS_HTML;\n        }\n        else {\n            flags &= ~IS_HTML;\n        }\n        if (node.flags & static_subtree) {\n            flags |= IS_IMMUTABLE;\n        }\n        const promise = processData(node.children, rCtx, ssrCtx, stream, flags);\n        return maybeThen(promise, () => {\n            // If head inject base styles\n            if (isHead) {\n                for (const node of ssrCtx.$static$.$headNodes$) {\n                    renderNodeElementSync(node.type, node.props, stream);\n                }\n                ssrCtx.$static$.$headNodes$.length = 0;\n            }\n            // Fast path\n            if (!beforeClose) {\n                stream.write(`</${tagName}>`);\n                return;\n            }\n            // Inject before close\n            return maybeThen(beforeClose(stream), () => {\n                stream.write(`</${tagName}>`);\n            });\n        });\n    }\n    if (tagName === Virtual) {\n        const elCtx = createMockQContext(111);\n        elCtx.$parentCtx$ = rCtx.$slotCtx$ || rCtx.$cmpCtx$;\n        if (hostCtx && hostCtx.$flags$ & HOST_FLAG_DYNAMIC) {\n            addDynamicSlot(hostCtx, elCtx);\n        }\n        return renderNodeVirtual(node, elCtx, undefined, rCtx, ssrCtx, stream, flags, beforeClose);\n    }\n    if (tagName === SSRRaw) {\n        stream.write(node.props.data);\n        return;\n    }\n    if (tagName === InternalSSRStream) {\n        return renderGenerator(node, rCtx, ssrCtx, stream, flags);\n    }\n    // Inline component\n    const res = invoke(ssrCtx.$invocationContext$, tagName, node.props, node.key, node.flags, node.dev);\n    if (!shouldWrapFunctional(res, node)) {\n        return processData(res, rCtx, ssrCtx, stream, flags, beforeClose);\n    }\n    return renderNode(_jsxC(Virtual, { children: res }, 0, node.key), rCtx, ssrCtx, stream, flags, beforeClose);\n};\n/** Embed metadata while rendering the tree, to be used when resuming */\nconst processData = (node, rCtx, ssrCtx, stream, flags, beforeClose) => {\n    if (node == null || typeof node === 'boolean') {\n        return;\n    }\n    if (isString(node) || typeof node === 'number') {\n        stream.write(escapeHtml(String(node)));\n    }\n    else if (isJSXNode(node)) {\n        return renderNode(node, rCtx, ssrCtx, stream, flags, beforeClose);\n    }\n    else if (isArray(node)) {\n        return walkChildren(node, rCtx, ssrCtx, stream, flags);\n    }\n    else if (isSignal(node)) {\n        const insideText = flags & IS_TEXT;\n        const hostEl = rCtx.$cmpCtx$?.$element$;\n        let value;\n        if (hostEl) {\n            if (!insideText) {\n                const id = getNextIndex(rCtx);\n                const subs = flags & IS_IMMUTABLE\n                    ? [3, ('#' + id), node, ('#' + id)]\n                    : [4, hostEl, node, ('#' + id)];\n                value = trackSignal(node, subs);\n                if (isString(value)) {\n                    const str = jsxToString(value);\n                    ssrCtx.$static$.$textNodes$.set(str, id);\n                }\n                stream.write(`<!--t=${id}-->`);\n                processData(value, rCtx, ssrCtx, stream, flags, beforeClose);\n                stream.write(`<!---->`);\n                return;\n            }\n            else {\n                value = invoke(ssrCtx.$invocationContext$, () => node.value);\n            }\n        }\n        stream.write(escapeHtml(jsxToString(value)));\n        return;\n    }\n    else if (isPromise(node)) {\n        stream.write(FLUSH_COMMENT);\n        return node.then((node) => processData(node, rCtx, ssrCtx, stream, flags, beforeClose));\n    }\n    else {\n        logWarn('A unsupported value was passed to the JSX, skipping render. Value:', node);\n        return;\n    }\n};\nconst walkChildren = (children, rCtx, ssrContext, stream, flags) => {\n    if (children == null) {\n        return;\n    }\n    if (!isArray(children)) {\n        return processData(children, rCtx, ssrContext, stream, flags);\n    }\n    const len = children.length;\n    if (len === 1) {\n        return processData(children[0], rCtx, ssrContext, stream, flags);\n    }\n    if (len === 0) {\n        return;\n    }\n    let currentIndex = 0;\n    const buffers = [];\n    return children.reduce((prevPromise, child, index) => {\n        const buffer = [];\n        buffers.push(buffer);\n        const localStream = prevPromise\n            ? {\n                write(chunk) {\n                    if (currentIndex === index) {\n                        stream.write(chunk);\n                    }\n                    else {\n                        buffer.push(chunk);\n                    }\n                },\n            }\n            : stream;\n        const rendered = processData(child, rCtx, ssrContext, localStream, flags);\n        const next = () => {\n            currentIndex++;\n            if (buffers.length > currentIndex) {\n                buffers[currentIndex].forEach((chunk) => stream.write(chunk));\n            }\n        };\n        if (isPromise(rendered) && prevPromise) {\n            return Promise.all([rendered, prevPromise]).then(next);\n        }\n        else if (isPromise(rendered)) {\n            return rendered.then(next);\n        }\n        else if (prevPromise) {\n            return prevPromise.then(next);\n        }\n        else {\n            currentIndex++;\n            return undefined;\n        }\n    }, undefined);\n};\nconst flatVirtualChildren = (children, ssrCtx) => {\n    if (children == null) {\n        return null;\n    }\n    const result = _flatVirtualChildren(children, ssrCtx);\n    const nodes = isArray(result) ? result : [result];\n    if (nodes.length === 0) {\n        return null;\n    }\n    return nodes;\n};\nconst _flatVirtualChildren = (children, ssrCtx) => {\n    if (children == null) {\n        return null;\n    }\n    if (isArray(children)) {\n        return children.flatMap((c) => _flatVirtualChildren(c, ssrCtx));\n    }\n    else if (isJSXNode(children) &&\n        isFunction(children.type) &&\n        children.type !== SSRRaw &&\n        children.type !== InternalSSRStream &&\n        children.type !== Virtual) {\n        const res = invoke(ssrCtx.$invocationContext$, children.type, children.props, children.key, children.flags);\n        return flatVirtualChildren(res, ssrCtx);\n    }\n    return children;\n};\nconst setComponentProps = (rCtx, elCtx, expectProps) => {\n    const keys = Object.keys(expectProps);\n    const target = createPropsState();\n    elCtx.$props$ = createProxy(target, rCtx.$static$.$containerState$);\n    if (keys.length === 0) {\n        return;\n    }\n    const immutableMeta = (target[_IMMUTABLE] =\n        expectProps[_IMMUTABLE] ?? EMPTY_OBJ);\n    for (const prop of keys) {\n        if (prop === 'children' || prop === QSlot) {\n            continue;\n        }\n        if (isSignal(immutableMeta[prop])) {\n            target[_IMMUTABLE_PREFIX + prop] = immutableMeta[prop];\n        }\n        else {\n            target[prop] = expectProps[prop];\n        }\n    }\n};\nconst processPropKey = (prop) => {\n    if (prop === 'htmlFor') {\n        return 'for';\n    }\n    return prop;\n};\nconst processPropValue = (prop, value) => {\n    if (prop === 'class') {\n        return serializeClass(value);\n    }\n    if (prop === 'style') {\n        return stringifyStyle(value);\n    }\n    if (isAriaAttribute(prop) || prop === 'draggable' || prop === 'spellcheck') {\n        return value != null ? String(value) : value;\n    }\n    if (value === false || value == null) {\n        return null;\n    }\n    if (value === true) {\n        return '';\n    }\n    return String(value);\n};\nconst invisibleElements = {\n    head: true,\n    style: true,\n    script: true,\n    link: true,\n    meta: true,\n};\nconst textOnlyElements = {\n    title: true,\n    style: true,\n    script: true,\n    noframes: true,\n    textarea: true,\n};\nconst emptyElements = {\n    area: true,\n    base: true,\n    basefont: true,\n    bgsound: true,\n    br: true,\n    col: true,\n    embed: true,\n    frame: true,\n    hr: true,\n    img: true,\n    input: true,\n    keygen: true,\n    link: true,\n    meta: true,\n    param: true,\n    source: true,\n    track: true,\n    wbr: true,\n};\nconst startPhasingContent = {\n    p: true,\n    pre: true,\n};\nconst htmlContent = {\n    head: true,\n    body: true,\n};\nconst tableContent = {\n    tbody: true,\n    thead: true,\n    tfoot: true,\n    caption: true,\n    colgroup: true,\n};\nconst headContent = {\n    meta: true,\n    title: true,\n    link: true,\n    style: true,\n    script: true,\n    noscript: true,\n    template: true,\n    base: true,\n};\nconst phasingContent = {\n    a: true,\n    abbr: true,\n    area: true,\n    audio: true,\n    b: true,\n    bdi: true,\n    bdo: true,\n    br: true,\n    button: true,\n    canvas: true,\n    cite: true,\n    code: true,\n    command: true,\n    data: true,\n    datalist: true,\n    del: true,\n    dfn: true,\n    em: true,\n    embed: true,\n    i: true,\n    iframe: true,\n    img: true,\n    input: true,\n    ins: true,\n    itemprop: true,\n    kbd: true,\n    keygen: true,\n    label: true,\n    link: true,\n    map: true,\n    mark: true,\n    math: true,\n    meta: true,\n    meter: true,\n    noscript: true,\n    object: true,\n    option: true,\n    output: true,\n    picture: true,\n    progress: true,\n    q: true,\n    ruby: true,\n    s: true,\n    samp: true,\n    script: true,\n    select: true,\n    slot: true,\n    small: true,\n    span: true,\n    strong: true,\n    sub: true,\n    sup: true,\n    svg: true,\n    template: true,\n    textarea: true,\n    time: true,\n    u: true,\n    var: true,\n    video: true,\n    wbr: true,\n};\nconst ESCAPE_HTML = /[&<>]/g;\nconst ESCAPE_ATTRIBUTES = /[&\"]/g;\nexport const registerQwikEvent = (prop, containerState) => {\n    containerState.$events$.add(getEventName(prop));\n};\nconst escapeHtml = (s) => {\n    return s.replace(ESCAPE_HTML, (c) => {\n        switch (c) {\n            case '&':\n                return '&amp;';\n            case '<':\n                return '&lt;';\n            case '>':\n                return '&gt;';\n            default:\n                return '';\n        }\n    });\n};\nconst escapeAttr = (s) => {\n    return s.replace(ESCAPE_ATTRIBUTES, (c) => {\n        switch (c) {\n            case '&':\n                return '&amp;';\n            case '\"':\n                return '&quot;';\n            default:\n                return '';\n        }\n    });\n};\n// https://html.spec.whatwg.org/multipage/syntax.html#attributes-2\nconst unsafeAttrCharRE = /[>/=\"'\\u0009\\u000a\\u000c\\u0020]/; // eslint-disable-line no-control-regex\nexport const isSSRUnsafeAttr = (name) => {\n    return unsafeAttrCharRE.test(name);\n};\nconst listenersNeedId = (listeners) => {\n    return listeners.some((l) => l[1].$captureRef$ && l[1].$captureRef$.length > 0);\n};\nconst addDynamicSlot = (hostCtx, elCtx) => {\n    const dynamicSlots = (hostCtx.$dynamicSlots$ || (hostCtx.$dynamicSlots$ = []));\n    if (!dynamicSlots.includes(elCtx)) {\n        dynamicSlots.push(elCtx);\n    }\n};\nconst normalizeInvisibleEvents = (eventName) => {\n    return eventName === 'on:qvisible' ? 'on-document:qinit' : eventName;\n};\n//# sourceMappingURL=data:application/json;base64,","import { qDev, qRuntimeQrl, seal } from '../../util/qdev';\nimport { logError, logOnceWarn, logWarn } from '../../util/log';\nimport { isArray, isFunction, isObject, isString } from '../../util/types';\nimport { isQrl } from '../../qrl/qrl-class';\nimport { invoke, untrack } from '../../use/use-core';\nimport { verifySerializable } from '../../state/common';\nimport { isQwikComponent } from '../../component/component.public';\nimport { isSignal } from '../../state/signal';\nimport { isPromise } from '../../util/promises';\nimport { SkipRender } from './utils.public';\nimport { EMPTY_OBJ } from '../../util/flyweight';\nimport { _IMMUTABLE } from '../../internal';\nimport { isBrowser } from '@builder.io/qwik/build';\nimport { assertString } from '../../error/assert';\nimport { static_subtree } from '../execute-component';\nimport { ELEMENT_ID, OnRenderProp, QScopedStyle, QSlot, QSlotS } from '../../util/markers';\n/**\n * @internal\n *\n * Create a JSXNode for a string tag\n */\nexport const _jsxQ = (type, mutableProps, immutableProps, children, flags, key, dev) => {\n    assertString(type, 'jsx type must be a string');\n    const processed = key == null ? null : String(key);\n    const node = new JSXNodeImpl(type, mutableProps || EMPTY_OBJ, immutableProps, children, flags, processed);\n    if (qDev && dev) {\n        node.dev = {\n            stack: new Error().stack,\n            ...dev,\n        };\n    }\n    validateJSXNode(node);\n    seal(node);\n    return node;\n};\n/**\n * @internal\n *\n * Create a JSXNode for a string tag, with the children extracted from the mutableProps\n */\nexport const _jsxS = (type, mutableProps, immutableProps, flags, key, dev) => {\n    let children = null;\n    if (mutableProps && 'children' in mutableProps) {\n        children = mutableProps.children;\n        delete mutableProps.children;\n    }\n    return _jsxQ(type, mutableProps, immutableProps, children, flags, key, dev);\n};\n/**\n * @internal\n *\n * Create a JSXNode for any tag, with possibly immutable props embedded in props\n */\nexport const _jsxC = (type, mutableProps, flags, key, dev) => {\n    const processed = key == null ? null : String(key);\n    const props = mutableProps ?? EMPTY_OBJ;\n    // In dynamic components, type could be a string\n    if (typeof type === 'string' && _IMMUTABLE in props) {\n        const p = {};\n        // The immutable props are all regular props minus the children\n        for (const [k, v] of Object.entries(props[_IMMUTABLE])) {\n            p[k] = v === _IMMUTABLE ? props[k] : v;\n        }\n        return _jsxQ(type, null, p, props.children, flags, key, dev);\n    }\n    const node = new JSXNodeImpl(type, props, null, props.children, flags, processed);\n    if (typeof type === 'string' && mutableProps) {\n        delete mutableProps.children;\n    }\n    if (qDev && dev) {\n        node.dev = {\n            stack: new Error().stack,\n            ...dev,\n        };\n    }\n    validateJSXNode(node);\n    seal(node);\n    return node;\n};\n/** @public */\nexport const jsx = (type, props, key) => {\n    const processed = key == null ? null : String(key);\n    const children = untrack(() => {\n        const c = props.children;\n        if (typeof type === 'string') {\n            delete props.children;\n        }\n        return c;\n    });\n    if (isString(type)) {\n        if ('className' in props) {\n            props.class = props.className;\n            delete props.className;\n            if (qDev) {\n                logOnceWarn('jsx: `className` is deprecated. Use `class` instead.');\n            }\n        }\n    }\n    const node = new JSXNodeImpl(type, props, null, children, 0, processed);\n    validateJSXNode(node);\n    seal(node);\n    return node;\n};\nexport const SKIP_RENDER_TYPE = ':skipRender';\nexport class JSXNodeImpl {\n    constructor(type, props, immutableProps, children, flags, key = null) {\n        this.type = type;\n        this.props = props;\n        this.immutableProps = immutableProps;\n        this.children = children;\n        this.flags = flags;\n        this.key = key;\n    }\n}\n/** @public */\nexport const Virtual = (props) => props.children;\n/** @public */\nexport const RenderOnce = (props, key) => {\n    return new JSXNodeImpl(Virtual, EMPTY_OBJ, null, props.children, static_subtree, key);\n};\nconst validateJSXNode = (node) => {\n    if (qDev) {\n        const { type, props, immutableProps, children } = node;\n        invoke(undefined, () => {\n            const isQwikC = isQwikComponent(type);\n            if (!isString(type) && !isFunction(type)) {\n                throw new Error(`The <Type> of the JSX element must be either a string or a function. Instead, it's a \"${typeof type}\": ${String(type)}.`);\n            }\n            if (children) {\n                const flatChildren = isArray(children) ? children.flat() : [children];\n                if (isString(type) || isQwikC) {\n                    flatChildren.forEach((child) => {\n                        if (!isValidJSXChild(child)) {\n                            const typeObj = typeof child;\n                            let explanation = '';\n                            if (typeObj === 'object') {\n                                if (child?.constructor) {\n                                    explanation = `it's an instance of \"${child?.constructor.name}\".`;\n                                }\n                                else {\n                                    explanation = `it's a object literal: ${printObjectLiteral(child)} `;\n                                }\n                            }\n                            else if (typeObj === 'function') {\n                                explanation += `it's a function named \"${child.name}\".`;\n                            }\n                            else {\n                                explanation = `it's a \"${typeObj}\": ${String(child)}.`;\n                            }\n                            throw new Error(`One of the children of <${type}> is not an accepted value. JSX children must be either: string, boolean, number, <element>, Array, undefined/null, or a Promise/Signal. Instead, ${explanation}\\n`);\n                        }\n                    });\n                }\n                if (isBrowser) {\n                    if (isFunction(type) || immutableProps) {\n                        const keys = {};\n                        flatChildren.forEach((child) => {\n                            if (isJSXNode(child) && child.key != null) {\n                                const key = String(child.type) + ':' + child.key;\n                                if (keys[key]) {\n                                    const err = createJSXError(`Multiple JSX sibling nodes with the same key.\\nThis is likely caused by missing a custom key in a for loop`, child);\n                                    if (err) {\n                                        if (isString(child.type)) {\n                                            logOnceWarn(err);\n                                        }\n                                        else {\n                                            logOnceWarn(err);\n                                        }\n                                    }\n                                }\n                                else {\n                                    keys[key] = true;\n                                }\n                            }\n                        });\n                    }\n                }\n            }\n            const allProps = [\n                ...Object.entries(props),\n                ...(immutableProps ? Object.entries(immutableProps) : []),\n            ];\n            if (!qRuntimeQrl) {\n                for (const [prop, value] of allProps) {\n                    if (prop.endsWith('$') && value) {\n                        if (!isQrl(value) && !Array.isArray(value)) {\n                            throw new Error(`The value passed in ${prop}={...}> must be a QRL, instead you passed a \"${typeof value}\". Make sure your ${typeof value} is wrapped with $(...), so it can be serialized. Like this:\\n$(${String(value)})`);\n                        }\n                    }\n                    if (prop !== 'children' && isQwikC && value) {\n                        verifySerializable(value, `The value of the JSX attribute \"${prop}\" can not be serialized`);\n                    }\n                }\n            }\n            if (isString(type)) {\n                const hasSetInnerHTML = allProps.some((a) => a[0] === 'dangerouslySetInnerHTML');\n                if (hasSetInnerHTML && children) {\n                    const err = createJSXError(`The JSX element <${type}> can not have both 'dangerouslySetInnerHTML' and children.`, node);\n                    logError(err);\n                }\n                if (allProps.some((a) => a[0] === 'children')) {\n                    throw new Error(`The JSX element <${type}> can not have both 'children' as a property.`);\n                }\n                if (type === 'style') {\n                    if (children) {\n                        logOnceWarn(`jsx: Using <style>{content}</style> will escape the content, effectively breaking the CSS.\nIn order to disable content escaping use '<style dangerouslySetInnerHTML={content}/>'\n\nHowever, if the use case is to inject component styleContent, use 'useStyles$()' instead, it will be a lot more efficient.\nSee https://qwik.builder.io/docs/components/styles/#usestyles for more information.`);\n                    }\n                }\n                if (type === 'script') {\n                    if (children) {\n                        logOnceWarn(`jsx: Using <script>{content}</script> will escape the content, effectively breaking the inlined JS.\nIn order to disable content escaping use '<script dangerouslySetInnerHTML={content}/>'`);\n                    }\n                }\n            }\n        });\n    }\n};\nconst printObjectLiteral = (obj) => {\n    return `{ ${Object.keys(obj)\n        .map((key) => `\"${key}\"`)\n        .join(', ')} }`;\n};\nexport const isJSXNode = (n) => {\n    if (qDev) {\n        if (n instanceof JSXNodeImpl) {\n            return true;\n        }\n        if (isObject(n) && 'key' in n && 'props' in n && 'type' in n) {\n            logWarn(`Duplicate implementations of \"JSXNode\" found`);\n            return true;\n        }\n        return false;\n    }\n    else {\n        return n instanceof JSXNodeImpl;\n    }\n};\nexport const isValidJSXChild = (node) => {\n    if (!node) {\n        return true;\n    }\n    else if (node === SkipRender) {\n        return true;\n    }\n    else if (isString(node) || typeof node === 'number' || typeof node === 'boolean') {\n        return true;\n    }\n    else if (isJSXNode(node)) {\n        return true;\n    }\n    else if (isArray(node)) {\n        return node.every(isValidJSXChild);\n    }\n    if (isSignal(node)) {\n        return isValidJSXChild(node.value);\n    }\n    else if (isPromise(node)) {\n        return true;\n    }\n    return false;\n};\n/** @public */\nexport const Fragment = (props) => props.children;\n/** @public */\nexport const HTMLFragment = (props) => jsx(Virtual, props);\n/** @public */\nexport const jsxDEV = (type, props, key, _isStatic, opts, _ctx) => {\n    const processed = key == null ? null : String(key);\n    const children = untrack(() => {\n        const c = props.children;\n        if (typeof type === 'string') {\n            delete props.children;\n        }\n        return c;\n    });\n    if (isString(type)) {\n        if ('className' in props) {\n            props.class = props.className;\n            delete props.className;\n            if (qDev) {\n                logOnceWarn('jsx: `className` is deprecated. Use `class` instead.');\n            }\n        }\n    }\n    const node = new JSXNodeImpl(type, props, null, children, 0, processed);\n    node.dev = {\n        stack: new Error().stack,\n        ...opts,\n    };\n    validateJSXNode(node);\n    seal(node);\n    return node;\n};\nexport const createJSXError = (message, node) => {\n    const error = new Error(message);\n    if (!node.dev) {\n        return error;\n    }\n    error.stack = `JSXError: ${message}\\n${filterStack(node.dev.stack, 1)}`;\n    return error;\n};\nconst filterStack = (stack, offset = 0) => {\n    return stack.split('\\n').slice(offset).join('\\n');\n};\nexport { jsx as jsxs };\n//# sourceMappingURL=data:application/json;base64,","import { jsx, _jsxQ, _jsxC, RenderOnce } from '../jsx/jsx-runtime';\n/** @public */\nexport const SkipRender = Symbol('skip render');\n/** @public */\nexport const SSRRaw = (() => null);\n/** @public */\nexport const SSRComment = (props) => jsx(SSRRaw, { data: `<!--${props.data}-->` }, null);\n/** @public */\nexport const SSRStreamBlock = (props) => {\n    return [\n        jsx(SSRComment, { data: 'qkssr-pu' }),\n        props.children,\n        jsx(SSRComment, { data: 'qkssr-po' }),\n    ];\n};\n/** @public */\nexport const SSRStream = (props, key) => jsx(RenderOnce, { children: jsx(InternalSSRStream, props) }, key);\n/**\n * @deprecated - It has no effect\n * @public\n */\nexport const SSRHint = (() => null);\nexport const InternalSSRStream = () => null;\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidXRpbHMucHVibGljLmpzIiwic291cmNlUm9vdCI6Ii4vIiwic291cmNlcyI6WyJwYWNrYWdlcy9xd2lrL3NyYy9jb3JlL3JlbmRlci9qc3gvdXRpbHMucHVibGljLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxHQUFHLEVBQUUsS0FBSyxFQUFFLEtBQUssRUFBRSxVQUFVLEVBQUUsTUFBTSxvQkFBb0IsQ0FBQztBQUtuRSxjQUFjO0FBQ2QsTUFBTSxDQUFDLE1BQU0sVUFBVSxHQUFZLE1BQU0sQ0FBQyxhQUFhLENBQVEsQ0FBQztBQUVoRSxjQUFjO0FBQ2QsTUFBTSxDQUFDLE1BQU0sTUFBTSxHQUF3QyxDQUFDLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBUSxDQUFDO0FBRS9FLGNBQWM7QUFDZCxNQUFNLENBQUMsTUFBTSxVQUFVLEdBQXdDLENBQUMsS0FBSyxFQUFFLEVBQUUsQ0FDdkUsR0FBRyxDQUFDLE1BQU0sRUFBRSxFQUFFLElBQUksRUFBRSxPQUFPLEtBQUssQ0FBQyxJQUFJLEtBQUssRUFBRSxFQUFFLElBQUksQ0FBUSxDQUFDO0FBRTdELGNBQWM7QUFDZCxNQUFNLENBQUMsTUFBTSxjQUFjLEdBQTBDLENBQUMsS0FBSyxFQUFFLEVBQUU7SUFDN0UsT0FBTztRQUNMLEdBQUcsQ0FBQyxVQUFVLEVBQUUsRUFBRSxJQUFJLEVBQUUsVUFBVSxFQUFFLENBQUM7UUFDckMsS0FBSyxDQUFDLFFBQVE7UUFDZCxHQUFHLENBQUMsVUFBVSxFQUFFLEVBQUUsSUFBSSxFQUFFLFVBQVUsRUFBRSxDQUFDO0tBQy9CLENBQUM7QUFDWCxDQUFDLENBQUM7QUFVRixjQUFjO0FBQ2QsTUFBTSxDQUFDLE1BQU0sU0FBUyxHQUFzQyxDQUFDLEtBQUssRUFBRSxHQUFHLEVBQUUsRUFBRSxDQUN6RSxHQUFHLENBQUMsVUFBVSxFQUFFLEVBQUUsUUFBUSxFQUFFLEdBQUcsQ0FBQyxpQkFBaUIsRUFBRSxLQUFLLENBQUMsRUFBRSxFQUFFLEdBQUcsQ0FBQyxDQUFDO0FBT3BFOzs7R0FHRztBQUNILE1BQU0sQ0FBQyxNQUFNLE9BQU8sR0FBb0MsQ0FBQyxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQVEsQ0FBQztBQUU1RSxNQUFNLENBQUMsTUFBTSxpQkFBaUIsR0FBc0MsR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsganN4LCBfanN4USwgX2pzeEMsIFJlbmRlck9uY2UgfSBmcm9tICcuLi9qc3gvanN4LXJ1bnRpbWUnO1xuaW1wb3J0IHR5cGUgeyBTdHJlYW1Xcml0ZXIgfSBmcm9tICcuLi9zc3IvcmVuZGVyLXNzcic7XG5pbXBvcnQgdHlwZSB7IEZ1bmN0aW9uQ29tcG9uZW50LCBKU1hOb2RlIH0gZnJvbSAnLi90eXBlcy9qc3gtbm9kZSc7XG5pbXBvcnQgdHlwZSB7IEpTWENoaWxkcmVuIH0gZnJvbSAnLi90eXBlcy9qc3gtcXdpay1hdHRyaWJ1dGVzJztcblxuLyoqIEBwdWJsaWMgKi9cbmV4cG9ydCBjb25zdCBTa2lwUmVuZGVyOiBKU1hOb2RlID0gU3ltYm9sKCdza2lwIHJlbmRlcicpIGFzIGFueTtcblxuLyoqIEBwdWJsaWMgKi9cbmV4cG9ydCBjb25zdCBTU1JSYXc6IEZ1bmN0aW9uQ29tcG9uZW50PHsgZGF0YTogc3RyaW5nIH0+ID0gKCgpID0+IG51bGwpIGFzIGFueTtcblxuLyoqIEBwdWJsaWMgKi9cbmV4cG9ydCBjb25zdCBTU1JDb21tZW50OiBGdW5jdGlvbkNvbXBvbmVudDx7IGRhdGE6IHN0cmluZyB9PiA9IChwcm9wcykgPT5cbiAganN4KFNTUlJhdywgeyBkYXRhOiBgPCEtLSR7cHJvcHMuZGF0YX0tLT5gIH0sIG51bGwpIGFzIGFueTtcblxuLyoqIEBwdWJsaWMgKi9cbmV4cG9ydCBjb25zdCBTU1JTdHJlYW1CbG9jazogRnVuY3Rpb25Db21wb25lbnQ8eyBjaGlsZHJlbj86IGFueSB9PiA9IChwcm9wcykgPT4ge1xuICByZXR1cm4gW1xuICAgIGpzeChTU1JDb21tZW50LCB7IGRhdGE6ICdxa3Nzci1wdScgfSksXG4gICAgcHJvcHMuY2hpbGRyZW4sXG4gICAganN4KFNTUkNvbW1lbnQsIHsgZGF0YTogJ3Frc3NyLXBvJyB9KSxcbiAgXSBhcyBhbnk7XG59O1xuXG4vKiogQHB1YmxpYyAqL1xuZXhwb3J0IHR5cGUgU1NSU3RyZWFtUHJvcHMgPSB7XG4gIGNoaWxkcmVuOlxuICAgIHwgQXN5bmNHZW5lcmF0b3I8SlNYQ2hpbGRyZW4sIHZvaWQsIGFueT5cbiAgICB8ICgoc3RyZWFtOiBTdHJlYW1Xcml0ZXIpID0+IFByb21pc2U8dm9pZD4pXG4gICAgfCAoKCkgPT4gQXN5bmNHZW5lcmF0b3I8SlNYQ2hpbGRyZW4sIHZvaWQsIGFueT4pO1xufTtcblxuLyoqIEBwdWJsaWMgKi9cbmV4cG9ydCBjb25zdCBTU1JTdHJlYW06IEZ1bmN0aW9uQ29tcG9uZW50PFNTUlN0cmVhbVByb3BzPiA9IChwcm9wcywga2V5KSA9PlxuICBqc3goUmVuZGVyT25jZSwgeyBjaGlsZHJlbjoganN4KEludGVybmFsU1NSU3RyZWFtLCBwcm9wcykgfSwga2V5KTtcblxuLyoqIEBwdWJsaWMgKi9cbmV4cG9ydCB0eXBlIFNTUkhpbnRQcm9wcyA9IHtcbiAgZHluYW1pYz86IGJvb2xlYW47XG59O1xuXG4vKipcbiAqIEBkZXByZWNhdGVkIC0gSXQgaGFzIG5vIGVmZmVjdFxuICogQHB1YmxpY1xuICovXG5leHBvcnQgY29uc3QgU1NSSGludDogRnVuY3Rpb25Db21wb25lbnQ8U1NSSGludFByb3BzPiA9ICgoKSA9PiBudWxsKSBhcyBhbnk7XG5cbmV4cG9ydCBjb25zdCBJbnRlcm5hbFNTUlN0cmVhbTogRnVuY3Rpb25Db21wb25lbnQ8U1NSU3RyZWFtUHJvcHM+ID0gKCkgPT4gbnVsbDtcbiJdfQ==","import { qError, QError_invalidJsxNodeType } from '../../error/error';\nimport { newInvokeContext, invoke } from '../../use/use-core';\nimport { EMPTY_ARRAY, EMPTY_OBJ } from '../../util/flyweight';\nimport { logWarn } from '../../util/log';\nimport { isNotNullable, isPromise, promiseAll, maybeThen } from '../../util/promises';\nimport { qDev, qInspector, seal } from '../../util/qdev';\nimport { isArray, isFunction, isObject, isString } from '../../util/types';\nimport { domToVnode, smartUpdateChildren } from './visitor';\nimport { SkipRender } from '../jsx/utils.public';\nimport { isJSXNode, SKIP_RENDER_TYPE, _jsxC, Virtual } from '../jsx/jsx-runtime';\nimport { executeComponent, shouldWrapFunctional } from '../execute-component';\nimport { VIRTUAL } from './virtual-element';\nimport { appendHeadStyle } from './operations';\nimport { isSignal } from '../../state/signal';\nimport { HOST_FLAG_MOUNTED } from '../../state/context';\nexport const renderComponent = (rCtx, elCtx, flags) => {\n    const justMounted = !(elCtx.$flags$ & HOST_FLAG_MOUNTED);\n    const hostElement = elCtx.$element$;\n    const containerState = rCtx.$static$.$containerState$;\n    // Component is not dirty any more\n    containerState.$hostsStaging$.delete(elCtx);\n    // Clean current subscription before render\n    containerState.$subsManager$.$clearSub$(hostElement);\n    // TODO, serialize scopeIds\n    return maybeThen(executeComponent(rCtx, elCtx), (res) => {\n        const staticCtx = rCtx.$static$;\n        const newCtx = res.rCtx;\n        const iCtx = newInvokeContext(rCtx.$static$.$locale$, hostElement);\n        staticCtx.$hostElements$.add(hostElement);\n        iCtx.$subscriber$ = [0, hostElement];\n        iCtx.$renderCtx$ = newCtx;\n        if (justMounted) {\n            if (elCtx.$appendStyles$) {\n                for (const style of elCtx.$appendStyles$) {\n                    appendHeadStyle(staticCtx, style);\n                }\n            }\n        }\n        const processedJSXNode = processData(res.node, iCtx);\n        return maybeThen(processedJSXNode, (processedJSXNode) => {\n            const newVdom = wrapJSX(hostElement, processedJSXNode);\n            // const oldVdom = getVdom(hostElement);\n            const oldVdom = getVdom(elCtx);\n            return maybeThen(smartUpdateChildren(newCtx, oldVdom, newVdom, flags), () => {\n                // setVdom(hostElement, newVdom);\n                elCtx.$vdom$ = newVdom;\n            });\n        });\n    });\n};\nexport const getVdom = (elCtx) => {\n    if (!elCtx.$vdom$) {\n        elCtx.$vdom$ = domToVnode(elCtx.$element$);\n    }\n    return elCtx.$vdom$;\n};\nexport class ProcessedJSXNodeImpl {\n    constructor($type$, $props$, $immutableProps$, $children$, $flags$, $key$) {\n        this.$type$ = $type$;\n        this.$props$ = $props$;\n        this.$immutableProps$ = $immutableProps$;\n        this.$children$ = $children$;\n        this.$flags$ = $flags$;\n        this.$key$ = $key$;\n        this.$elm$ = null;\n        this.$text$ = '';\n        this.$signal$ = null;\n        this.$id$ = $type$ + ($key$ ? ':' + $key$ : '');\n        if (qDev && qInspector) {\n            this.$dev$ = undefined;\n        }\n        seal(this);\n    }\n}\nexport const processNode = (node, invocationContext) => {\n    const { key, type, props, children, flags, immutableProps } = node;\n    let textType = '';\n    if (isString(type)) {\n        textType = type;\n    }\n    else if (type === Virtual) {\n        textType = VIRTUAL;\n    }\n    else if (isFunction(type)) {\n        const res = invoke(invocationContext, type, props, key, flags, node.dev);\n        if (!shouldWrapFunctional(res, node)) {\n            return processData(res, invocationContext);\n        }\n        return processNode(_jsxC(Virtual, { children: res }, 0, key), invocationContext);\n    }\n    else {\n        throw qError(QError_invalidJsxNodeType, type);\n    }\n    let convertedChildren = EMPTY_ARRAY;\n    if (children != null) {\n        return maybeThen(processData(children, invocationContext), (result) => {\n            if (result !== undefined) {\n                convertedChildren = isArray(result) ? result : [result];\n            }\n            const vnode = new ProcessedJSXNodeImpl(textType, props, immutableProps, convertedChildren, flags, key);\n            if (qDev && qInspector) {\n                vnode.$dev$ = node.dev;\n            }\n            return vnode;\n        });\n    }\n    else {\n        const vnode = new ProcessedJSXNodeImpl(textType, props, immutableProps, convertedChildren, flags, key);\n        if (qDev && qInspector) {\n            vnode.$dev$ = node.dev;\n        }\n        return vnode;\n    }\n};\nexport const wrapJSX = (element, input) => {\n    const children = input === undefined ? EMPTY_ARRAY : isArray(input) ? input : [input];\n    const node = new ProcessedJSXNodeImpl(':virtual', {}, null, children, 0, null);\n    node.$elm$ = element;\n    return node;\n};\nexport const processData = (node, invocationContext) => {\n    if (node == null || typeof node === 'boolean') {\n        return undefined;\n    }\n    if (isPrimitive(node)) {\n        const newNode = new ProcessedJSXNodeImpl('#text', EMPTY_OBJ, null, EMPTY_ARRAY, 0, null);\n        newNode.$text$ = String(node);\n        return newNode;\n    }\n    else if (isJSXNode(node)) {\n        return processNode(node, invocationContext);\n    }\n    else if (isSignal(node)) {\n        const newNode = new ProcessedJSXNodeImpl('#signal', EMPTY_OBJ, null, EMPTY_ARRAY, 0, null);\n        newNode.$signal$ = node;\n        return newNode;\n    }\n    else if (isArray(node)) {\n        // PERF(misko): possible place to make it faster by not creating promises unnecessarily\n        const output = promiseAll(node.flatMap((n) => processData(n, invocationContext)));\n        return maybeThen(output, (array) => array.flat(100).filter(isNotNullable));\n    }\n    else if (isPromise(node)) {\n        return node.then((node) => processData(node, invocationContext));\n    }\n    else if (node === SkipRender) {\n        return new ProcessedJSXNodeImpl(SKIP_RENDER_TYPE, EMPTY_OBJ, null, EMPTY_ARRAY, 0, null);\n    }\n    else {\n        logWarn('A unsupported value was passed to the JSX, skipping render. Value:', node);\n        return undefined;\n    }\n};\nexport const isProcessedJSXNode = (n) => {\n    if (qDev) {\n        if (n instanceof ProcessedJSXNodeImpl) {\n            return true;\n        }\n        if (isObject(n) && n.constructor.name === ProcessedJSXNodeImpl.name) {\n            throw new Error(`Duplicate implementations of \"ProcessedJSXNodeImpl\" found`);\n        }\n        return false;\n    }\n    else {\n        return n instanceof ProcessedJSXNodeImpl;\n    }\n};\nexport const isPrimitive = (obj) => {\n    return isString(obj) || typeof obj === 'number';\n};\n//# sourceMappingURL=data:application/json;base64,","import { assertDefined, assertTrue } from '../error/assert';\nimport { getDocument } from '../util/dom';\nimport { isComment, isElement, isNode, isQwikElement, isText } from '../util/element';\nimport { logDebug, logWarn } from '../util/log';\nimport { ELEMENT_ID, QContainerAttr } from '../util/markers';\nimport { emitEvent } from '../util/event';\nimport { isArray, isSerializableObject, isString } from '../util/types';\nimport { directGetAttribute, directSetAttribute } from '../render/fast-calls';\nimport { createParser, OBJECT_TRANSFORMS, UNDEFINED_PREFIX } from './serializers';\nimport { _getContainerState, isContainer, SHOW_COMMENT, strToInt, } from './container';\nimport { getVirtualElement } from '../render/dom/virtual-element';\nimport { getSubscriptionManager, parseSubscription } from '../state/common';\nimport { createProxy, setObjectFlags } from '../state/store';\nimport { qDev, qSerialize } from '../util/qdev';\nimport { pauseContainer } from './pause';\nimport { isPrimitive } from '../render/dom/render-dom';\nimport { getWrappingContainer } from '../use/use-core';\nimport { getContext } from '../state/context';\nimport { EMPTY_ARRAY } from '../util/flyweight';\nexport const resumeIfNeeded = (containerEl) => {\n    const isResumed = directGetAttribute(containerEl, QContainerAttr);\n    if (isResumed === 'paused') {\n        resumeContainer(containerEl);\n        if (qSerialize) {\n            appendQwikDevTools(containerEl);\n        }\n    }\n};\nexport const getPauseState = (containerEl) => {\n    const doc = getDocument(containerEl);\n    const isDocElement = containerEl === doc.documentElement;\n    const parentJSON = isDocElement ? doc.body : containerEl;\n    const script = getQwikJSON(parentJSON, 'type');\n    if (script) {\n        const data = script.firstChild.data;\n        return JSON.parse(unescapeText(data) || '{}');\n    }\n};\n/** @internal */\nexport const _deserializeData = (data, element) => {\n    const obj = JSON.parse(data);\n    if (typeof obj !== 'object') {\n        return null;\n    }\n    const { _objs, _entry } = obj;\n    if (typeof _objs === 'undefined' || typeof _entry === 'undefined') {\n        return null;\n    }\n    let doc = {};\n    let containerState = {};\n    if (isNode(element) && isQwikElement(element)) {\n        const containerEl = getWrappingContainer(element);\n        if (containerEl) {\n            containerState = _getContainerState(containerEl);\n            doc = containerEl.ownerDocument;\n        }\n    }\n    const parser = createParser(containerState, doc);\n    for (let i = 0; i < _objs.length; i++) {\n        const value = _objs[i];\n        if (isString(value)) {\n            _objs[i] = value === UNDEFINED_PREFIX ? undefined : parser.prepare(value);\n        }\n    }\n    const getObject = (id) => _objs[strToInt(id)];\n    for (const obj of _objs) {\n        reviveNestedObjects(obj, getObject, parser);\n    }\n    return getObject(_entry);\n};\nexport const resumeContainer = (containerEl) => {\n    if (!isContainer(containerEl)) {\n        logWarn('Skipping resuming because parent element is not q:container');\n        return;\n    }\n    const pauseState = containerEl['_qwikjson_'] ?? getPauseState(containerEl);\n    containerEl['_qwikjson_'] = null;\n    if (!pauseState) {\n        logWarn('Skipping resuming qwik/json metadata was not found.');\n        return;\n    }\n    const doc = getDocument(containerEl);\n    const isDocElement = containerEl === doc.documentElement;\n    const parentJSON = isDocElement ? doc.body : containerEl;\n    if (qDev) {\n        const script = getQwikJSON(parentJSON, 'type');\n        if (!script) {\n            logWarn('Skipping resuming qwik/json metadata was not found.');\n            return;\n        }\n    }\n    const inlinedFunctions = getQwikInlinedFuncs(parentJSON);\n    const containerState = _getContainerState(containerEl);\n    // Collect all elements\n    const elements = new Map();\n    const text = new Map();\n    let node = null;\n    let container = 0;\n    // Collect all virtual elements\n    const elementWalker = doc.createTreeWalker(containerEl, SHOW_COMMENT);\n    while ((node = elementWalker.nextNode())) {\n        const data = node.data;\n        if (container === 0) {\n            if (data.startsWith('qv ')) {\n                const id = getID(data); // TODO: remove\n                if (id >= 0) {\n                    elements.set(id, node);\n                }\n            }\n            else if (data.startsWith('t=')) {\n                const id = data.slice(2);\n                const index = strToInt(id);\n                const textNode = getTextNode(node);\n                elements.set(index, textNode);\n                text.set(index, textNode.data);\n            }\n        }\n        if (data === 'cq') {\n            container++;\n        }\n        else if (data === '/cq') {\n            container--;\n        }\n    }\n    // Collect all elements\n    // If there are nested container, we are forced to take a slower path.\n    // In order to check if there are nested containers, we use the `'qc📦'` class.\n    // This is because checking for class is the fastest way for the browser to find it.\n    const slotPath = containerEl.getElementsByClassName('qc📦').length !== 0;\n    containerEl.querySelectorAll('[q\\\\:id]').forEach((el) => {\n        if (slotPath && el.closest('[q\\\\:container]') !== containerEl) {\n            return;\n        }\n        const id = directGetAttribute(el, ELEMENT_ID);\n        assertDefined(id, `resume: element missed q:id`, el);\n        const index = strToInt(id);\n        elements.set(index, el);\n    });\n    const parser = createParser(containerState, doc);\n    const finalized = new Map();\n    const revived = new Set();\n    const getObject = (id) => {\n        assertTrue(typeof id === 'string' && id.length > 0, 'resume: id must be an non-empty string, got:', id);\n        if (finalized.has(id)) {\n            return finalized.get(id);\n        }\n        return computeObject(id);\n    };\n    const computeObject = (id) => {\n        // Handle elements\n        if (id.startsWith('#')) {\n            const elementId = id.slice(1);\n            const index = strToInt(elementId);\n            assertTrue(elements.has(index), `missing element for id:`, elementId);\n            const rawElement = elements.get(index);\n            assertDefined(rawElement, `missing element for id:`, elementId);\n            if (isComment(rawElement)) {\n                if (!rawElement.isConnected) {\n                    finalized.set(id, undefined);\n                    return undefined;\n                }\n                const virtual = getVirtualElement(rawElement);\n                finalized.set(id, virtual);\n                getContext(virtual, containerState);\n                return virtual;\n            }\n            else if (isElement(rawElement)) {\n                finalized.set(id, rawElement);\n                getContext(rawElement, containerState);\n                return rawElement;\n            }\n            finalized.set(id, rawElement);\n            return rawElement;\n        }\n        else if (id.startsWith('@')) {\n            const funcId = id.slice(1);\n            const index = strToInt(funcId);\n            const func = inlinedFunctions[index];\n            assertDefined(func, `missing inlined function for id:`, funcId);\n            return func;\n        }\n        else if (id.startsWith('*')) {\n            const elementId = id.slice(1);\n            const index = strToInt(elementId);\n            assertTrue(elements.has(index), `missing element for id:`, elementId);\n            const str = text.get(index);\n            assertDefined(str, `missing element for id:`, elementId);\n            finalized.set(id, str);\n            return str;\n        }\n        const index = strToInt(id);\n        const objs = pauseState.objs;\n        assertTrue(objs.length > index, 'resume: index is out of bounds', id);\n        let value = objs[index];\n        if (isString(value)) {\n            value = value === UNDEFINED_PREFIX ? undefined : parser.prepare(value);\n        }\n        let obj = value;\n        for (let i = id.length - 1; i >= 0; i--) {\n            const code = id[i];\n            const transform = OBJECT_TRANSFORMS[code];\n            if (!transform) {\n                break;\n            }\n            obj = transform(obj, containerState);\n        }\n        finalized.set(id, obj);\n        if (!isPrimitive(value) && !revived.has(index)) {\n            revived.add(index);\n            reviveSubscriptions(value, index, pauseState.subs, getObject, containerState, parser);\n            reviveNestedObjects(value, getObject, parser);\n        }\n        return obj;\n    };\n    containerState.$elementIndex$ = 100000;\n    containerState.$pauseCtx$ = {\n        getObject,\n        meta: pauseState.ctx,\n        refs: pauseState.refs,\n    };\n    directSetAttribute(containerEl, QContainerAttr, 'resumed');\n    logDebug('Container resumed');\n    emitEvent(containerEl, 'qresume', undefined, true);\n};\nconst reviveSubscriptions = (value, i, objsSubs, getObject, containerState, parser) => {\n    const subs = objsSubs[i];\n    if (subs) {\n        const converted = [];\n        let flag = 0;\n        for (const sub of subs) {\n            if (sub.startsWith('_')) {\n                flag = parseInt(sub.slice(1), 10);\n            }\n            else {\n                const parsed = parseSubscription(sub, getObject);\n                if (parsed) {\n                    converted.push(parsed);\n                }\n            }\n        }\n        if (flag > 0) {\n            setObjectFlags(value, flag);\n        }\n        if (!parser.subs(value, converted)) {\n            const proxy = containerState.$proxyMap$.get(value);\n            if (proxy) {\n                getSubscriptionManager(proxy).$addSubs$(converted);\n            }\n            else {\n                createProxy(value, containerState, converted);\n            }\n        }\n    }\n};\nconst reviveNestedObjects = (obj, getObject, parser) => {\n    if (parser.fill(obj, getObject)) {\n        return;\n    }\n    if (obj && typeof obj == 'object') {\n        if (isArray(obj)) {\n            for (let i = 0; i < obj.length; i++) {\n                obj[i] = getObject(obj[i]);\n            }\n        }\n        else if (isSerializableObject(obj)) {\n            for (const key in obj) {\n                obj[key] = getObject(obj[key]);\n            }\n        }\n    }\n};\nconst unescapeText = (str) => {\n    return str.replace(/\\\\x3C(\\/?script)/g, '<$1');\n};\nexport const getQwikInlinedFuncs = (parentElm) => {\n    const elm = getQwikJSON(parentElm, 'q:func');\n    return elm?.qFuncs ?? EMPTY_ARRAY;\n};\nexport const getQwikJSON = (parentElm, attribute) => {\n    let child = parentElm.lastElementChild;\n    while (child) {\n        if (child.tagName === 'SCRIPT' && directGetAttribute(child, attribute) === 'qwik/json') {\n            return child;\n        }\n        child = child.previousElementSibling;\n    }\n    return undefined;\n};\nconst getTextNode = (mark) => {\n    const nextNode = mark.nextSibling;\n    if (isText(nextNode)) {\n        return nextNode;\n    }\n    else {\n        const textNode = mark.ownerDocument.createTextNode('');\n        mark.parentElement.insertBefore(textNode, mark);\n        return textNode;\n    }\n};\nexport const appendQwikDevTools = (containerEl) => {\n    containerEl['qwik'] = {\n        pause: () => pauseContainer(containerEl),\n        state: _getContainerState(containerEl),\n    };\n};\nexport const getID = (stuff) => {\n    const index = stuff.indexOf('q:id=');\n    if (index > 0) {\n        return strToInt(stuff.slice(index + 5));\n    }\n    return -1;\n};\n//# sourceMappingURL=data:application/json;base64,","import { assertDefined } from '../error/assert';\nimport { inflateQrl, parseQRL } from '../qrl/qrl';\nimport { getWrappingContainer, getInvokeContext } from './use-core';\nimport { assertQrl } from '../qrl/qrl-class';\nimport { getContext } from '../state/context';\nimport { resumeIfNeeded } from '../container/resume';\nimport { _getContainerState } from '../container/container';\n// <docs markdown=\"../readme.md#useLexicalScope\">\n// !!DO NOT EDIT THIS COMMENT DIRECTLY!!!\n// (edit ../readme.md#useLexicalScope instead)\n/**\n * Used by the Qwik Optimizer to restore the lexically scoped variables.\n *\n * This method should not be present in the application source code.\n *\n * NOTE: `useLexicalScope` method can only be used in the synchronous portion of the callback\n * (before any `await` statements.)\n *\n * @internal\n */\n// </docs>\nexport const useLexicalScope = () => {\n    const context = getInvokeContext();\n    let qrl = context.$qrl$;\n    if (!qrl) {\n        const el = context.$element$;\n        assertDefined(el, 'invoke: element must be defined inside useLexicalScope()', context);\n        const container = getWrappingContainer(el);\n        assertDefined(container, `invoke: cant find parent q:container of`, el);\n        qrl = parseQRL(decodeURIComponent(String(context.$url$)), container);\n        assertQrl(qrl);\n        resumeIfNeeded(container);\n        const elCtx = getContext(el, _getContainerState(container));\n        inflateQrl(qrl, elCtx);\n    }\n    else {\n        assertQrl(qrl);\n        assertDefined(qrl.$captureRef$, 'invoke: qrl $captureRef$ must be defined inside useLexicalScope()', qrl);\n    }\n    return qrl.$captureRef$;\n};\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidXNlLWxleGljYWwtc2NvcGUucHVibGljLmpzIiwic291cmNlUm9vdCI6Ii4vIiwic291cmNlcyI6WyJwYWNrYWdlcy9xd2lrL3NyYy9jb3JlL3VzZS91c2UtbGV4aWNhbC1zY29wZS5wdWJsaWMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLGFBQWEsRUFBRSxNQUFNLGlCQUFpQixDQUFDO0FBQ2hELE9BQU8sRUFBRSxVQUFVLEVBQUUsUUFBUSxFQUFFLE1BQU0sWUFBWSxDQUFDO0FBQ2xELE9BQU8sRUFBRSxvQkFBb0IsRUFBRSxnQkFBZ0IsRUFBRSxNQUFNLFlBQVksQ0FBQztBQUNwRSxPQUFPLEVBQUUsU0FBUyxFQUFFLE1BQU0sa0JBQWtCLENBQUM7QUFDN0MsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLGtCQUFrQixDQUFDO0FBQzlDLE9BQU8sRUFBRSxjQUFjLEVBQUUsTUFBTSxxQkFBcUIsQ0FBQztBQUNyRCxPQUFPLEVBQUUsa0JBQWtCLEVBQUUsTUFBTSx3QkFBd0IsQ0FBQztBQUU1RCxpREFBaUQ7QUFDakQseUNBQXlDO0FBQ3pDLDhDQUE4QztBQUM5Qzs7Ozs7Ozs7O0dBU0c7QUFDSCxVQUFVO0FBQ1YsTUFBTSxDQUFDLE1BQU0sZUFBZSxHQUFHLEdBQTZCLEVBQUU7SUFDNUQsTUFBTSxPQUFPLEdBQUcsZ0JBQWdCLEVBQUUsQ0FBQztJQUNuQyxJQUFJLEdBQUcsR0FBRyxPQUFPLENBQUMsS0FBSyxDQUFDO0lBQ3hCLElBQUksQ0FBQyxHQUFHLEVBQUUsQ0FBQztRQUNULE1BQU0sRUFBRSxHQUFHLE9BQU8sQ0FBQyxTQUFTLENBQUM7UUFDN0IsYUFBYSxDQUFDLEVBQUUsRUFBRSwwREFBMEQsRUFBRSxPQUFPLENBQUMsQ0FBQztRQUN2RixNQUFNLFNBQVMsR0FBRyxvQkFBb0IsQ0FBQyxFQUFFLENBQUMsQ0FBQztRQUMzQyxhQUFhLENBQUMsU0FBUyxFQUFFLHlDQUF5QyxFQUFFLEVBQUUsQ0FBQyxDQUFDO1FBQ3hFLEdBQUcsR0FBRyxRQUFRLENBQUMsa0JBQWtCLENBQUMsTUFBTSxDQUFDLE9BQU8sQ0FBQyxLQUFLLENBQUMsQ0FBQyxFQUFFLFNBQVMsQ0FBQyxDQUFDO1FBQ3JFLFNBQVMsQ0FBQyxHQUFHLENBQUMsQ0FBQztRQUNmLGNBQWMsQ0FBQyxTQUFTLENBQUMsQ0FBQztRQUMxQixNQUFNLEtBQUssR0FBRyxVQUFVLENBQUMsRUFBRSxFQUFFLGtCQUFrQixDQUFDLFNBQVMsQ0FBQyxDQUFDLENBQUM7UUFDNUQsVUFBVSxDQUFDLEdBQUcsRUFBRSxLQUFLLENBQUMsQ0FBQztJQUN6QixDQUFDO1NBQU0sQ0FBQztRQUNOLFNBQVMsQ0FBQyxHQUFHLENBQUMsQ0FBQztRQUNmLGFBQWEsQ0FDWCxHQUFHLENBQUMsWUFBWSxFQUNoQixtRUFBbUUsRUFDbkUsR0FBRyxDQUNKLENBQUM7SUFDSixDQUFDO0lBQ0QsT0FBTyxHQUFHLENBQUMsWUFBb0IsQ0FBQztBQUNsQyxDQUFDLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBhc3NlcnREZWZpbmVkIH0gZnJvbSAnLi4vZXJyb3IvYXNzZXJ0JztcbmltcG9ydCB7IGluZmxhdGVRcmwsIHBhcnNlUVJMIH0gZnJvbSAnLi4vcXJsL3FybCc7XG5pbXBvcnQgeyBnZXRXcmFwcGluZ0NvbnRhaW5lciwgZ2V0SW52b2tlQ29udGV4dCB9IGZyb20gJy4vdXNlLWNvcmUnO1xuaW1wb3J0IHsgYXNzZXJ0UXJsIH0gZnJvbSAnLi4vcXJsL3FybC1jbGFzcyc7XG5pbXBvcnQgeyBnZXRDb250ZXh0IH0gZnJvbSAnLi4vc3RhdGUvY29udGV4dCc7XG5pbXBvcnQgeyByZXN1bWVJZk5lZWRlZCB9IGZyb20gJy4uL2NvbnRhaW5lci9yZXN1bWUnO1xuaW1wb3J0IHsgX2dldENvbnRhaW5lclN0YXRlIH0gZnJvbSAnLi4vY29udGFpbmVyL2NvbnRhaW5lcic7XG5cbi8vIDxkb2NzIG1hcmtkb3duPVwiLi4vcmVhZG1lLm1kI3VzZUxleGljYWxTY29wZVwiPlxuLy8gISFETyBOT1QgRURJVCBUSElTIENPTU1FTlQgRElSRUNUTFkhISFcbi8vIChlZGl0IC4uL3JlYWRtZS5tZCN1c2VMZXhpY2FsU2NvcGUgaW5zdGVhZClcbi8qKlxuICogVXNlZCBieSB0aGUgUXdpayBPcHRpbWl6ZXIgdG8gcmVzdG9yZSB0aGUgbGV4aWNhbGx5IHNjb3BlZCB2YXJpYWJsZXMuXG4gKlxuICogVGhpcyBtZXRob2Qgc2hvdWxkIG5vdCBiZSBwcmVzZW50IGluIHRoZSBhcHBsaWNhdGlvbiBzb3VyY2UgY29kZS5cbiAqXG4gKiBOT1RFOiBgdXNlTGV4aWNhbFNjb3BlYCBtZXRob2QgY2FuIG9ubHkgYmUgdXNlZCBpbiB0aGUgc3luY2hyb25vdXMgcG9ydGlvbiBvZiB0aGUgY2FsbGJhY2tcbiAqIChiZWZvcmUgYW55IGBhd2FpdGAgc3RhdGVtZW50cy4pXG4gKlxuICogQGludGVybmFsXG4gKi9cbi8vIDwvZG9jcz5cbmV4cG9ydCBjb25zdCB1c2VMZXhpY2FsU2NvcGUgPSA8VkFSUyBleHRlbmRzIGFueVtdPigpOiBWQVJTID0+IHtcbiAgY29uc3QgY29udGV4dCA9IGdldEludm9rZUNvbnRleHQoKTtcbiAgbGV0IHFybCA9IGNvbnRleHQuJHFybCQ7XG4gIGlmICghcXJsKSB7XG4gICAgY29uc3QgZWwgPSBjb250ZXh0LiRlbGVtZW50JDtcbiAgICBhc3NlcnREZWZpbmVkKGVsLCAnaW52b2tlOiBlbGVtZW50IG11c3QgYmUgZGVmaW5lZCBpbnNpZGUgdXNlTGV4aWNhbFNjb3BlKCknLCBjb250ZXh0KTtcbiAgICBjb25zdCBjb250YWluZXIgPSBnZXRXcmFwcGluZ0NvbnRhaW5lcihlbCk7XG4gICAgYXNzZXJ0RGVmaW5lZChjb250YWluZXIsIGBpbnZva2U6IGNhbnQgZmluZCBwYXJlbnQgcTpjb250YWluZXIgb2ZgLCBlbCk7XG4gICAgcXJsID0gcGFyc2VRUkwoZGVjb2RlVVJJQ29tcG9uZW50KFN0cmluZyhjb250ZXh0LiR1cmwkKSksIGNvbnRhaW5lcik7XG4gICAgYXNzZXJ0UXJsKHFybCk7XG4gICAgcmVzdW1lSWZOZWVkZWQoY29udGFpbmVyKTtcbiAgICBjb25zdCBlbEN0eCA9IGdldENvbnRleHQoZWwsIF9nZXRDb250YWluZXJTdGF0ZShjb250YWluZXIpKTtcbiAgICBpbmZsYXRlUXJsKHFybCwgZWxDdHgpO1xuICB9IGVsc2Uge1xuICAgIGFzc2VydFFybChxcmwpO1xuICAgIGFzc2VydERlZmluZWQoXG4gICAgICBxcmwuJGNhcHR1cmVSZWYkLFxuICAgICAgJ2ludm9rZTogcXJsICRjYXB0dXJlUmVmJCBtdXN0IGJlIGRlZmluZWQgaW5zaWRlIHVzZUxleGljYWxTY29wZSgpJyxcbiAgICAgIHFybFxuICAgICk7XG4gIH1cbiAgcmV0dXJuIHFybC4kY2FwdHVyZVJlZiQgYXMgVkFSUztcbn07XG4iXX0=","import { getLastSubscription } from '../../state/common';\nimport { getContext, tryGetContext } from '../../state/context';\nimport { trackSignal } from '../../use/use-core';\nimport { logError } from '../../util/log';\nimport { serializeClassWithHost, stringifyStyle } from '../execute-component';\nimport { insertBefore, removeNode } from './operations';\nimport { getVdom, processData } from './render-dom';\nimport { SVG_NS, createElm, diffVnode, getVnodeFromEl, smartSetProperty } from './visitor';\nimport { Virtual, JSXNodeImpl } from '../jsx/jsx-runtime';\nimport { isPromise } from '../../util/promises';\nimport { isQwikElement } from '../../util/element';\nexport const executeSignalOperation = (rCtx, operation) => {\n    try {\n        const type = operation[0];\n        const staticCtx = rCtx.$static$;\n        switch (type) {\n            case 1:\n            case 2: {\n                let elm;\n                let hostElm;\n                if (type === 1) {\n                    elm = operation[1];\n                    hostElm = operation[3];\n                }\n                else {\n                    elm = operation[3];\n                    hostElm = operation[1];\n                }\n                // assertTrue(elm.isConnected, 'element must be connected to the dom');\n                // assertTrue(hostElm.isConnected, 'host element must be connected to the dom');\n                const elCtx = tryGetContext(elm);\n                if (elCtx == null) {\n                    return;\n                }\n                const prop = operation[4];\n                const isSVG = elm.namespaceURI === SVG_NS;\n                staticCtx.$containerState$.$subsManager$.$clearSignal$(operation);\n                let value = trackSignal(operation[2], operation.slice(0, -1));\n                if (prop === 'class') {\n                    value = serializeClassWithHost(value, tryGetContext(hostElm));\n                }\n                else if (prop === 'style') {\n                    value = stringifyStyle(value);\n                }\n                const vdom = getVdom(elCtx);\n                if (prop in vdom.$props$ && vdom.$props$[prop] === value) {\n                    return;\n                }\n                vdom.$props$[prop] = value;\n                return smartSetProperty(staticCtx, elm, prop, value, isSVG);\n            }\n            case 3:\n            case 4: {\n                const elm = operation[3];\n                if (!staticCtx.$visited$.includes(elm)) {\n                    // assertTrue(elm.isConnected, 'text node must be connected to the dom');\n                    staticCtx.$containerState$.$subsManager$.$clearSignal$(operation);\n                    // MISKO: I believe no `invocationContext` is OK because the JSX in signal\n                    // has already been converted to JSX and there is nothing to execute there.\n                    const invocationContext = undefined;\n                    let signalValue = trackSignal(operation[2], operation.slice(0, -1));\n                    const subscription = getLastSubscription();\n                    if (Array.isArray(signalValue)) {\n                        signalValue = new JSXNodeImpl(Virtual, {}, null, signalValue, 0, null);\n                    }\n                    let newVnode = processData(signalValue, invocationContext);\n                    if (isPromise(newVnode)) {\n                        logError('Rendering promises in JSX signals is not supported');\n                    }\n                    else {\n                        if (newVnode === undefined) {\n                            newVnode = processData('', invocationContext);\n                        }\n                        const oldVnode = getVnodeFromEl(elm);\n                        const element = getQwikElement(operation[1]);\n                        rCtx.$cmpCtx$ = getContext(element, rCtx.$static$.$containerState$);\n                        if (oldVnode.$type$ == newVnode.$type$ &&\n                            oldVnode.$key$ == newVnode.$key$ &&\n                            oldVnode.$id$ == newVnode.$id$) {\n                            diffVnode(rCtx, oldVnode, newVnode, 0);\n                        }\n                        else {\n                            const promises = []; // TODO(misko): hook this up\n                            const oldNode = oldVnode.$elm$;\n                            const newElm = createElm(rCtx, newVnode, 0, promises);\n                            if (promises.length) {\n                                logError('Rendering promises in JSX signals is not supported');\n                            }\n                            subscription[3] = newElm;\n                            insertBefore(rCtx.$static$, elm.parentElement, newElm, oldNode);\n                            oldNode && removeNode(staticCtx, oldNode);\n                        }\n                    }\n                }\n            }\n        }\n    }\n    catch (e) {\n        // Ignore\n    }\n};\nfunction getQwikElement(element) {\n    while (element) {\n        if (isQwikElement(element)) {\n            return element;\n        }\n        element = element.parentElement;\n    }\n    throw new Error('Not found');\n}\n//# sourceMappingURL=data:application/json;base64,","import { assertDefined, assertTrue } from '../../error/assert';\nimport { executeContextWithScrollAndTransition, IS_HEAD, IS_SVG, SVG_NS } from './visitor';\nimport { getDocument } from '../../util/dom';\nimport { logError, logWarn } from '../../util/log';\nimport { getWrappingContainer } from '../../use/use-core';\nimport { runSubscriber, TaskFlagsIsDirty, TaskFlagsIsVisibleTask, TaskFlagsIsResource, TaskFlagsIsTask, isSubscriberDescriptor, } from '../../use/use-task';\nimport { maybeThen } from '../../util/promises';\nimport { useLexicalScope } from '../../use/use-lexical-scope.public';\nimport { renderComponent } from './render-dom';\nimport { _getContainerState } from '../../container/container';\nimport { createRenderContext } from '../execute-component';\nimport { getRootNode } from './virtual-element';\nimport { appendChild, printRenderStats } from './operations';\nimport { executeSignalOperation } from './signals';\nimport { getPlatform, isServerPlatform } from '../../platform/platform';\nimport { qDev } from '../../util/qdev';\nimport { resumeIfNeeded } from '../../container/resume';\nimport { getContext, HOST_FLAG_DIRTY } from '../../state/context';\nimport { directGetAttribute } from '../fast-calls';\nimport { QStyle } from '../../util/markers';\nexport const notifyChange = (subAction, containerState) => {\n    if (subAction[0] === 0) {\n        const host = subAction[1];\n        if (isSubscriberDescriptor(host)) {\n            notifyTask(host, containerState);\n        }\n        else {\n            notifyRender(host, containerState);\n        }\n    }\n    else {\n        notifySignalOperation(subAction, containerState);\n    }\n};\n/**\n * Mark component for rendering.\n *\n * Use `notifyRender` method to mark a component for rendering at some later point in time. This\n * method uses `getPlatform(doc).queueRender` for scheduling of the rendering. The default\n * implementation of the method is to use `requestAnimationFrame` to do actual rendering.\n *\n * The method is intended to coalesce multiple calls into `notifyRender` into a single call for\n * rendering.\n *\n * @param hostElement - Host-element of the component to re-render.\n * @returns A promise which is resolved when the component has been rendered.\n */\nconst notifyRender = (hostElement, containerState) => {\n    const server = isServerPlatform();\n    if (!server) {\n        resumeIfNeeded(containerState.$containerEl$);\n    }\n    const elCtx = getContext(hostElement, containerState);\n    assertDefined(elCtx.$componentQrl$, `render: notified host element must have a defined $renderQrl$`, elCtx);\n    if (elCtx.$flags$ & HOST_FLAG_DIRTY) {\n        return;\n    }\n    elCtx.$flags$ |= HOST_FLAG_DIRTY;\n    const activeRendering = containerState.$hostsRendering$ !== undefined;\n    if (activeRendering) {\n        containerState.$hostsStaging$.add(elCtx);\n    }\n    else {\n        if (server) {\n            logWarn('Can not rerender in server platform');\n            return undefined;\n        }\n        containerState.$hostsNext$.add(elCtx);\n        scheduleFrame(containerState);\n    }\n};\nconst notifySignalOperation = (op, containerState) => {\n    const activeRendering = containerState.$hostsRendering$ !== undefined;\n    containerState.$opsNext$.add(op);\n    if (!activeRendering) {\n        scheduleFrame(containerState);\n    }\n};\nexport const notifyTask = (task, containerState) => {\n    if (task.$flags$ & TaskFlagsIsDirty) {\n        return;\n    }\n    task.$flags$ |= TaskFlagsIsDirty;\n    const activeRendering = containerState.$hostsRendering$ !== undefined;\n    if (activeRendering) {\n        containerState.$taskStaging$.add(task);\n    }\n    else {\n        containerState.$taskNext$.add(task);\n        scheduleFrame(containerState);\n    }\n};\nconst scheduleFrame = (containerState) => {\n    if (containerState.$renderPromise$ === undefined) {\n        containerState.$renderPromise$ = getPlatform().nextTick(() => renderMarked(containerState));\n    }\n    return containerState.$renderPromise$;\n};\n/**\n * Low-level API used by the Optimizer to process `useTask$()` API. This method is not intended to\n * be used by developers.\n *\n * @internal\n */\nexport const _hW = () => {\n    const [task] = useLexicalScope();\n    notifyTask(task, _getContainerState(getWrappingContainer(task.$el$)));\n};\nconst renderMarked = async (containerState) => {\n    const containerEl = containerState.$containerEl$;\n    const doc = getDocument(containerEl);\n    try {\n        const rCtx = createRenderContext(doc, containerState);\n        const staticCtx = rCtx.$static$;\n        const hostsRendering = (containerState.$hostsRendering$ = new Set(containerState.$hostsNext$));\n        containerState.$hostsNext$.clear();\n        await executeTasksBefore(containerState, rCtx);\n        containerState.$hostsStaging$.forEach((host) => {\n            hostsRendering.add(host);\n        });\n        containerState.$hostsStaging$.clear();\n        const signalOperations = Array.from(containerState.$opsNext$);\n        containerState.$opsNext$.clear();\n        const renderingQueue = Array.from(hostsRendering);\n        sortNodes(renderingQueue);\n        if (!containerState.$styleMoved$ && renderingQueue.length > 0) {\n            containerState.$styleMoved$ = true;\n            const parentJSON = containerEl === doc.documentElement ? doc.body : containerEl;\n            parentJSON.querySelectorAll('style[q\\\\:style]').forEach((el) => {\n                containerState.$styleIds$.add(directGetAttribute(el, QStyle));\n                appendChild(staticCtx, doc.head, el);\n            });\n        }\n        for (const elCtx of renderingQueue) {\n            const el = elCtx.$element$;\n            if (!staticCtx.$hostElements$.has(el)) {\n                if (elCtx.$componentQrl$) {\n                    assertTrue(el.isConnected, 'element must be connected to the dom');\n                    staticCtx.$roots$.push(elCtx);\n                    try {\n                        await renderComponent(rCtx, elCtx, getFlags(el.parentElement));\n                    }\n                    catch (err) {\n                        if (qDev) {\n                            throw err;\n                        }\n                        else {\n                            logError(err);\n                        }\n                    }\n                }\n            }\n        }\n        signalOperations.forEach((op) => {\n            executeSignalOperation(rCtx, op);\n        });\n        // Add post operations\n        staticCtx.$operations$.push(...staticCtx.$postOperations$);\n        // Early exist, no dom operations\n        if (staticCtx.$operations$.length === 0) {\n            printRenderStats(staticCtx);\n            await postRendering(containerState, rCtx);\n            return;\n        }\n        await executeContextWithScrollAndTransition(staticCtx);\n        printRenderStats(staticCtx);\n        return postRendering(containerState, rCtx);\n    }\n    catch (err) {\n        logError(err);\n    }\n};\nconst getFlags = (el) => {\n    let flags = 0;\n    if (el) {\n        if (el.namespaceURI === SVG_NS) {\n            flags |= IS_SVG;\n        }\n        if (el.tagName === 'HEAD') {\n            flags |= IS_HEAD;\n        }\n    }\n    return flags;\n};\nexport const postRendering = async (containerState, rCtx) => {\n    const hostElements = rCtx.$static$.$hostElements$;\n    await executeTasksAfter(containerState, rCtx, (task, stage) => {\n        if ((task.$flags$ & TaskFlagsIsVisibleTask) === 0) {\n            return false;\n        }\n        if (stage) {\n            return hostElements.has(task.$el$);\n        }\n        return true;\n    });\n    // Clear staging\n    containerState.$hostsStaging$.forEach((el) => {\n        containerState.$hostsNext$.add(el);\n    });\n    containerState.$hostsStaging$.clear();\n    containerState.$hostsRendering$ = undefined;\n    containerState.$renderPromise$ = undefined;\n    const pending = containerState.$hostsNext$.size +\n        containerState.$taskNext$.size +\n        containerState.$opsNext$.size;\n    if (pending > 0) {\n        // Immediately render again\n        containerState.$renderPromise$ = renderMarked(containerState);\n    }\n};\nconst executeTasksBefore = async (containerState, rCtx) => {\n    const containerEl = containerState.$containerEl$;\n    const resourcesPromises = [];\n    const taskPromises = [];\n    const isTask = (task) => (task.$flags$ & TaskFlagsIsTask) !== 0;\n    const isResourceTask = (task) => (task.$flags$ & TaskFlagsIsResource) !== 0;\n    containerState.$taskNext$.forEach((task) => {\n        if (isTask(task)) {\n            taskPromises.push(maybeThen(task.$qrl$.$resolveLazy$(containerEl), () => task));\n            containerState.$taskNext$.delete(task);\n        }\n        if (isResourceTask(task)) {\n            resourcesPromises.push(maybeThen(task.$qrl$.$resolveLazy$(containerEl), () => task));\n            containerState.$taskNext$.delete(task);\n        }\n    });\n    do {\n        // Run staging effected\n        containerState.$taskStaging$.forEach((task) => {\n            if (isTask(task)) {\n                taskPromises.push(maybeThen(task.$qrl$.$resolveLazy$(containerEl), () => task));\n            }\n            else if (isResourceTask(task)) {\n                resourcesPromises.push(maybeThen(task.$qrl$.$resolveLazy$(containerEl), () => task));\n            }\n            else {\n                containerState.$taskNext$.add(task);\n            }\n        });\n        containerState.$taskStaging$.clear();\n        // Wait for all promises\n        if (taskPromises.length > 0) {\n            const tasks = await Promise.all(taskPromises);\n            sortTasks(tasks);\n            await Promise.all(tasks.map((task) => {\n                return runSubscriber(task, containerState, rCtx);\n            }));\n            taskPromises.length = 0;\n        }\n    } while (containerState.$taskStaging$.size > 0);\n    if (resourcesPromises.length > 0) {\n        const resources = await Promise.all(resourcesPromises);\n        sortTasks(resources);\n        resources.forEach((task) => runSubscriber(task, containerState, rCtx));\n    }\n};\nconst executeTasksAfter = async (containerState, rCtx, taskPred) => {\n    const taskPromises = [];\n    const containerEl = containerState.$containerEl$;\n    containerState.$taskNext$.forEach((task) => {\n        if (taskPred(task, false)) {\n            if (task.$el$.isConnected) {\n                taskPromises.push(maybeThen(task.$qrl$.$resolveLazy$(containerEl), () => task));\n            }\n            containerState.$taskNext$.delete(task);\n        }\n    });\n    do {\n        // Run staging effected\n        containerState.$taskStaging$.forEach((task) => {\n            if (task.$el$.isConnected) {\n                if (taskPred(task, true)) {\n                    taskPromises.push(maybeThen(task.$qrl$.$resolveLazy$(containerEl), () => task));\n                }\n                else {\n                    containerState.$taskNext$.add(task);\n                }\n            }\n        });\n        containerState.$taskStaging$.clear();\n        // Wait for all promises\n        if (taskPromises.length > 0) {\n            const tasks = await Promise.all(taskPromises);\n            sortTasks(tasks);\n            for (const task of tasks) {\n                runSubscriber(task, containerState, rCtx);\n            }\n            taskPromises.length = 0;\n        }\n    } while (containerState.$taskStaging$.size > 0);\n};\nconst sortNodes = (elements) => {\n    elements.sort((a, b) => a.$element$.compareDocumentPosition(getRootNode(b.$element$)) & 2 ? 1 : -1);\n};\nconst sortTasks = (tasks) => {\n    tasks.sort((a, b) => {\n        if (a.$el$ === b.$el$) {\n            return a.$index$ < b.$index$ ? -1 : 1;\n        }\n        return (a.$el$.compareDocumentPosition(getRootNode(b.$el$)) & 2) !== 0 ? 1 : -1;\n    });\n};\n//# sourceMappingURL=data:application/json;base64,","import { verifySerializable } from '../state/common';\nimport { getContext } from '../state/context';\nimport { qDev, qSerialize } from '../util/qdev';\nimport { useInvokeContext } from './use-core';\n/**\n * @internal\n * The storage provider for hooks. Each invocation increases index i. Data is stored in an array.\n */\nexport const useSequentialScope = () => {\n    const iCtx = useInvokeContext();\n    const hostElement = iCtx.$hostElement$;\n    const elCtx = getContext(hostElement, iCtx.$renderCtx$.$static$.$containerState$);\n    const seq = (elCtx.$seq$ || (elCtx.$seq$ = []));\n    const i = iCtx.$i$++;\n    const set = (value) => {\n        if (qDev && qSerialize) {\n            verifySerializable(value);\n        }\n        return (seq[i] = value);\n    };\n    return {\n        val: seq[i],\n        set,\n        i,\n        iCtx,\n        elCtx,\n    };\n};\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidXNlLXNlcXVlbnRpYWwtc2NvcGUuanMiLCJzb3VyY2VSb290IjoiLi8iLCJzb3VyY2VzIjpbInBhY2thZ2VzL3F3aWsvc3JjL2NvcmUvdXNlL3VzZS1zZXF1ZW50aWFsLXNjb3BlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxrQkFBa0IsRUFBRSxNQUFNLGlCQUFpQixDQUFDO0FBQ3JELE9BQU8sRUFBRSxVQUFVLEVBQWlCLE1BQU0sa0JBQWtCLENBQUM7QUFDN0QsT0FBTyxFQUFFLElBQUksRUFBRSxVQUFVLEVBQUUsTUFBTSxjQUFjLENBQUM7QUFDaEQsT0FBTyxFQUE0QixnQkFBZ0IsRUFBRSxNQUFNLFlBQVksQ0FBQztBQWF4RTs7O0dBR0c7QUFDSCxNQUFNLENBQUMsTUFBTSxrQkFBa0IsR0FBRyxHQUEwQixFQUFFO0lBQzVELE1BQU0sSUFBSSxHQUFHLGdCQUFnQixFQUFFLENBQUM7SUFDaEMsTUFBTSxXQUFXLEdBQUcsSUFBSSxDQUFDLGFBQWEsQ0FBQztJQUN2QyxNQUFNLEtBQUssR0FBRyxVQUFVLENBQUMsV0FBVyxFQUFFLElBQUksQ0FBQyxXQUFXLENBQUMsUUFBUSxDQUFDLGdCQUFnQixDQUFDLENBQUM7SUFDbEYsTUFBTSxHQUFHLEdBQUcsQ0FBQyxLQUFLLENBQUMsS0FBSyxLQUFYLEtBQUssQ0FBQyxLQUFLLEdBQUssRUFBRSxFQUFDLENBQUM7SUFDakMsTUFBTSxDQUFDLEdBQUcsSUFBSSxDQUFDLEdBQUcsRUFBRSxDQUFDO0lBRXJCLE1BQU0sR0FBRyxHQUFHLENBQUMsS0FBUSxFQUFFLEVBQUU7UUFDdkIsSUFBSSxJQUFJLElBQUksVUFBVSxFQUFFLENBQUM7WUFDdkIsa0JBQWtCLENBQUMsS0FBSyxDQUFDLENBQUM7UUFDNUIsQ0FBQztRQUNELE9BQU8sQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLEdBQUcsS0FBSyxDQUFDLENBQUM7SUFDMUIsQ0FBQyxDQUFDO0lBRUYsT0FBTztRQUNMLEdBQUcsRUFBRSxHQUFHLENBQUMsQ0FBQyxDQUFDO1FBQ1gsR0FBRztRQUNILENBQUM7UUFDRCxJQUFJO1FBQ0osS0FBSztLQUNOLENBQUM7QUFDSixDQUFDLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyB2ZXJpZnlTZXJpYWxpemFibGUgfSBmcm9tICcuLi9zdGF0ZS9jb21tb24nO1xuaW1wb3J0IHsgZ2V0Q29udGV4dCwgdHlwZSBRQ29udGV4dCB9IGZyb20gJy4uL3N0YXRlL2NvbnRleHQnO1xuaW1wb3J0IHsgcURldiwgcVNlcmlhbGl6ZSB9IGZyb20gJy4uL3V0aWwvcWRldic7XG5pbXBvcnQgeyB0eXBlIFJlbmRlckludm9rZUNvbnRleHQsIHVzZUludm9rZUNvbnRleHQgfSBmcm9tICcuL3VzZS1jb3JlJztcblxuZXhwb3J0IGludGVyZmFjZSBTZXF1ZW50aWFsU2NvcGU8VD4ge1xuICAvKiogVGhlIGN1cnJlbnRseSBzdG9yZWQgZGF0YSBmb3IgdGhlIGhvb2sgdGhhdCBjYWxscyB0aGlzICovXG4gIHJlYWRvbmx5IHZhbDogVCB8IHVuZGVmaW5lZDtcbiAgLyoqIFN0b3JlIG5ldyBkYXRhIGZvciB0aGUgaG9vayB0aGF0IGNhbGxzIHRoaXMgKi9cbiAgcmVhZG9ubHkgc2V0OiAodjogVCkgPT4gVDtcbiAgLyoqIEluZGV4IG9mIHRoZSBob29rICovXG4gIHJlYWRvbmx5IGk6IG51bWJlcjtcbiAgcmVhZG9ubHkgaUN0eDogUmVuZGVySW52b2tlQ29udGV4dDtcbiAgcmVhZG9ubHkgZWxDdHg6IFFDb250ZXh0O1xufVxuXG4vKipcbiAqIEBpbnRlcm5hbFxuICogVGhlIHN0b3JhZ2UgcHJvdmlkZXIgZm9yIGhvb2tzLiBFYWNoIGludm9jYXRpb24gaW5jcmVhc2VzIGluZGV4IGkuIERhdGEgaXMgc3RvcmVkIGluIGFuIGFycmF5LlxuICovXG5leHBvcnQgY29uc3QgdXNlU2VxdWVudGlhbFNjb3BlID0gPFQ+KCk6IFNlcXVlbnRpYWxTY29wZTxUPiA9PiB7XG4gIGNvbnN0IGlDdHggPSB1c2VJbnZva2VDb250ZXh0KCk7XG4gIGNvbnN0IGhvc3RFbGVtZW50ID0gaUN0eC4kaG9zdEVsZW1lbnQkO1xuICBjb25zdCBlbEN0eCA9IGdldENvbnRleHQoaG9zdEVsZW1lbnQsIGlDdHguJHJlbmRlckN0eCQuJHN0YXRpYyQuJGNvbnRhaW5lclN0YXRlJCk7XG4gIGNvbnN0IHNlcSA9IChlbEN0eC4kc2VxJCB8fD0gW10pO1xuICBjb25zdCBpID0gaUN0eC4kaSQrKztcblxuICBjb25zdCBzZXQgPSAodmFsdWU6IFQpID0+IHtcbiAgICBpZiAocURldiAmJiBxU2VyaWFsaXplKSB7XG4gICAgICB2ZXJpZnlTZXJpYWxpemFibGUodmFsdWUpO1xuICAgIH1cbiAgICByZXR1cm4gKHNlcVtpXSA9IHZhbHVlKTtcbiAgfTtcblxuICByZXR1cm4ge1xuICAgIHZhbDogc2VxW2ldLFxuICAgIHNldCxcbiAgICBpLFxuICAgIGlDdHgsXG4gICAgZWxDdHgsXG4gIH07XG59O1xuIl19","import { fromCamelToKebabCase } from '../util/case';\nimport { qError, QError_invalidContext, QError_notFoundContext } from '../error/error';\nimport { qDev, qSerialize } from '../util/qdev';\nimport { isObject } from '../util/types';\nimport { useSequentialScope } from './use-sequential-scope';\nimport { assertTrue } from '../error/assert';\nimport { verifySerializable } from '../state/common';\nimport { getContext } from '../state/context';\nimport { invoke } from './use-core';\nimport { getVirtualElement, } from '../render/dom/virtual-element';\nimport { isComment } from '../util/element';\nimport { Q_CTX, VIRTUAL_SYMBOL } from '../state/constants';\n// <docs markdown=\"../readme.md#createContextId\">\n// !!DO NOT EDIT THIS COMMENT DIRECTLY!!!\n// (edit ../readme.md#createContextId instead)\n/**\n * Create a context ID to be used in your application. The name should be written with no spaces.\n *\n * Context is a way to pass stores to the child components without prop-drilling.\n *\n * Use `createContextId()` to create a `ContextId`. A `ContextId` is just a serializable identifier\n * for the context. It is not the context value itself. See `useContextProvider()` and\n * `useContext()` for the values. Qwik needs a serializable ID for the context so that the it can\n * track context providers and consumers in a way that survives resumability.\n *\n * ### Example\n *\n * ```tsx\n * // Declare the Context type.\n * interface TodosStore {\n *   items: string[];\n * }\n * // Create a Context ID (no data is saved here.)\n * // You will use this ID to both create and retrieve the Context.\n * export const TodosContext = createContextId<TodosStore>('Todos');\n *\n * // Example of providing context to child components.\n * export const App = component$(() => {\n *   useContextProvider(\n *     TodosContext,\n *     useStore<TodosStore>({\n *       items: ['Learn Qwik', 'Build Qwik app', 'Profit'],\n *     })\n *   );\n *\n *   return <Items />;\n * });\n *\n * // Example of retrieving the context provided by a parent component.\n * export const Items = component$(() => {\n *   const todos = useContext(TodosContext);\n *   return (\n *     <ul>\n *       {todos.items.map((item) => (\n *         <li>{item}</li>\n *       ))}\n *     </ul>\n *   );\n * });\n *\n * ```\n *\n * @param name - The name of the context.\n * @public\n */\n// </docs>\nexport const createContextId = (name) => {\n    assertTrue(/^[\\w/.-]+$/.test(name), 'Context name must only contain A-Z,a-z,0-9, _', name);\n    return /*#__PURE__*/ Object.freeze({\n        id: fromCamelToKebabCase(name),\n    });\n};\n// <docs markdown=\"../readme.md#useContextProvider\">\n// !!DO NOT EDIT THIS COMMENT DIRECTLY!!!\n// (edit ../readme.md#useContextProvider instead)\n/**\n * Assign a value to a Context.\n *\n * Use `useContextProvider()` to assign a value to a context. The assignment happens in the\n * component's function. Once assigned, use `useContext()` in any child component to retrieve the\n * value.\n *\n * Context is a way to pass stores to the child components without prop-drilling.\n *\n * ### Example\n *\n * ```tsx\n * // Declare the Context type.\n * interface TodosStore {\n *   items: string[];\n * }\n * // Create a Context ID (no data is saved here.)\n * // You will use this ID to both create and retrieve the Context.\n * export const TodosContext = createContextId<TodosStore>('Todos');\n *\n * // Example of providing context to child components.\n * export const App = component$(() => {\n *   useContextProvider(\n *     TodosContext,\n *     useStore<TodosStore>({\n *       items: ['Learn Qwik', 'Build Qwik app', 'Profit'],\n *     })\n *   );\n *\n *   return <Items />;\n * });\n *\n * // Example of retrieving the context provided by a parent component.\n * export const Items = component$(() => {\n *   const todos = useContext(TodosContext);\n *   return (\n *     <ul>\n *       {todos.items.map((item) => (\n *         <li>{item}</li>\n *       ))}\n *     </ul>\n *   );\n * });\n *\n * ```\n *\n * @param context - The context to assign a value to.\n * @param value - The value to assign to the context.\n * @public\n */\n// </docs>\nexport const useContextProvider = (context, newValue) => {\n    const { val, set, elCtx } = useSequentialScope();\n    if (val !== undefined) {\n        return;\n    }\n    if (qDev) {\n        validateContext(context);\n    }\n    const contexts = (elCtx.$contexts$ || (elCtx.$contexts$ = new Map()));\n    if (qDev && qSerialize) {\n        verifySerializable(newValue);\n    }\n    contexts.set(context.id, newValue);\n    set(true);\n};\n// <docs markdown=\"../readme.md#useContext\">\n// !!DO NOT EDIT THIS COMMENT DIRECTLY!!!\n// (edit ../readme.md#useContext instead)\n/**\n * Retrieve Context value.\n *\n * Use `useContext()` to retrieve the value of context in a component. To retrieve a value a parent\n * component needs to invoke `useContextProvider()` to assign a value.\n *\n * ### Example\n *\n * ```tsx\n * // Declare the Context type.\n * interface TodosStore {\n *   items: string[];\n * }\n * // Create a Context ID (no data is saved here.)\n * // You will use this ID to both create and retrieve the Context.\n * export const TodosContext = createContextId<TodosStore>('Todos');\n *\n * // Example of providing context to child components.\n * export const App = component$(() => {\n *   useContextProvider(\n *     TodosContext,\n *     useStore<TodosStore>({\n *       items: ['Learn Qwik', 'Build Qwik app', 'Profit'],\n *     })\n *   );\n *\n *   return <Items />;\n * });\n *\n * // Example of retrieving the context provided by a parent component.\n * export const Items = component$(() => {\n *   const todos = useContext(TodosContext);\n *   return (\n *     <ul>\n *       {todos.items.map((item) => (\n *         <li>{item}</li>\n *       ))}\n *     </ul>\n *   );\n * });\n *\n * ```\n *\n * @param context - The context to retrieve a value from.\n * @public\n */\n// </docs>\nexport const useContext = (context, defaultValue) => {\n    const { val, set, iCtx, elCtx } = useSequentialScope();\n    if (val !== undefined) {\n        return val;\n    }\n    if (qDev) {\n        validateContext(context);\n    }\n    const value = resolveContext(context, elCtx, iCtx.$renderCtx$.$static$.$containerState$);\n    if (typeof defaultValue === 'function') {\n        return set(invoke(undefined, defaultValue, value));\n    }\n    if (value !== undefined) {\n        return set(value);\n    }\n    if (defaultValue !== undefined) {\n        return set(defaultValue);\n    }\n    throw qError(QError_notFoundContext, context.id);\n};\n/** Find a wrapping Virtual component in the DOM */\nconst findParentCtx = (el, containerState) => {\n    let node = el;\n    let stack = 1;\n    while (node && !node.hasAttribute?.('q:container')) {\n        // Walk the siblings backwards, each comment might be the Virtual wrapper component\n        while ((node = node.previousSibling)) {\n            if (isComment(node)) {\n                const virtual = node[VIRTUAL_SYMBOL];\n                if (virtual) {\n                    const qtx = virtual[Q_CTX];\n                    if (node === virtual.open) {\n                        // We started inside this node so this is our parent\n                        return qtx ?? getContext(virtual, containerState);\n                    }\n                    // This is a sibling, check if it knows our parent\n                    if (qtx?.$parentCtx$) {\n                        return qtx.$parentCtx$;\n                    }\n                    // Skip over this entire virtual sibling\n                    node = virtual;\n                    continue;\n                }\n                if (node.data === '/qv') {\n                    stack++;\n                }\n                else if (node.data.startsWith('qv ')) {\n                    stack--;\n                    if (stack === 0) {\n                        return getContext(getVirtualElement(node), containerState);\n                    }\n                }\n            }\n        }\n        // No more siblings, walk up the DOM tree. The parent will never be a Virtual component.\n        node = el.parentElement;\n        el = node;\n    }\n    return null;\n};\nconst getParentProvider = (ctx, containerState) => {\n    // `null` means there's no parent, `undefined` means we don't know yet.\n    if (ctx.$parentCtx$ === undefined) {\n        // Not fully resumed container, find context from DOM\n        ctx.$parentCtx$ = findParentCtx(ctx.$element$, containerState);\n    }\n    /**\n     * Note, the parentCtx is used during pause to to get the immediate parent, so we can't shortcut\n     * the search for $contexts$ here. If that turns out to be needed, it needs to be cached in a\n     * separate property.\n     */\n    return ctx.$parentCtx$;\n};\nexport const resolveContext = (context, hostCtx, containerState) => {\n    const contextID = context.id;\n    if (!hostCtx) {\n        return;\n    }\n    let ctx = hostCtx;\n    while (ctx) {\n        const found = ctx.$contexts$?.get(contextID);\n        if (found) {\n            return found;\n        }\n        ctx = getParentProvider(ctx, containerState);\n    }\n};\nexport const validateContext = (context) => {\n    if (!isObject(context) || typeof context.id !== 'string' || context.id.length === 0) {\n        throw qError(QError_invalidContext, context);\n    }\n};\n//# sourceMappingURL=data:application/json;base64,","import { isServerPlatform } from '../platform/platform';\nimport { tryGetContext } from '../state/context';\nimport { createContextId, resolveContext } from '../use/use-context';\nimport { isVirtualElement } from '../util/element';\nimport { qDev } from '../util/qdev';\nexport const ERROR_CONTEXT = /*#__PURE__*/ createContextId('qk-error');\nexport const handleError = (err, hostElement, rCtx) => {\n    const elCtx = tryGetContext(hostElement);\n    if (qDev) {\n        // Clean vdom\n        if (!isServerPlatform() && typeof document !== 'undefined' && isVirtualElement(hostElement)) {\n            // (hostElement as any).$vdom$ = null;\n            elCtx.$vdom$ = null;\n            const errorDiv = document.createElement('errored-host');\n            if (err && err instanceof Error) {\n                errorDiv.props = { error: err };\n            }\n            errorDiv.setAttribute('q:key', '_error_');\n            errorDiv.append(...hostElement.childNodes);\n            hostElement.appendChild(errorDiv);\n        }\n        if (err && err instanceof Error) {\n            if (!('hostElement' in err)) {\n                err['hostElement'] = hostElement;\n            }\n        }\n        if (!isRecoverable(err)) {\n            throw err;\n        }\n    }\n    if (isServerPlatform()) {\n        throw err;\n    }\n    else {\n        const errorStore = resolveContext(ERROR_CONTEXT, elCtx, rCtx.$static$.$containerState$);\n        if (errorStore === undefined) {\n            throw err;\n        }\n        errorStore.error = err;\n    }\n};\nconst isRecoverable = (err) => {\n    if (err && err instanceof Error) {\n        if ('plugin' in err) {\n            return false;\n        }\n    }\n    return true;\n};\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZXJyb3ItaGFuZGxpbmcuanMiLCJzb3VyY2VSb290IjoiLi8iLCJzb3VyY2VzIjpbInBhY2thZ2VzL3F3aWsvc3JjL2NvcmUvcmVuZGVyL2Vycm9yLWhhbmRsaW5nLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxnQkFBZ0IsRUFBRSxNQUFNLHNCQUFzQixDQUFDO0FBQ3hELE9BQU8sRUFBRSxhQUFhLEVBQUUsTUFBTSxrQkFBa0IsQ0FBQztBQUNqRCxPQUFPLEVBQUUsZUFBZSxFQUFFLGNBQWMsRUFBRSxNQUFNLG9CQUFvQixDQUFDO0FBQ3JFLE9BQU8sRUFBRSxnQkFBZ0IsRUFBRSxNQUFNLGlCQUFpQixDQUFDO0FBQ25ELE9BQU8sRUFBRSxJQUFJLEVBQUUsTUFBTSxjQUFjLENBQUM7QUFTcEMsTUFBTSxDQUFDLE1BQU0sYUFBYSxHQUFHLGFBQWEsQ0FBQyxlQUFlLENBQXFCLFVBQVUsQ0FBQyxDQUFDO0FBRTNGLE1BQU0sQ0FBQyxNQUFNLFdBQVcsR0FBRyxDQUFDLEdBQVEsRUFBRSxXQUF3QixFQUFFLElBQW1CLEVBQUUsRUFBRTtJQUNyRixNQUFNLEtBQUssR0FBRyxhQUFhLENBQUMsV0FBVyxDQUFFLENBQUM7SUFDMUMsSUFBSSxJQUFJLEVBQUUsQ0FBQztRQUNULGFBQWE7UUFDYixJQUFJLENBQUMsZ0JBQWdCLEVBQUUsSUFBSSxPQUFPLFFBQVEsS0FBSyxXQUFXLElBQUksZ0JBQWdCLENBQUMsV0FBVyxDQUFDLEVBQUUsQ0FBQztZQUM1RixzQ0FBc0M7WUFDdEMsS0FBSyxDQUFDLE1BQU0sR0FBRyxJQUFJLENBQUM7WUFDcEIsTUFBTSxRQUFRLEdBQUcsUUFBUSxDQUFDLGFBQWEsQ0FBQyxjQUFjLENBQUMsQ0FBQztZQUN4RCxJQUFJLEdBQUcsSUFBSSxHQUFHLFlBQVksS0FBSyxFQUFFLENBQUM7Z0JBQy9CLFFBQWdCLENBQUMsS0FBSyxHQUFHLEVBQUUsS0FBSyxFQUFFLEdBQUcsRUFBRSxDQUFDO1lBQzNDLENBQUM7WUFDRCxRQUFRLENBQUMsWUFBWSxDQUFDLE9BQU8sRUFBRSxTQUFTLENBQUMsQ0FBQztZQUMxQyxRQUFRLENBQUMsTUFBTSxDQUFDLEdBQUcsV0FBVyxDQUFDLFVBQVUsQ0FBQyxDQUFDO1lBQzNDLFdBQVcsQ0FBQyxXQUFXLENBQUMsUUFBUSxDQUFDLENBQUM7UUFDcEMsQ0FBQztRQUVELElBQUksR0FBRyxJQUFJLEdBQUcsWUFBWSxLQUFLLEVBQUUsQ0FBQztZQUNoQyxJQUFJLENBQUMsQ0FBQyxhQUFhLElBQUksR0FBRyxDQUFDLEVBQUUsQ0FBQztnQkFDM0IsR0FBVyxDQUFDLGFBQWEsQ0FBQyxHQUFHLFdBQVcsQ0FBQztZQUM1QyxDQUFDO1FBQ0gsQ0FBQztRQUNELElBQUksQ0FBQyxhQUFhLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQztZQUN4QixNQUFNLEdBQUcsQ0FBQztRQUNaLENBQUM7SUFDSCxDQUFDO0lBQ0QsSUFBSSxnQkFBZ0IsRUFBRSxFQUFFLENBQUM7UUFDdkIsTUFBTSxHQUFHLENBQUM7SUFDWixDQUFDO1NBQU0sQ0FBQztRQUNOLE1BQU0sVUFBVSxHQUFHLGNBQWMsQ0FBQyxhQUFhLEVBQUUsS0FBSyxFQUFFLElBQUksQ0FBQyxRQUFRLENBQUMsZ0JBQWdCLENBQUMsQ0FBQztRQUN4RixJQUFJLFVBQVUsS0FBSyxTQUFTLEVBQUUsQ0FBQztZQUM3QixNQUFNLEdBQUcsQ0FBQztRQUNaLENBQUM7UUFDRCxVQUFVLENBQUMsS0FBSyxHQUFHLEdBQUcsQ0FBQztJQUN6QixDQUFDO0FBQ0gsQ0FBQyxDQUFDO0FBRUYsTUFBTSxhQUFhLEdBQUcsQ0FBQyxHQUFRLEVBQUUsRUFBRTtJQUNqQyxJQUFJLEdBQUcsSUFBSSxHQUFHLFlBQVksS0FBSyxFQUFFLENBQUM7UUFDaEMsSUFBSSxRQUFRLElBQUksR0FBRyxFQUFFLENBQUM7WUFDcEIsT0FBTyxLQUFLLENBQUM7UUFDZixDQUFDO0lBQ0gsQ0FBQztJQUNELE9BQU8sSUFBSSxDQUFDO0FBQ2QsQ0FBQyxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgaXNTZXJ2ZXJQbGF0Zm9ybSB9IGZyb20gJy4uL3BsYXRmb3JtL3BsYXRmb3JtJztcbmltcG9ydCB7IHRyeUdldENvbnRleHQgfSBmcm9tICcuLi9zdGF0ZS9jb250ZXh0JztcbmltcG9ydCB7IGNyZWF0ZUNvbnRleHRJZCwgcmVzb2x2ZUNvbnRleHQgfSBmcm9tICcuLi91c2UvdXNlLWNvbnRleHQnO1xuaW1wb3J0IHsgaXNWaXJ0dWFsRWxlbWVudCB9IGZyb20gJy4uL3V0aWwvZWxlbWVudCc7XG5pbXBvcnQgeyBxRGV2IH0gZnJvbSAnLi4vdXRpbC9xZGV2JztcbmltcG9ydCB0eXBlIHsgUXdpa0VsZW1lbnQgfSBmcm9tICcuL2RvbS92aXJ0dWFsLWVsZW1lbnQnO1xuaW1wb3J0IHR5cGUgeyBSZW5kZXJDb250ZXh0IH0gZnJvbSAnLi90eXBlcyc7XG5cbi8qKiBAcHVibGljICovXG5leHBvcnQgaW50ZXJmYWNlIEVycm9yQm91bmRhcnlTdG9yZSB7XG4gIGVycm9yOiBhbnkgfCB1bmRlZmluZWQ7XG59XG5cbmV4cG9ydCBjb25zdCBFUlJPUl9DT05URVhUID0gLyojX19QVVJFX18qLyBjcmVhdGVDb250ZXh0SWQ8RXJyb3JCb3VuZGFyeVN0b3JlPigncWstZXJyb3InKTtcblxuZXhwb3J0IGNvbnN0IGhhbmRsZUVycm9yID0gKGVycjogYW55LCBob3N0RWxlbWVudDogUXdpa0VsZW1lbnQsIHJDdHg6IFJlbmRlckNvbnRleHQpID0+IHtcbiAgY29uc3QgZWxDdHggPSB0cnlHZXRDb250ZXh0KGhvc3RFbGVtZW50KSE7XG4gIGlmIChxRGV2KSB7XG4gICAgLy8gQ2xlYW4gdmRvbVxuICAgIGlmICghaXNTZXJ2ZXJQbGF0Zm9ybSgpICYmIHR5cGVvZiBkb2N1bWVudCAhPT0gJ3VuZGVmaW5lZCcgJiYgaXNWaXJ0dWFsRWxlbWVudChob3N0RWxlbWVudCkpIHtcbiAgICAgIC8vIChob3N0RWxlbWVudCBhcyBhbnkpLiR2ZG9tJCA9IG51bGw7XG4gICAgICBlbEN0eC4kdmRvbSQgPSBudWxsO1xuICAgICAgY29uc3QgZXJyb3JEaXYgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdlcnJvcmVkLWhvc3QnKTtcbiAgICAgIGlmIChlcnIgJiYgZXJyIGluc3RhbmNlb2YgRXJyb3IpIHtcbiAgICAgICAgKGVycm9yRGl2IGFzIGFueSkucHJvcHMgPSB7IGVycm9yOiBlcnIgfTtcbiAgICAgIH1cbiAgICAgIGVycm9yRGl2LnNldEF0dHJpYnV0ZSgncTprZXknLCAnX2Vycm9yXycpO1xuICAgICAgZXJyb3JEaXYuYXBwZW5kKC4uLmhvc3RFbGVtZW50LmNoaWxkTm9kZXMpO1xuICAgICAgaG9zdEVsZW1lbnQuYXBwZW5kQ2hpbGQoZXJyb3JEaXYpO1xuICAgIH1cblxuICAgIGlmIChlcnIgJiYgZXJyIGluc3RhbmNlb2YgRXJyb3IpIHtcbiAgICAgIGlmICghKCdob3N0RWxlbWVudCcgaW4gZXJyKSkge1xuICAgICAgICAoZXJyIGFzIGFueSlbJ2hvc3RFbGVtZW50J10gPSBob3N0RWxlbWVudDtcbiAgICAgIH1cbiAgICB9XG4gICAgaWYgKCFpc1JlY292ZXJhYmxlKGVycikpIHtcbiAgICAgIHRocm93IGVycjtcbiAgICB9XG4gIH1cbiAgaWYgKGlzU2VydmVyUGxhdGZvcm0oKSkge1xuICAgIHRocm93IGVycjtcbiAgfSBlbHNlIHtcbiAgICBjb25zdCBlcnJvclN0b3JlID0gcmVzb2x2ZUNvbnRleHQoRVJST1JfQ09OVEVYVCwgZWxDdHgsIHJDdHguJHN0YXRpYyQuJGNvbnRhaW5lclN0YXRlJCk7XG4gICAgaWYgKGVycm9yU3RvcmUgPT09IHVuZGVmaW5lZCkge1xuICAgICAgdGhyb3cgZXJyO1xuICAgIH1cbiAgICBlcnJvclN0b3JlLmVycm9yID0gZXJyO1xuICB9XG59O1xuXG5jb25zdCBpc1JlY292ZXJhYmxlID0gKGVycjogYW55KSA9PiB7XG4gIGlmIChlcnIgJiYgZXJyIGluc3RhbmNlb2YgRXJyb3IpIHtcbiAgICBpZiAoJ3BsdWdpbicgaW4gZXJyKSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICB9XG4gIHJldHVybiB0cnVlO1xufTtcbiJdfQ==","import { newInvokeContext, invoke, waitAndRun, untrack } from './use-core';\nimport { logError, logErrorAndStop } from '../util/log';\nimport { delay, safeCall, maybeThen } from '../util/promises';\nimport { isFunction, isObject } from '../util/types';\nimport { isServerPlatform } from '../platform/platform';\nimport { implicit$FirstArg } from '../util/implicit_dollar';\nimport { assertDefined, assertEqual } from '../error/assert';\nimport { assertQrl, assertSignal, createQRL } from '../qrl/qrl-class';\nimport { codeToText, QError_trackUseStore } from '../error/error';\nimport { useOn, useOnDocument } from './use-on';\nimport { intToStr, strToInt } from '../container/container';\nimport { notifyTask, _hW } from '../render/dom/notify-render';\nimport { useSequentialScope } from './use-sequential-scope';\nimport { handleError } from '../render/error-handling';\nimport { getSubscriptionManager, noSerialize, unwrapProxy, } from '../state/common';\nimport { isSignal, QObjectSignalFlags, SIGNAL_IMMUTABLE, SIGNAL_UNASSIGNED, _createSignal, } from '../state/signal';\nimport { QObjectManagerSymbol } from '../state/constants';\nimport { ComputedEvent, TaskEvent } from '../util/markers';\nexport const TaskFlagsIsVisibleTask = 1 << 0;\nexport const TaskFlagsIsTask = 1 << 1;\nexport const TaskFlagsIsResource = 1 << 2;\nexport const TaskFlagsIsComputed = 1 << 3;\nexport const TaskFlagsIsDirty = 1 << 4;\nexport const TaskFlagsIsCleanup = 1 << 5;\n// <docs markdown=\"../readme.md#useTask\">\n// !!DO NOT EDIT THIS COMMENT DIRECTLY!!!\n// (edit ../readme.md#useTask instead)\n/**\n * Reruns the `taskFn` when the observed inputs change.\n *\n * Use `useTask` to observe changes on a set of inputs, and then re-execute the `taskFn` when those\n * inputs change.\n *\n * The `taskFn` only executes if the observed inputs change. To observe the inputs, use the `obs`\n * function to wrap property reads. This creates subscriptions that will trigger the `taskFn` to\n * rerun.\n *\n * @param task - Function which should be re-executed when changes to the inputs are detected\n * @public\n *\n * ### Example\n *\n * The `useTask` function is used to observe the `state.count` property. Any changes to the\n * `state.count` cause the `taskFn` to execute which in turn updates the `state.doubleCount` to\n * the double of `state.count`.\n *\n * ```tsx\n * const Cmp = component$(() => {\n *   const store = useStore({\n *     count: 0,\n *     doubleCount: 0,\n *     debounced: 0,\n *   });\n *\n *   // Double count task\n *   useTask$(({ track }) => {\n *     const count = track(() => store.count);\n *     store.doubleCount = 2 * count;\n *   });\n *\n *   // Debouncer task\n *   useTask$(({ track }) => {\n *     const doubleCount = track(() => store.doubleCount);\n *     const timer = setTimeout(() => {\n *       store.debounced = doubleCount;\n *     }, 2000);\n *     return () => {\n *       clearTimeout(timer);\n *     };\n *   });\n *   return (\n *     <div>\n *       <div>\n *         {store.count} / {store.doubleCount}\n *       </div>\n *       <div>{store.debounced}</div>\n *     </div>\n *   );\n * });\n * ```\n *\n * @public\n * @see `Tracker`\n */\n// </docs>\nexport const useTaskQrl = (qrl, opts) => {\n    const { val, set, iCtx, i, elCtx } = useSequentialScope();\n    if (val) {\n        return;\n    }\n    assertQrl(qrl);\n    const containerState = iCtx.$renderCtx$.$static$.$containerState$;\n    const task = new Task(TaskFlagsIsDirty | TaskFlagsIsTask, i, elCtx.$element$, qrl, undefined);\n    set(true);\n    qrl.$resolveLazy$(containerState.$containerEl$);\n    if (!elCtx.$tasks$) {\n        elCtx.$tasks$ = [];\n    }\n    elCtx.$tasks$.push(task);\n    waitAndRun(iCtx, () => runTask(task, containerState, iCtx.$renderCtx$));\n    if (isServerPlatform()) {\n        useRunTask(task, opts?.eagerness);\n    }\n};\n/** @public */\nexport const useComputedQrl = (qrl) => {\n    const { val, set, iCtx, i, elCtx } = useSequentialScope();\n    if (val) {\n        return val;\n    }\n    assertQrl(qrl);\n    const containerState = iCtx.$renderCtx$.$static$.$containerState$;\n    const signal = _createSignal(undefined, containerState, SIGNAL_UNASSIGNED | SIGNAL_IMMUTABLE, undefined);\n    const task = new Task(TaskFlagsIsDirty | TaskFlagsIsTask | TaskFlagsIsComputed, i, elCtx.$element$, qrl, signal);\n    qrl.$resolveLazy$(containerState.$containerEl$);\n    if (!elCtx.$tasks$) {\n        elCtx.$tasks$ = [];\n    }\n    elCtx.$tasks$.push(task);\n    waitAndRun(iCtx, () => runComputed(task, containerState, iCtx.$renderCtx$));\n    return set(signal);\n};\n/** @public */\nexport const useComputed$ = implicit$FirstArg(useComputedQrl);\n// <docs markdown=\"../readme.md#useTask\">\n// !!DO NOT EDIT THIS COMMENT DIRECTLY!!!\n// (edit ../readme.md#useTask instead)\n/**\n * Reruns the `taskFn` when the observed inputs change.\n *\n * Use `useTask` to observe changes on a set of inputs, and then re-execute the `taskFn` when those\n * inputs change.\n *\n * The `taskFn` only executes if the observed inputs change. To observe the inputs, use the `obs`\n * function to wrap property reads. This creates subscriptions that will trigger the `taskFn` to\n * rerun.\n *\n * @param task - Function which should be re-executed when changes to the inputs are detected\n * @public\n *\n * ### Example\n *\n * The `useTask` function is used to observe the `state.count` property. Any changes to the\n * `state.count` cause the `taskFn` to execute which in turn updates the `state.doubleCount` to\n * the double of `state.count`.\n *\n * ```tsx\n * const Cmp = component$(() => {\n *   const store = useStore({\n *     count: 0,\n *     doubleCount: 0,\n *     debounced: 0,\n *   });\n *\n *   // Double count task\n *   useTask$(({ track }) => {\n *     const count = track(() => store.count);\n *     store.doubleCount = 2 * count;\n *   });\n *\n *   // Debouncer task\n *   useTask$(({ track }) => {\n *     const doubleCount = track(() => store.doubleCount);\n *     const timer = setTimeout(() => {\n *       store.debounced = doubleCount;\n *     }, 2000);\n *     return () => {\n *       clearTimeout(timer);\n *     };\n *   });\n *   return (\n *     <div>\n *       <div>\n *         {store.count} / {store.doubleCount}\n *       </div>\n *       <div>{store.debounced}</div>\n *     </div>\n *   );\n * });\n * ```\n *\n * @public\n * @see `Tracker`\n */\n// </docs>\nexport const useTask$ = /*#__PURE__*/ implicit$FirstArg(useTaskQrl);\n// <docs markdown=\"../readme.md#useVisibleTask\">\n// !!DO NOT EDIT THIS COMMENT DIRECTLY!!!\n// (edit ../readme.md#useVisibleTask instead)\n/**\n * ```tsx\n * const Timer = component$(() => {\n *   const store = useStore({\n *     count: 0,\n *   });\n *\n *   useVisibleTask$(() => {\n *     // Only runs in the client\n *     const timer = setInterval(() => {\n *       store.count++;\n *     }, 500);\n *     return () => {\n *       clearInterval(timer);\n *     };\n *   });\n *\n *   return <div>{store.count}</div>;\n * });\n * ```\n *\n * @public\n */\n// </docs>\nexport const useVisibleTaskQrl = (qrl, opts) => {\n    const { val, set, i, iCtx, elCtx } = useSequentialScope();\n    const eagerness = opts?.strategy ?? 'intersection-observer';\n    if (val) {\n        if (isServerPlatform()) {\n            useRunTask(val, eagerness);\n        }\n        return;\n    }\n    assertQrl(qrl);\n    const task = new Task(TaskFlagsIsVisibleTask, i, elCtx.$element$, qrl, undefined);\n    const containerState = iCtx.$renderCtx$.$static$.$containerState$;\n    if (!elCtx.$tasks$) {\n        elCtx.$tasks$ = [];\n    }\n    elCtx.$tasks$.push(task);\n    set(task);\n    useRunTask(task, eagerness);\n    if (!isServerPlatform()) {\n        qrl.$resolveLazy$(containerState.$containerEl$);\n        notifyTask(task, containerState);\n    }\n};\n// <docs markdown=\"../readme.md#useVisibleTask\">\n// !!DO NOT EDIT THIS COMMENT DIRECTLY!!!\n// (edit ../readme.md#useVisibleTask instead)\n/**\n * ```tsx\n * const Timer = component$(() => {\n *   const store = useStore({\n *     count: 0,\n *   });\n *\n *   useVisibleTask$(() => {\n *     // Only runs in the client\n *     const timer = setInterval(() => {\n *       store.count++;\n *     }, 500);\n *     return () => {\n *       clearInterval(timer);\n *     };\n *   });\n *\n *   return <div>{store.count}</div>;\n * });\n * ```\n *\n * @public\n */\n// </docs>\nexport const useVisibleTask$ = /*#__PURE__*/ implicit$FirstArg(useVisibleTaskQrl);\nexport const isResourceTask = (task) => {\n    return (task.$flags$ & TaskFlagsIsResource) !== 0;\n};\nexport const isComputedTask = (task) => {\n    return (task.$flags$ & TaskFlagsIsComputed) !== 0;\n};\nexport const runSubscriber = async (task, containerState, rCtx) => {\n    assertEqual(!!(task.$flags$ & TaskFlagsIsDirty), true, 'Resource is not dirty', task);\n    if (isResourceTask(task)) {\n        return runResource(task, containerState, rCtx);\n    }\n    else if (isComputedTask(task)) {\n        return runComputed(task, containerState, rCtx);\n    }\n    else {\n        return runTask(task, containerState, rCtx);\n    }\n};\nexport const runResource = (task, containerState, rCtx, waitOn) => {\n    task.$flags$ &= ~TaskFlagsIsDirty;\n    cleanupTask(task);\n    const el = task.$el$;\n    const iCtx = newInvokeContext(rCtx.$static$.$locale$, el, undefined, TaskEvent);\n    const { $subsManager$: subsManager } = containerState;\n    iCtx.$renderCtx$ = rCtx;\n    const taskFn = task.$qrl$.getFn(iCtx, () => {\n        subsManager.$clearSub$(task);\n    });\n    const cleanups = [];\n    const resource = task.$state$;\n    assertDefined(resource, 'useResource: when running a resource, \"task.r\" must be a defined.', task);\n    const track = (obj, prop) => {\n        if (isFunction(obj)) {\n            const ctx = newInvokeContext();\n            ctx.$renderCtx$ = rCtx;\n            ctx.$subscriber$ = [0, task];\n            return invoke(ctx, obj);\n        }\n        const manager = getSubscriptionManager(obj);\n        if (manager) {\n            manager.$addSub$([0, task], prop);\n        }\n        else {\n            logErrorAndStop(codeToText(QError_trackUseStore), obj);\n        }\n        if (prop) {\n            return obj[prop];\n        }\n        else if (isSignal(obj)) {\n            return obj.value;\n        }\n        else {\n            return obj;\n        }\n    };\n    const resourceTarget = unwrapProxy(resource);\n    const opts = {\n        track,\n        cleanup(callback) {\n            cleanups.push(callback);\n        },\n        cache(policy) {\n            let milliseconds = 0;\n            if (policy === 'immutable') {\n                milliseconds = Infinity;\n            }\n            else {\n                milliseconds = policy;\n            }\n            resource._cache = milliseconds;\n        },\n        previous: resourceTarget._resolved,\n    };\n    let resolve;\n    let reject;\n    let done = false;\n    const setState = (resolved, value) => {\n        if (!done) {\n            done = true;\n            if (resolved) {\n                done = true;\n                resource.loading = false;\n                resource._state = 'resolved';\n                resource._resolved = value;\n                resource._error = undefined;\n                resolve(value);\n            }\n            else {\n                done = true;\n                resource.loading = false;\n                resource._state = 'rejected';\n                resource._error = value;\n                reject(value);\n            }\n            return true;\n        }\n        return false;\n    };\n    // Execute mutation inside empty invocation\n    invoke(iCtx, () => {\n        resource._state = 'pending';\n        resource.loading = !isServerPlatform();\n        resource.value = new Promise((r, re) => {\n            resolve = r;\n            reject = re;\n        });\n    });\n    task.$destroy$ = noSerialize(() => {\n        done = true;\n        cleanups.forEach((fn) => fn());\n    });\n    const promise = safeCall(() => maybeThen(waitOn, () => taskFn(opts)), (value) => {\n        setState(true, value);\n    }, (reason) => {\n        setState(false, reason);\n    });\n    const timeout = resourceTarget._timeout;\n    if (timeout > 0) {\n        return Promise.race([\n            promise,\n            delay(timeout).then(() => {\n                if (setState(false, new Error('timeout'))) {\n                    cleanupTask(task);\n                }\n            }),\n        ]);\n    }\n    return promise;\n};\nexport const runTask = (task, containerState, rCtx) => {\n    task.$flags$ &= ~TaskFlagsIsDirty;\n    cleanupTask(task);\n    const hostElement = task.$el$;\n    const iCtx = newInvokeContext(rCtx.$static$.$locale$, hostElement, undefined, TaskEvent);\n    iCtx.$renderCtx$ = rCtx;\n    const { $subsManager$: subsManager } = containerState;\n    const taskFn = task.$qrl$.getFn(iCtx, () => {\n        subsManager.$clearSub$(task);\n    });\n    const track = (obj, prop) => {\n        if (isFunction(obj)) {\n            const ctx = newInvokeContext();\n            ctx.$subscriber$ = [0, task];\n            return invoke(ctx, obj);\n        }\n        const manager = getSubscriptionManager(obj);\n        if (manager) {\n            manager.$addSub$([0, task], prop);\n        }\n        else {\n            logErrorAndStop(codeToText(QError_trackUseStore), obj);\n        }\n        if (prop) {\n            return obj[prop];\n        }\n        else if (isSignal(obj)) {\n            return obj.value;\n        }\n        else {\n            return obj;\n        }\n    };\n    const cleanups = [];\n    task.$destroy$ = noSerialize(() => {\n        cleanups.forEach((fn) => fn());\n    });\n    const opts = {\n        track,\n        cleanup(callback) {\n            cleanups.push(callback);\n        },\n    };\n    return safeCall(() => taskFn(opts), (returnValue) => {\n        if (isFunction(returnValue)) {\n            cleanups.push(returnValue);\n        }\n    }, (reason) => {\n        handleError(reason, hostElement, rCtx);\n    });\n};\nexport const runComputed = (task, containerState, rCtx) => {\n    assertSignal(task.$state$);\n    task.$flags$ &= ~TaskFlagsIsDirty;\n    cleanupTask(task);\n    const hostElement = task.$el$;\n    const iCtx = newInvokeContext(rCtx.$static$.$locale$, hostElement, undefined, ComputedEvent);\n    iCtx.$subscriber$ = [0, task];\n    iCtx.$renderCtx$ = rCtx;\n    const { $subsManager$: subsManager } = containerState;\n    const taskFn = task.$qrl$.getFn(iCtx, () => {\n        subsManager.$clearSub$(task);\n    });\n    return safeCall(taskFn, (returnValue) => untrack(() => {\n        const signal = task.$state$;\n        signal[QObjectSignalFlags] &= ~SIGNAL_UNASSIGNED;\n        signal.untrackedValue = returnValue;\n        signal[QObjectManagerSymbol].$notifySubs$();\n    }), (reason) => {\n        handleError(reason, hostElement, rCtx);\n    });\n};\nexport const cleanupTask = (task) => {\n    const destroy = task.$destroy$;\n    if (destroy) {\n        task.$destroy$ = undefined;\n        try {\n            destroy();\n        }\n        catch (err) {\n            logError(err);\n        }\n    }\n};\nexport const destroyTask = (task) => {\n    if (task.$flags$ & TaskFlagsIsCleanup) {\n        task.$flags$ &= ~TaskFlagsIsCleanup;\n        const cleanup = task.$qrl$;\n        cleanup();\n    }\n    else {\n        cleanupTask(task);\n    }\n};\nconst useRunTask = (task, eagerness) => {\n    if (eagerness === 'visible' || eagerness === 'intersection-observer') {\n        useOn('qvisible', getTaskHandlerQrl(task));\n    }\n    else if (eagerness === 'load' || eagerness === 'document-ready') {\n        useOnDocument('qinit', getTaskHandlerQrl(task));\n    }\n    else if (eagerness === 'idle' || eagerness === 'document-idle') {\n        useOnDocument('qidle', getTaskHandlerQrl(task));\n    }\n};\nconst getTaskHandlerQrl = (task) => {\n    const taskQrl = task.$qrl$;\n    const taskHandler = createQRL(taskQrl.$chunk$, '_hW', _hW, null, null, [task], taskQrl.$symbol$);\n    return taskHandler;\n};\nexport const isTaskCleanup = (obj) => {\n    return isSubscriberDescriptor(obj) && !!(obj.$flags$ & TaskFlagsIsCleanup);\n};\nexport const isSubscriberDescriptor = (obj) => {\n    return isObject(obj) && obj instanceof Task;\n};\nexport const serializeTask = (task, getObjId) => {\n    let value = `${intToStr(task.$flags$)} ${intToStr(task.$index$)} ${getObjId(task.$qrl$)} ${getObjId(task.$el$)}`;\n    if (task.$state$) {\n        value += ` ${getObjId(task.$state$)}`;\n    }\n    return value;\n};\nexport const parseTask = (data) => {\n    const [flags, index, qrl, el, resource] = data.split(' ');\n    return new Task(strToInt(flags), strToInt(index), el, qrl, resource);\n};\nexport class Task {\n    constructor($flags$, $index$, $el$, $qrl$, $state$) {\n        this.$flags$ = $flags$;\n        this.$index$ = $index$;\n        this.$el$ = $el$;\n        this.$qrl$ = $qrl$;\n        this.$state$ = $state$;\n    }\n}\n//# sourceMappingURL=data:application/json;base64,","export function isTemplate(node) {\n    const tagName = (node && node.tagName) || '';\n    return tagName.toUpperCase() == 'TEMPLATE';\n}\nexport function prettyHtml(element, prefix = '') {\n    const lines = [];\n    lines.push(prefix, '<', element.localName);\n    const attrs = element.attributes;\n    for (let i = 0; i < attrs.length; i++) {\n        const attr = attrs[i];\n        lines.push('\\n', prefix, '    ', attr.name, '=\"', attr.value, '\"');\n    }\n    lines.push('>');\n    let child = isTemplate(element) ? element.content.firstChild : element.firstChild;\n    while (child) {\n        if (isElement(child)) {\n            lines.push('\\n', prettyHtml(child, prefix + '  '));\n        }\n        else {\n            lines.push('\\n', prefix, child.textContent);\n        }\n        child = child.nextSibling;\n    }\n    lines.push('\\n', prefix, '</', element.localName, '>');\n    return lines.join('');\n}\nexport function isElement(value) {\n    return isNode(value) && value.nodeType === 1;\n}\nexport function isNode(value) {\n    return value && typeof value.nodeType === 'number';\n}\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaHRtbC5qcyIsInNvdXJjZVJvb3QiOiIuLyIsInNvdXJjZXMiOlsicGFja2FnZXMvcXdpay9zcmMvdGVzdGluZy9odG1sLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE1BQU0sVUFBVSxVQUFVLENBQUMsSUFBNkI7SUFDdEQsTUFBTSxPQUFPLEdBQUcsQ0FBQyxJQUFJLElBQUssSUFBZ0IsQ0FBQyxPQUFPLENBQUMsSUFBSSxFQUFFLENBQUM7SUFDMUQsT0FBTyxPQUFPLENBQUMsV0FBVyxFQUFFLElBQUksVUFBVSxDQUFDO0FBQzdDLENBQUM7QUFFRCxNQUFNLFVBQVUsVUFBVSxDQUFDLE9BQW9CLEVBQUUsU0FBaUIsRUFBRTtJQUNsRSxNQUFNLEtBQUssR0FBRyxFQUFFLENBQUM7SUFDakIsS0FBSyxDQUFDLElBQUksQ0FBQyxNQUFNLEVBQUUsR0FBRyxFQUFFLE9BQU8sQ0FBQyxTQUFTLENBQUMsQ0FBQztJQUMzQyxNQUFNLEtBQUssR0FBRyxPQUFPLENBQUMsVUFBVSxDQUFDO0lBQ2pDLEtBQUssSUFBSSxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsR0FBRyxLQUFLLENBQUMsTUFBTSxFQUFFLENBQUMsRUFBRSxFQUFFLENBQUM7UUFDdEMsTUFBTSxJQUFJLEdBQUcsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDO1FBQ3RCLEtBQUssQ0FBQyxJQUFJLENBQUMsSUFBSSxFQUFFLE1BQU0sRUFBRSxNQUFNLEVBQUUsSUFBSSxDQUFDLElBQUksRUFBRSxJQUFJLEVBQUUsSUFBSSxDQUFDLEtBQUssRUFBRSxHQUFHLENBQUMsQ0FBQztJQUNyRSxDQUFDO0lBQ0QsS0FBSyxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQztJQUNoQixJQUFJLEtBQUssR0FBRyxVQUFVLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxPQUFPLENBQUMsVUFBVSxDQUFDLENBQUMsQ0FBQyxPQUFPLENBQUMsVUFBVSxDQUFDO0lBQ2xGLE9BQU8sS0FBSyxFQUFFLENBQUM7UUFDYixJQUFJLFNBQVMsQ0FBQyxLQUFLLENBQUMsRUFBRSxDQUFDO1lBQ3JCLEtBQUssQ0FBQyxJQUFJLENBQUMsSUFBSSxFQUFFLFVBQVUsQ0FBQyxLQUFLLEVBQUUsTUFBTSxHQUFHLElBQUksQ0FBQyxDQUFDLENBQUM7UUFDckQsQ0FBQzthQUFNLENBQUM7WUFDTixLQUFLLENBQUMsSUFBSSxDQUFDLElBQUksRUFBRSxNQUFNLEVBQUUsS0FBSyxDQUFDLFdBQVcsQ0FBQyxDQUFDO1FBQzlDLENBQUM7UUFDRCxLQUFLLEdBQUcsS0FBSyxDQUFDLFdBQVcsQ0FBQztJQUM1QixDQUFDO0lBQ0QsS0FBSyxDQUFDLElBQUksQ0FBQyxJQUFJLEVBQUUsTUFBTSxFQUFFLElBQUksRUFBRSxPQUFPLENBQUMsU0FBUyxFQUFFLEdBQUcsQ0FBQyxDQUFDO0lBQ3ZELE9BQU8sS0FBSyxDQUFDLElBQUksQ0FBQyxFQUFFLENBQUMsQ0FBQztBQUN4QixDQUFDO0FBRUQsTUFBTSxVQUFVLFNBQVMsQ0FBQyxLQUFVO0lBQ2xDLE9BQU8sTUFBTSxDQUFDLEtBQUssQ0FBQyxJQUFJLEtBQUssQ0FBQyxRQUFRLEtBQUssQ0FBQyxDQUFDO0FBQy9DLENBQUM7QUFFRCxNQUFNLFVBQVUsTUFBTSxDQUFDLEtBQVU7SUFDL0IsT0FBTyxLQUFLLElBQUksT0FBTyxLQUFLLENBQUMsUUFBUSxLQUFLLFFBQVEsQ0FBQztBQUNyRCxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiZXhwb3J0IGZ1bmN0aW9uIGlzVGVtcGxhdGUobm9kZTogTm9kZSB8IG51bGwgfCB1bmRlZmluZWQpOiBub2RlIGlzIEhUTUxUZW1wbGF0ZUVsZW1lbnQge1xuICBjb25zdCB0YWdOYW1lID0gKG5vZGUgJiYgKG5vZGUgYXMgRWxlbWVudCkudGFnTmFtZSkgfHwgJyc7XG4gIHJldHVybiB0YWdOYW1lLnRvVXBwZXJDYXNlKCkgPT0gJ1RFTVBMQVRFJztcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHByZXR0eUh0bWwoZWxlbWVudDogSFRNTEVsZW1lbnQsIHByZWZpeDogc3RyaW5nID0gJycpOiBhbnkge1xuICBjb25zdCBsaW5lcyA9IFtdO1xuICBsaW5lcy5wdXNoKHByZWZpeCwgJzwnLCBlbGVtZW50LmxvY2FsTmFtZSk7XG4gIGNvbnN0IGF0dHJzID0gZWxlbWVudC5hdHRyaWJ1dGVzO1xuICBmb3IgKGxldCBpID0gMDsgaSA8IGF0dHJzLmxlbmd0aDsgaSsrKSB7XG4gICAgY29uc3QgYXR0ciA9IGF0dHJzW2ldO1xuICAgIGxpbmVzLnB1c2goJ1xcbicsIHByZWZpeCwgJyAgICAnLCBhdHRyLm5hbWUsICc9XCInLCBhdHRyLnZhbHVlLCAnXCInKTtcbiAgfVxuICBsaW5lcy5wdXNoKCc+Jyk7XG4gIGxldCBjaGlsZCA9IGlzVGVtcGxhdGUoZWxlbWVudCkgPyBlbGVtZW50LmNvbnRlbnQuZmlyc3RDaGlsZCA6IGVsZW1lbnQuZmlyc3RDaGlsZDtcbiAgd2hpbGUgKGNoaWxkKSB7XG4gICAgaWYgKGlzRWxlbWVudChjaGlsZCkpIHtcbiAgICAgIGxpbmVzLnB1c2goJ1xcbicsIHByZXR0eUh0bWwoY2hpbGQsIHByZWZpeCArICcgICcpKTtcbiAgICB9IGVsc2Uge1xuICAgICAgbGluZXMucHVzaCgnXFxuJywgcHJlZml4LCBjaGlsZC50ZXh0Q29udGVudCk7XG4gICAgfVxuICAgIGNoaWxkID0gY2hpbGQubmV4dFNpYmxpbmc7XG4gIH1cbiAgbGluZXMucHVzaCgnXFxuJywgcHJlZml4LCAnPC8nLCBlbGVtZW50LmxvY2FsTmFtZSwgJz4nKTtcbiAgcmV0dXJuIGxpbmVzLmpvaW4oJycpO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gaXNFbGVtZW50KHZhbHVlOiBhbnkpOiB2YWx1ZSBpcyBIVE1MRWxlbWVudCB7XG4gIHJldHVybiBpc05vZGUodmFsdWUpICYmIHZhbHVlLm5vZGVUeXBlID09PSAxO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gaXNOb2RlKHZhbHVlOiBhbnkpOiB2YWx1ZSBpcyBOb2RlIHtcbiAgcmV0dXJuIHZhbHVlICYmIHR5cGVvZiB2YWx1ZS5ub2RlVHlwZSA9PT0gJ251bWJlcic7XG59XG4iXX0=","import { destroyTask } from '../use/use-task';\nimport { getProxyTarget } from './common';\nimport { getDomListeners } from './listeners';\nimport { seal } from '../util/qdev';\nimport { directGetAttribute } from '../render/fast-calls';\nimport { isElement } from '../../testing/html';\nimport { assertQwikElement } from '../error/assert';\nimport { QScopedStyle } from '../util/markers';\nimport { createPropsState, createProxy, setObjectFlags } from './store';\nimport { _IMMUTABLE, _IMMUTABLE_PREFIX, Q_CTX, QObjectImmutable } from './constants';\nexport const HOST_FLAG_DIRTY = 1 << 0;\nexport const HOST_FLAG_NEED_ATTACH_LISTENER = 1 << 1;\nexport const HOST_FLAG_MOUNTED = 1 << 2;\nexport const HOST_FLAG_DYNAMIC = 1 << 3;\nexport const HOST_REMOVED = 1 << 4;\nexport const tryGetContext = (element) => {\n    return element[Q_CTX];\n};\nexport const getContext = (el, containerState) => {\n    assertQwikElement(el);\n    const ctx = tryGetContext(el);\n    if (ctx) {\n        return ctx;\n    }\n    const elCtx = createContext(el);\n    const elementID = directGetAttribute(el, 'q:id');\n    if (elementID) {\n        const pauseCtx = containerState.$pauseCtx$;\n        elCtx.$id$ = elementID;\n        if (pauseCtx) {\n            const { getObject, meta, refs } = pauseCtx;\n            if (isElement(el)) {\n                const refMap = refs[elementID];\n                if (refMap) {\n                    elCtx.$refMap$ = refMap.split(' ').map(getObject);\n                    elCtx.li = getDomListeners(elCtx, containerState.$containerEl$);\n                }\n            }\n            else {\n                const styleIds = el.getAttribute(QScopedStyle);\n                elCtx.$scopeIds$ = styleIds ? styleIds.split('|') : null;\n                const ctxMeta = meta[elementID];\n                if (ctxMeta) {\n                    const seq = ctxMeta.s;\n                    const host = ctxMeta.h;\n                    const contexts = ctxMeta.c;\n                    const tasks = ctxMeta.w;\n                    if (seq) {\n                        elCtx.$seq$ = seq.split(' ').map(getObject);\n                    }\n                    if (tasks) {\n                        elCtx.$tasks$ = tasks.split(' ').map(getObject);\n                    }\n                    if (contexts) {\n                        elCtx.$contexts$ = new Map();\n                        for (const part of contexts.split(' ')) {\n                            const [key, value] = part.split('=');\n                            elCtx.$contexts$.set(key, getObject(value));\n                        }\n                    }\n                    // Restore sequence scoping\n                    if (host) {\n                        const [renderQrl, props] = host.split(' ');\n                        elCtx.$flags$ = HOST_FLAG_MOUNTED;\n                        if (renderQrl) {\n                            elCtx.$componentQrl$ = getObject(renderQrl);\n                        }\n                        if (props) {\n                            const propsObj = getObject(props);\n                            elCtx.$props$ = propsObj;\n                            setObjectFlags(propsObj, QObjectImmutable);\n                            propsObj[_IMMUTABLE] = getImmutableFromProps(propsObj);\n                        }\n                        else {\n                            elCtx.$props$ = createProxy(createPropsState(), containerState);\n                        }\n                    }\n                }\n            }\n        }\n    }\n    return elCtx;\n};\nconst getImmutableFromProps = (props) => {\n    const immutable = {};\n    const target = getProxyTarget(props);\n    for (const key in target) {\n        if (key.startsWith(_IMMUTABLE_PREFIX)) {\n            immutable[key.slice(_IMMUTABLE_PREFIX.length)] = target[key];\n        }\n    }\n    return immutable;\n};\nexport const createContext = (element) => {\n    const ctx = {\n        $flags$: 0,\n        $id$: '',\n        $element$: element,\n        $refMap$: [],\n        li: [],\n        $tasks$: null,\n        $seq$: null,\n        $slots$: null,\n        $scopeIds$: null,\n        $appendStyles$: null,\n        $props$: null,\n        $vdom$: null,\n        $componentQrl$: null,\n        $contexts$: null,\n        $dynamicSlots$: null,\n        $parentCtx$: undefined,\n    };\n    seal(ctx);\n    element[Q_CTX] = ctx;\n    return ctx;\n};\nexport const cleanupContext = (elCtx, subsManager) => {\n    elCtx.$tasks$?.forEach((task) => {\n        subsManager.$clearSub$(task);\n        destroyTask(task);\n    });\n    elCtx.$componentQrl$ = null;\n    elCtx.$seq$ = null;\n    elCtx.$tasks$ = null;\n};\n//# sourceMappingURL=data:application/json;base64,","import { tryGetInvokeContext } from './use-core';\nlet _locale = undefined;\n/**\n * Retrieve the current locale.\n *\n * If no current locale and there is no `defaultLocale` the function throws an error.\n *\n * @returns The locale.\n * @internal\n */\nexport function getLocale(defaultLocale) {\n    if (_locale === undefined) {\n        const ctx = tryGetInvokeContext();\n        if (ctx && ctx.$locale$) {\n            return ctx.$locale$;\n        }\n        if (defaultLocale !== undefined) {\n            return defaultLocale;\n        }\n        throw new Error('Reading `locale` outside of context.');\n    }\n    return _locale;\n}\n/**\n * Override the `getLocale` with `lang` within the `fn` execution.\n *\n * @internal\n */\nexport function withLocale(locale, fn) {\n    const previousLang = _locale;\n    try {\n        _locale = locale;\n        return fn();\n    }\n    finally {\n        _locale = previousLang;\n    }\n}\n/**\n * Globally set a lang.\n *\n * This can be used only in browser. Server execution requires that each request could potentially\n * be a different lang, therefore setting a global lang would produce incorrect responses.\n *\n * @param lang\n */\nexport function setLocale(locale) {\n    _locale = locale;\n}\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidXNlLWxvY2FsZS5qcyIsInNvdXJjZVJvb3QiOiIuLyIsInNvdXJjZXMiOlsicGFja2FnZXMvcXdpay9zcmMvY29yZS91c2UvdXNlLWxvY2FsZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsbUJBQW1CLEVBQUUsTUFBTSxZQUFZLENBQUM7QUFFakQsSUFBSSxPQUFPLEdBQXVCLFNBQVMsQ0FBQztBQUU1Qzs7Ozs7OztHQU9HO0FBQ0gsTUFBTSxVQUFVLFNBQVMsQ0FBQyxhQUFzQjtJQUM5QyxJQUFJLE9BQU8sS0FBSyxTQUFTLEVBQUUsQ0FBQztRQUMxQixNQUFNLEdBQUcsR0FBRyxtQkFBbUIsRUFBRSxDQUFDO1FBQ2xDLElBQUksR0FBRyxJQUFJLEdBQUcsQ0FBQyxRQUFRLEVBQUUsQ0FBQztZQUN4QixPQUFPLEdBQUcsQ0FBQyxRQUFRLENBQUM7UUFDdEIsQ0FBQztRQUNELElBQUksYUFBYSxLQUFLLFNBQVMsRUFBRSxDQUFDO1lBQ2hDLE9BQU8sYUFBYSxDQUFDO1FBQ3ZCLENBQUM7UUFDRCxNQUFNLElBQUksS0FBSyxDQUFDLHNDQUFzQyxDQUFDLENBQUM7SUFDMUQsQ0FBQztJQUNELE9BQU8sT0FBTyxDQUFDO0FBQ2pCLENBQUM7QUFFRDs7OztHQUlHO0FBQ0gsTUFBTSxVQUFVLFVBQVUsQ0FBSSxNQUFjLEVBQUUsRUFBVztJQUN2RCxNQUFNLFlBQVksR0FBRyxPQUFPLENBQUM7SUFDN0IsSUFBSSxDQUFDO1FBQ0gsT0FBTyxHQUFHLE1BQU0sQ0FBQztRQUNqQixPQUFPLEVBQUUsRUFBRSxDQUFDO0lBQ2QsQ0FBQztZQUFTLENBQUM7UUFDVCxPQUFPLEdBQUcsWUFBWSxDQUFDO0lBQ3pCLENBQUM7QUFDSCxDQUFDO0FBRUQ7Ozs7Ozs7R0FPRztBQUNILE1BQU0sVUFBVSxTQUFTLENBQUMsTUFBYztJQUN0QyxPQUFPLEdBQUcsTUFBTSxDQUFDO0FBQ25CLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyB0cnlHZXRJbnZva2VDb250ZXh0IH0gZnJvbSAnLi91c2UtY29yZSc7XG5cbmxldCBfbG9jYWxlOiBzdHJpbmcgfCB1bmRlZmluZWQgPSB1bmRlZmluZWQ7XG5cbi8qKlxuICogUmV0cmlldmUgdGhlIGN1cnJlbnQgbG9jYWxlLlxuICpcbiAqIElmIG5vIGN1cnJlbnQgbG9jYWxlIGFuZCB0aGVyZSBpcyBubyBgZGVmYXVsdExvY2FsZWAgdGhlIGZ1bmN0aW9uIHRocm93cyBhbiBlcnJvci5cbiAqXG4gKiBAcmV0dXJucyBUaGUgbG9jYWxlLlxuICogQGludGVybmFsXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBnZXRMb2NhbGUoZGVmYXVsdExvY2FsZT86IHN0cmluZyk6IHN0cmluZyB7XG4gIGlmIChfbG9jYWxlID09PSB1bmRlZmluZWQpIHtcbiAgICBjb25zdCBjdHggPSB0cnlHZXRJbnZva2VDb250ZXh0KCk7XG4gICAgaWYgKGN0eCAmJiBjdHguJGxvY2FsZSQpIHtcbiAgICAgIHJldHVybiBjdHguJGxvY2FsZSQ7XG4gICAgfVxuICAgIGlmIChkZWZhdWx0TG9jYWxlICE9PSB1bmRlZmluZWQpIHtcbiAgICAgIHJldHVybiBkZWZhdWx0TG9jYWxlO1xuICAgIH1cbiAgICB0aHJvdyBuZXcgRXJyb3IoJ1JlYWRpbmcgYGxvY2FsZWAgb3V0c2lkZSBvZiBjb250ZXh0LicpO1xuICB9XG4gIHJldHVybiBfbG9jYWxlO1xufVxuXG4vKipcbiAqIE92ZXJyaWRlIHRoZSBgZ2V0TG9jYWxlYCB3aXRoIGBsYW5nYCB3aXRoaW4gdGhlIGBmbmAgZXhlY3V0aW9uLlxuICpcbiAqIEBpbnRlcm5hbFxuICovXG5leHBvcnQgZnVuY3Rpb24gd2l0aExvY2FsZTxUPihsb2NhbGU6IHN0cmluZywgZm46ICgpID0+IFQpOiBUIHtcbiAgY29uc3QgcHJldmlvdXNMYW5nID0gX2xvY2FsZTtcbiAgdHJ5IHtcbiAgICBfbG9jYWxlID0gbG9jYWxlO1xuICAgIHJldHVybiBmbigpO1xuICB9IGZpbmFsbHkge1xuICAgIF9sb2NhbGUgPSBwcmV2aW91c0xhbmc7XG4gIH1cbn1cblxuLyoqXG4gKiBHbG9iYWxseSBzZXQgYSBsYW5nLlxuICpcbiAqIFRoaXMgY2FuIGJlIHVzZWQgb25seSBpbiBicm93c2VyLiBTZXJ2ZXIgZXhlY3V0aW9uIHJlcXVpcmVzIHRoYXQgZWFjaCByZXF1ZXN0IGNvdWxkIHBvdGVudGlhbGx5XG4gKiBiZSBhIGRpZmZlcmVudCBsYW5nLCB0aGVyZWZvcmUgc2V0dGluZyBhIGdsb2JhbCBsYW5nIHdvdWxkIHByb2R1Y2UgaW5jb3JyZWN0IHJlc3BvbnNlcy5cbiAqXG4gKiBAcGFyYW0gbGFuZ1xuICovXG5leHBvcnQgZnVuY3Rpb24gc2V0TG9jYWxlKGxvY2FsZTogc3RyaW5nKTogdm9pZCB7XG4gIF9sb2NhbGUgPSBsb2NhbGU7XG59XG4iXX0=","import { _getContainerState } from '../container/container';\nimport { assertDefined } from '../error/assert';\nimport { qError, QError_useInvokeContext, QError_useMethodOutsideContext } from '../error/error';\nimport { getContext, HOST_FLAG_DYNAMIC } from '../state/context';\nimport { ComputedEvent, QContainerSelector, QLocaleAttr, RenderEvent, ResourceEvent, TaskEvent, } from '../util/markers';\nimport { isPromise } from '../util/promises';\nimport { seal } from '../util/qdev';\nimport { isArray } from '../util/types';\nimport { setLocale } from './use-locale';\nlet _context;\n/** @public */\nexport const tryGetInvokeContext = () => {\n    if (!_context) {\n        const context = typeof document !== 'undefined' && document && document.__q_context__;\n        if (!context) {\n            return undefined;\n        }\n        if (isArray(context)) {\n            return (document.__q_context__ = newInvokeContextFromTuple(context));\n        }\n        return context;\n    }\n    return _context;\n};\nexport const getInvokeContext = () => {\n    const ctx = tryGetInvokeContext();\n    if (!ctx) {\n        throw qError(QError_useMethodOutsideContext);\n    }\n    return ctx;\n};\nexport const useInvokeContext = () => {\n    const ctx = tryGetInvokeContext();\n    if (!ctx || ctx.$event$ !== RenderEvent) {\n        throw qError(QError_useInvokeContext);\n    }\n    assertDefined(ctx.$hostElement$, `invoke: $hostElement$ must be defined`, ctx);\n    assertDefined(ctx.$waitOn$, `invoke: $waitOn$ must be defined`, ctx);\n    assertDefined(ctx.$renderCtx$, `invoke: $renderCtx$ must be defined`, ctx);\n    assertDefined(ctx.$subscriber$, `invoke: $subscriber$ must be defined`, ctx);\n    return ctx;\n};\nexport function useBindInvokeContext(fn) {\n    if (fn == null) {\n        return fn;\n    }\n    const ctx = getInvokeContext();\n    return function (...args) {\n        return (invokeApply).call(this, ctx, fn, args);\n    };\n}\n/** Call a function with the given InvokeContext and given arguments. */\nexport function invoke(context, fn, ...args) {\n    return invokeApply.call(this, context, fn, args);\n}\n/** Call a function with the given InvokeContext and array of arguments. */\nexport function invokeApply(context, fn, args) {\n    const previousContext = _context;\n    let returnValue;\n    try {\n        _context = context;\n        returnValue = fn.apply(this, args);\n    }\n    finally {\n        _context = previousContext;\n    }\n    return returnValue;\n}\nexport const waitAndRun = (ctx, callback) => {\n    const waitOn = ctx.$waitOn$;\n    if (waitOn.length === 0) {\n        const result = callback();\n        if (isPromise(result)) {\n            waitOn.push(result);\n        }\n    }\n    else {\n        waitOn.push(Promise.all(waitOn).then(callback));\n    }\n};\nexport const newInvokeContextFromTuple = ([element, event, url]) => {\n    const container = element.closest(QContainerSelector);\n    const locale = container?.getAttribute(QLocaleAttr) || undefined;\n    locale && setLocale(locale);\n    return newInvokeContext(locale, undefined, element, event, url);\n};\n// TODO how about putting url and locale (and event/custom?) in to a \"static\" object\nexport const newInvokeContext = (locale, hostElement, element, event, url) => {\n    const ctx = {\n        $url$: url,\n        $i$: 0,\n        $hostElement$: hostElement,\n        $element$: element,\n        $event$: event,\n        $qrl$: undefined,\n        $waitOn$: undefined,\n        $subscriber$: undefined,\n        $renderCtx$: undefined,\n        $locale$: locale,\n    };\n    seal(ctx);\n    return ctx;\n};\nexport const getWrappingContainer = (el) => {\n    return el.closest(QContainerSelector);\n};\n/**\n * Don't track listeners for this callback\n *\n * @public\n */\nexport const untrack = (fn) => {\n    return invoke(undefined, fn);\n};\nconst trackInvocation = /*#__PURE__*/ newInvokeContext(undefined, undefined, undefined, RenderEvent);\n/**\n * Mark sub as a listener for the signal\n *\n * @public\n */\nexport const trackSignal = (signal, sub) => {\n    trackInvocation.$subscriber$ = sub;\n    return invoke(trackInvocation, () => signal.value);\n};\n/** @internal */\nexport const _getContextElement = () => {\n    const iCtx = tryGetInvokeContext();\n    if (iCtx) {\n        return (iCtx.$element$ ?? iCtx.$hostElement$ ?? iCtx.$qrl$?.$setContainer$(undefined));\n    }\n};\n/** @internal */\nexport const _getContextEvent = () => {\n    const iCtx = tryGetInvokeContext();\n    if (iCtx) {\n        return iCtx.$event$;\n    }\n};\n/** @internal */\nexport const _jsxBranch = (input) => {\n    const iCtx = tryGetInvokeContext();\n    if (iCtx && iCtx.$hostElement$ && iCtx.$renderCtx$) {\n        const hostElement = iCtx.$hostElement$;\n        const elCtx = getContext(hostElement, iCtx.$renderCtx$.$static$.$containerState$);\n        elCtx.$flags$ |= HOST_FLAG_DYNAMIC;\n    }\n    return input;\n};\n/** @internal */\nexport const _waitUntilRendered = (elm) => {\n    const containerEl = getWrappingContainer(elm);\n    if (!containerEl) {\n        return Promise.resolve();\n    }\n    const containerState = _getContainerState(containerEl);\n    return containerState.$renderPromise$ ?? Promise.resolve();\n};\n//# sourceMappingURL=data:application/json;base64,","/** CSS properties which accept numbers but are not in units of \"px\". */\nconst unitlessNumbers = new Set([\n    'animationIterationCount',\n    'aspectRatio',\n    'borderImageOutset',\n    'borderImageSlice',\n    'borderImageWidth',\n    'boxFlex',\n    'boxFlexGroup',\n    'boxOrdinalGroup',\n    'columnCount',\n    'columns',\n    'flex',\n    'flexGrow',\n    'flexShrink',\n    'gridArea',\n    'gridRow',\n    'gridRowEnd',\n    'gridRowStart',\n    'gridColumn',\n    'gridColumnEnd',\n    'gridColumnStart',\n    'fontWeight',\n    'lineClamp',\n    'lineHeight',\n    'opacity',\n    'order',\n    'orphans',\n    'scale',\n    'tabSize',\n    'widows',\n    'zIndex',\n    'zoom',\n    'MozAnimationIterationCount', // Known Prefixed Properties\n    'MozBoxFlex', // TODO: Remove these since they shouldn't be used in modern code\n    'msFlex',\n    'msFlexPositive',\n    'WebkitAnimationIterationCount',\n    'WebkitBoxFlex',\n    'WebkitBoxOrdinalGroup',\n    'WebkitColumnCount',\n    'WebkitColumns',\n    'WebkitFlex',\n    'WebkitFlexGrow',\n    'WebkitFlexShrink',\n    'WebkitLineClamp',\n]);\nexport const isUnitlessNumber = (name) => {\n    return unitlessNumbers.has(name);\n};\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidW5pdGxlc3NfbnVtYmVyLmpzIiwic291cmNlUm9vdCI6Ii4vIiwic291cmNlcyI6WyJwYWNrYWdlcy9xd2lrL3NyYy9jb3JlL3V0aWwvdW5pdGxlc3NfbnVtYmVyLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLHdFQUF3RTtBQUN4RSxNQUFNLGVBQWUsR0FBRyxJQUFJLEdBQUcsQ0FBQztJQUM5Qix5QkFBeUI7SUFDekIsYUFBYTtJQUNiLG1CQUFtQjtJQUNuQixrQkFBa0I7SUFDbEIsa0JBQWtCO0lBQ2xCLFNBQVM7SUFDVCxjQUFjO0lBQ2QsaUJBQWlCO0lBQ2pCLGFBQWE7SUFDYixTQUFTO0lBQ1QsTUFBTTtJQUNOLFVBQVU7SUFDVixZQUFZO0lBQ1osVUFBVTtJQUNWLFNBQVM7SUFDVCxZQUFZO0lBQ1osY0FBYztJQUNkLFlBQVk7SUFDWixlQUFlO0lBQ2YsaUJBQWlCO0lBQ2pCLFlBQVk7SUFDWixXQUFXO0lBQ1gsWUFBWTtJQUNaLFNBQVM7SUFDVCxPQUFPO0lBQ1AsU0FBUztJQUNULE9BQU87SUFDUCxTQUFTO0lBQ1QsUUFBUTtJQUNSLFFBQVE7SUFDUixNQUFNO0lBQ04sNEJBQTRCLEVBQUUsNEJBQTRCO0lBQzFELFlBQVksRUFBRSxpRUFBaUU7SUFDL0UsUUFBUTtJQUNSLGdCQUFnQjtJQUNoQiwrQkFBK0I7SUFDL0IsZUFBZTtJQUNmLHVCQUF1QjtJQUN2QixtQkFBbUI7SUFDbkIsZUFBZTtJQUNmLFlBQVk7SUFDWixnQkFBZ0I7SUFDaEIsa0JBQWtCO0lBQ2xCLGlCQUFpQjtDQUNsQixDQUFDLENBQUM7QUFFSCxNQUFNLENBQUMsTUFBTSxnQkFBZ0IsR0FBRyxDQUFDLElBQVksRUFBVyxFQUFFO0lBQ3hELE9BQU8sZUFBZSxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsQ0FBQztBQUNuQyxDQUFDLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyIvKiogQ1NTIHByb3BlcnRpZXMgd2hpY2ggYWNjZXB0IG51bWJlcnMgYnV0IGFyZSBub3QgaW4gdW5pdHMgb2YgXCJweFwiLiAqL1xuY29uc3QgdW5pdGxlc3NOdW1iZXJzID0gbmV3IFNldChbXG4gICdhbmltYXRpb25JdGVyYXRpb25Db3VudCcsXG4gICdhc3BlY3RSYXRpbycsXG4gICdib3JkZXJJbWFnZU91dHNldCcsXG4gICdib3JkZXJJbWFnZVNsaWNlJyxcbiAgJ2JvcmRlckltYWdlV2lkdGgnLFxuICAnYm94RmxleCcsXG4gICdib3hGbGV4R3JvdXAnLFxuICAnYm94T3JkaW5hbEdyb3VwJyxcbiAgJ2NvbHVtbkNvdW50JyxcbiAgJ2NvbHVtbnMnLFxuICAnZmxleCcsXG4gICdmbGV4R3JvdycsXG4gICdmbGV4U2hyaW5rJyxcbiAgJ2dyaWRBcmVhJyxcbiAgJ2dyaWRSb3cnLFxuICAnZ3JpZFJvd0VuZCcsXG4gICdncmlkUm93U3RhcnQnLFxuICAnZ3JpZENvbHVtbicsXG4gICdncmlkQ29sdW1uRW5kJyxcbiAgJ2dyaWRDb2x1bW5TdGFydCcsXG4gICdmb250V2VpZ2h0JyxcbiAgJ2xpbmVDbGFtcCcsXG4gICdsaW5lSGVpZ2h0JyxcbiAgJ29wYWNpdHknLFxuICAnb3JkZXInLFxuICAnb3JwaGFucycsXG4gICdzY2FsZScsXG4gICd0YWJTaXplJyxcbiAgJ3dpZG93cycsXG4gICd6SW5kZXgnLFxuICAnem9vbScsXG4gICdNb3pBbmltYXRpb25JdGVyYXRpb25Db3VudCcsIC8vIEtub3duIFByZWZpeGVkIFByb3BlcnRpZXNcbiAgJ01vekJveEZsZXgnLCAvLyBUT0RPOiBSZW1vdmUgdGhlc2Ugc2luY2UgdGhleSBzaG91bGRuJ3QgYmUgdXNlZCBpbiBtb2Rlcm4gY29kZVxuICAnbXNGbGV4JyxcbiAgJ21zRmxleFBvc2l0aXZlJyxcbiAgJ1dlYmtpdEFuaW1hdGlvbkl0ZXJhdGlvbkNvdW50JyxcbiAgJ1dlYmtpdEJveEZsZXgnLFxuICAnV2Via2l0Qm94T3JkaW5hbEdyb3VwJyxcbiAgJ1dlYmtpdENvbHVtbkNvdW50JyxcbiAgJ1dlYmtpdENvbHVtbnMnLFxuICAnV2Via2l0RmxleCcsXG4gICdXZWJraXRGbGV4R3JvdycsXG4gICdXZWJraXRGbGV4U2hyaW5rJyxcbiAgJ1dlYmtpdExpbmVDbGFtcCcsXG5dKTtcblxuZXhwb3J0IGNvbnN0IGlzVW5pdGxlc3NOdW1iZXIgPSAobmFtZTogc3RyaW5nKTogYm9vbGVhbiA9PiB7XG4gIHJldHVybiB1bml0bGVzc051bWJlcnMuaGFzKG5hbWUpO1xufTtcbiJdfQ==","import { assertDefined } from '../error/assert';\nimport { RenderEvent } from '../util/markers';\nimport { maybeThen, promiseAllLazy, safeCall } from '../util/promises';\nimport { newInvokeContext } from '../use/use-core';\nimport { isArray, isFunction, isString } from '../util/types';\nimport { intToStr } from '../container/container';\nimport { fromCamelToKebabCase } from '../util/case';\nimport { qError, QError_stringifyClassOrStyle } from '../error/error';\nimport { seal } from '../util/qdev';\nimport { SkipRender } from './jsx/utils.public';\nimport { handleError } from './error-handling';\nimport { HOST_FLAG_DIRTY, HOST_FLAG_MOUNTED } from '../state/context';\nimport { isSignal, SignalUnassignedException } from '../state/signal';\nimport { isJSXNode } from './jsx/jsx-runtime';\nimport { isUnitlessNumber } from '../util/unitless_number';\nexport const executeComponent = (rCtx, elCtx) => {\n    elCtx.$flags$ &= ~HOST_FLAG_DIRTY;\n    elCtx.$flags$ |= HOST_FLAG_MOUNTED;\n    elCtx.$slots$ = [];\n    elCtx.li.length = 0;\n    const hostElement = elCtx.$element$;\n    const componentQRL = elCtx.$componentQrl$;\n    const props = elCtx.$props$;\n    const iCtx = newInvokeContext(rCtx.$static$.$locale$, hostElement, undefined, RenderEvent);\n    const waitOn = (iCtx.$waitOn$ = []);\n    assertDefined(componentQRL, `render: host element to render must have a $renderQrl$:`, elCtx);\n    assertDefined(props, `render: host element to render must have defined props`, elCtx);\n    // Set component context\n    const newCtx = pushRenderContext(rCtx);\n    newCtx.$cmpCtx$ = elCtx;\n    newCtx.$slotCtx$ = null;\n    // Invoke render hook\n    iCtx.$subscriber$ = [0, hostElement];\n    iCtx.$renderCtx$ = rCtx;\n    // Resolve render function\n    componentQRL.$setContainer$(rCtx.$static$.$containerState$.$containerEl$);\n    const componentFn = componentQRL.getFn(iCtx);\n    return safeCall(() => componentFn(props), (jsxNode) => {\n        return maybeThen(promiseAllLazy(waitOn), () => {\n            if (elCtx.$flags$ & HOST_FLAG_DIRTY) {\n                return executeComponent(rCtx, elCtx);\n            }\n            return {\n                node: jsxNode,\n                rCtx: newCtx,\n            };\n        });\n    }, (err) => {\n        if (err === SignalUnassignedException) {\n            return maybeThen(promiseAllLazy(waitOn), () => {\n                return executeComponent(rCtx, elCtx);\n            });\n        }\n        handleError(err, hostElement, rCtx);\n        return {\n            node: SkipRender,\n            rCtx: newCtx,\n        };\n    });\n};\nexport const createRenderContext = (doc, containerState) => {\n    const ctx = {\n        $static$: {\n            $doc$: doc,\n            $locale$: containerState.$serverData$.locale,\n            $containerState$: containerState,\n            $hostElements$: new Set(),\n            $operations$: [],\n            $postOperations$: [],\n            $roots$: [],\n            $addSlots$: [],\n            $rmSlots$: [],\n            $visited$: [],\n        },\n        $cmpCtx$: null,\n        $slotCtx$: null,\n    };\n    seal(ctx);\n    seal(ctx.$static$);\n    return ctx;\n};\nexport const pushRenderContext = (ctx) => {\n    const newCtx = {\n        $static$: ctx.$static$,\n        $cmpCtx$: ctx.$cmpCtx$,\n        $slotCtx$: ctx.$slotCtx$,\n    };\n    return newCtx;\n};\nexport const serializeClassWithHost = (obj, hostCtx) => {\n    if (hostCtx && hostCtx.$scopeIds$) {\n        return hostCtx.$scopeIds$.join(' ') + ' ' + serializeClass(obj);\n    }\n    return serializeClass(obj);\n};\nexport const serializeClass = (obj) => {\n    if (!obj) {\n        return '';\n    }\n    if (isString(obj)) {\n        return obj.trim();\n    }\n    const classes = [];\n    if (isArray(obj)) {\n        for (const o of obj) {\n            const classList = serializeClass(o);\n            if (classList) {\n                classes.push(classList);\n            }\n        }\n    }\n    else {\n        for (const [key, value] of Object.entries(obj)) {\n            if (value) {\n                classes.push(key.trim());\n            }\n        }\n    }\n    return classes.join(' ');\n};\nexport const stringifyStyle = (obj) => {\n    if (obj == null) {\n        return '';\n    }\n    if (typeof obj == 'object') {\n        if (isArray(obj)) {\n            throw qError(QError_stringifyClassOrStyle, obj, 'style');\n        }\n        else {\n            const chunks = [];\n            for (const key in obj) {\n                if (Object.prototype.hasOwnProperty.call(obj, key)) {\n                    const value = obj[key];\n                    if (value != null) {\n                        if (key.startsWith('--')) {\n                            chunks.push(key + ':' + value);\n                        }\n                        else {\n                            chunks.push(fromCamelToKebabCase(key) + ':' + setValueForStyle(key, value));\n                        }\n                    }\n                }\n            }\n            return chunks.join(';');\n        }\n    }\n    return String(obj);\n};\nconst setValueForStyle = (styleName, value) => {\n    if (typeof value === 'number' && value !== 0 && !isUnitlessNumber(styleName)) {\n        return value + 'px';\n    }\n    return value;\n};\nexport const getNextIndex = (ctx) => {\n    return intToStr(ctx.$static$.$containerState$.$elementIndex$++);\n};\nexport const setQId = (rCtx, elCtx) => {\n    const id = getNextIndex(rCtx);\n    elCtx.$id$ = id;\n};\nexport const jsxToString = (data) => {\n    if (isSignal(data)) {\n        return jsxToString(data.value);\n    }\n    return data == null || typeof data === 'boolean' ? '' : String(data);\n};\nexport function isAriaAttribute(prop) {\n    return prop.startsWith('aria-');\n}\nexport const shouldWrapFunctional = (res, node) => {\n    if (node.key) {\n        return !isJSXNode(res) || (!isFunction(res.type) && res.key != node.key);\n    }\n    return false;\n};\nexport const static_listeners = 1 << 0;\nexport const static_subtree = 1 << 1;\nexport const dangerouslySetInnerHTML = 'dangerouslySetInnerHTML';\n//# sourceMappingURL=data:application/json;base64,","import { getEventName, setRef } from '../../container/container';\nimport { assertDefined, assertElement, assertEqual, assertFail, assertQwikElement, assertTrue, } from '../../error/assert';\nimport { assertQrl, isQrl } from '../../qrl/qrl-class';\nimport { PREVENT_DEFAULT, isOnProp, setEvent } from '../../state/listeners';\nimport { isElement, isQwikElement, isText, isVirtualElement } from '../../util/element';\nimport { logWarn } from '../../util/log';\nimport { ELEMENT_ID, OnRenderProp, QSlot, QSlotRef, QSlotS, QStyle } from '../../util/markers';\nimport { isPromise, maybeThen, promiseAll, promiseAllLazy } from '../../util/promises';\nimport { qDev, qInspector, qTest } from '../../util/qdev';\nimport { dangerouslySetInnerHTML, isAriaAttribute, jsxToString, pushRenderContext, serializeClassWithHost, setQId, static_listeners, static_subtree, stringifyStyle, } from '../execute-component';\nimport { directGetAttribute, directSetAttribute } from '../fast-calls';\nimport { SKIP_RENDER_TYPE, isJSXNode } from '../jsx/jsx-runtime';\nimport { ProcessedJSXNodeImpl, getVdom, processData, renderComponent, } from './render-dom';\nimport { VIRTUAL, getRootNode, newVirtualElement, processVirtualNodes, queryAllVirtualByAttribute, } from './virtual-element';\nimport { isBrowser } from '@builder.io/qwik/build';\nimport { getProxyTarget, getSubscriptionManager, } from '../../state/common';\nimport { _IMMUTABLE, _IMMUTABLE_PREFIX } from '../../state/constants';\nimport { HOST_FLAG_DIRTY, HOST_FLAG_NEED_ATTACH_LISTENER, cleanupContext, createContext, getContext, tryGetContext, } from '../../state/context';\nimport { isSignal } from '../../state/signal';\nimport { ReadWriteProxyHandler, createPropsState, createProxy } from '../../state/store';\nimport { trackSignal } from '../../use/use-core';\nimport { EMPTY_OBJ } from '../../util/flyweight';\nimport { appendChild, createElement, createTemplate, executeDOMRender, getKey, insertAfter, insertBefore, prepend, removeNode, setAttribute, setKey, setProperty, setPropertyPost, } from './operations';\nexport const SVG_NS = 'http://www.w3.org/2000/svg';\nexport const IS_SVG = 1 << 0;\nexport const IS_HEAD = 1 << 1;\nexport const IS_IMMUTABLE = 1 << 2;\nconst CHILDREN_PLACEHOLDER = [];\nexport const smartUpdateChildren = (ctx, oldVnode, newVnode, flags) => {\n    assertQwikElement(oldVnode.$elm$);\n    const ch = newVnode.$children$;\n    if (ch.length === 1 && ch[0].$type$ === SKIP_RENDER_TYPE) {\n        newVnode.$children$ = oldVnode.$children$;\n        return;\n    }\n    const elm = oldVnode.$elm$;\n    const needsDOMRead = oldVnode.$children$ === CHILDREN_PLACEHOLDER;\n    let filter = isChildComponent;\n    if (needsDOMRead) {\n        const isHead = elm.nodeName === 'HEAD';\n        if (isHead) {\n            filter = isHeadChildren;\n            flags |= IS_HEAD;\n        }\n    }\n    const oldCh = getVnodeChildren(oldVnode, filter);\n    if (oldCh.length > 0 && ch.length > 0) {\n        return diffChildren(ctx, elm, oldCh, ch, flags);\n    }\n    else if (oldCh.length > 0 && ch.length === 0) {\n        return removeChildren(ctx.$static$, oldCh, 0, oldCh.length - 1);\n    }\n    else if (ch.length > 0) {\n        return addChildren(ctx, elm, null, ch, 0, ch.length - 1, flags);\n    }\n};\nexport const getVnodeChildren = (oldVnode, filter) => {\n    const oldCh = oldVnode.$children$;\n    const elm = oldVnode.$elm$;\n    if (oldCh === CHILDREN_PLACEHOLDER) {\n        return (oldVnode.$children$ = getChildrenVnodes(elm, filter));\n    }\n    return oldCh;\n};\nexport const diffChildren = (ctx, parentElm, oldCh, newCh, flags) => {\n    let oldStartIdx = 0;\n    let newStartIdx = 0;\n    let oldEndIdx = oldCh.length - 1;\n    let oldStartVnode = oldCh[0];\n    let oldEndVnode = oldCh[oldEndIdx];\n    let newEndIdx = newCh.length - 1;\n    let newStartVnode = newCh[0];\n    let newEndVnode = newCh[newEndIdx];\n    let oldKeyToIdx;\n    let idxInOld;\n    let elmToMove;\n    const results = [];\n    const staticCtx = ctx.$static$;\n    while (oldStartIdx <= oldEndIdx && newStartIdx <= newEndIdx) {\n        if (oldStartVnode == null) {\n            oldStartVnode = oldCh[++oldStartIdx]; // Vnode might have been moved left\n        }\n        else if (oldEndVnode == null) {\n            oldEndVnode = oldCh[--oldEndIdx];\n        }\n        else if (newStartVnode == null) {\n            newStartVnode = newCh[++newStartIdx];\n        }\n        else if (newEndVnode == null) {\n            newEndVnode = newCh[--newEndIdx];\n        }\n        else if (oldStartVnode.$id$ === newStartVnode.$id$) {\n            results.push(diffVnode(ctx, oldStartVnode, newStartVnode, flags));\n            oldStartVnode = oldCh[++oldStartIdx];\n            newStartVnode = newCh[++newStartIdx];\n        }\n        else if (oldEndVnode.$id$ === newEndVnode.$id$) {\n            results.push(diffVnode(ctx, oldEndVnode, newEndVnode, flags));\n            oldEndVnode = oldCh[--oldEndIdx];\n            newEndVnode = newCh[--newEndIdx];\n        }\n        else if (oldStartVnode.$key$ && oldStartVnode.$id$ === newEndVnode.$id$) {\n            assertDefined(oldStartVnode.$elm$, 'oldStartVnode $elm$ must be defined');\n            assertDefined(oldEndVnode.$elm$, 'oldEndVnode $elm$ must be defined');\n            // Vnode moved right\n            results.push(diffVnode(ctx, oldStartVnode, newEndVnode, flags));\n            insertAfter(staticCtx, parentElm, oldStartVnode.$elm$, oldEndVnode.$elm$);\n            oldStartVnode = oldCh[++oldStartIdx];\n            newEndVnode = newCh[--newEndIdx];\n        }\n        else if (oldEndVnode.$key$ && oldEndVnode.$id$ === newStartVnode.$id$) {\n            assertDefined(oldStartVnode.$elm$, 'oldStartVnode $elm$ must be defined');\n            assertDefined(oldEndVnode.$elm$, 'oldEndVnode $elm$ must be defined');\n            // Vnode moved left\n            results.push(diffVnode(ctx, oldEndVnode, newStartVnode, flags));\n            insertBefore(staticCtx, parentElm, oldEndVnode.$elm$, oldStartVnode.$elm$);\n            oldEndVnode = oldCh[--oldEndIdx];\n            newStartVnode = newCh[++newStartIdx];\n        }\n        else {\n            if (oldKeyToIdx === undefined) {\n                oldKeyToIdx = createKeyToOldIdx(oldCh, oldStartIdx, oldEndIdx);\n            }\n            idxInOld = oldKeyToIdx[newStartVnode.$key$];\n            if (idxInOld === undefined) {\n                // New element\n                const newElm = createElm(ctx, newStartVnode, flags, results);\n                insertBefore(staticCtx, parentElm, newElm, oldStartVnode?.$elm$);\n            }\n            else {\n                elmToMove = oldCh[idxInOld];\n                if (elmToMove.$type$ !== newStartVnode.$type$) {\n                    const newElm = createElm(ctx, newStartVnode, flags, results);\n                    maybeThen(newElm, (newElm) => {\n                        insertBefore(staticCtx, parentElm, newElm, oldStartVnode?.$elm$);\n                    });\n                }\n                else {\n                    results.push(diffVnode(ctx, elmToMove, newStartVnode, flags));\n                    oldCh[idxInOld] = undefined;\n                    assertDefined(elmToMove.$elm$, 'elmToMove $elm$ must be defined');\n                    insertBefore(staticCtx, parentElm, elmToMove.$elm$, oldStartVnode.$elm$);\n                }\n            }\n            newStartVnode = newCh[++newStartIdx];\n        }\n    }\n    if (newStartIdx <= newEndIdx) {\n        const before = newCh[newEndIdx + 1] == null ? null : newCh[newEndIdx + 1].$elm$;\n        results.push(addChildren(ctx, parentElm, before, newCh, newStartIdx, newEndIdx, flags));\n    }\n    let wait = promiseAll(results);\n    if (oldStartIdx <= oldEndIdx) {\n        wait = maybeThen(wait, () => {\n            removeChildren(staticCtx, oldCh, oldStartIdx, oldEndIdx);\n        });\n    }\n    return wait;\n};\nexport const getChildren = (elm, filter) => {\n    const end = isVirtualElement(elm) ? elm.close : null;\n    const nodes = [];\n    let node = elm.firstChild;\n    while ((node = processVirtualNodes(node))) {\n        if (filter(node)) {\n            nodes.push(node);\n        }\n        node = node.nextSibling;\n        if (node === end) {\n            break;\n        }\n    }\n    return nodes;\n};\n// export const getChildren = (elm: QwikElement, mode: ChildrenMode): (Node | VirtualElement)[] => {\n//   // console.warn('DOM READ: getChildren()', elm);\n//   switch (mode) {\n//     case 'root':\n//       return getCh(elm, isChildComponent);\n//     case 'head':\n//       return getCh(elm, isHeadChildren);\n//     case 'elements':\n//       return getCh(elm, isNodeElement);\n//   }\n// };\nconst getChildrenVnodes = (elm, filter) => {\n    return getChildren(elm, filter).map(getVnodeFromEl);\n};\nexport const getVnodeFromEl = (el) => {\n    if (isElement(el)) {\n        return tryGetContext(el)?.$vdom$ ?? domToVnode(el);\n    }\n    return domToVnode(el);\n};\nexport const domToVnode = (node) => {\n    if (isQwikElement(node)) {\n        const t = new ProcessedJSXNodeImpl(node.localName, {}, null, CHILDREN_PLACEHOLDER, 0, getKey(node));\n        t.$elm$ = node;\n        return t;\n    }\n    else if (isText(node)) {\n        const t = new ProcessedJSXNodeImpl(node.nodeName, EMPTY_OBJ, null, CHILDREN_PLACEHOLDER, 0, null);\n        t.$text$ = node.data;\n        t.$elm$ = node;\n        return t;\n    }\n    assertFail('Invalid node type');\n};\nconst isHeadChildren = (node) => {\n    const type = node.nodeType;\n    if (type === 1) {\n        return node.hasAttribute('q:head');\n    }\n    return type === 111;\n};\nexport const isSlotTemplate = (node) => {\n    return node.nodeName === 'Q:TEMPLATE';\n};\nexport const isChildComponent = (node) => {\n    const type = node.nodeType;\n    if (type === 3 || type === 111) {\n        return true;\n    }\n    if (type !== 1) {\n        return false;\n    }\n    const nodeName = node.nodeName;\n    if (nodeName === 'Q:TEMPLATE') {\n        return false;\n    }\n    if (nodeName === 'HEAD') {\n        return node.hasAttribute('q:head');\n    }\n    if (nodeName === 'STYLE') {\n        return !node.hasAttribute(QStyle);\n    }\n    return true;\n};\nexport const splitChildren = (input) => {\n    const output = {};\n    for (const item of input) {\n        const key = getSlotName(item);\n        const node = output[key] ??\n            (output[key] = new ProcessedJSXNodeImpl(VIRTUAL, {\n                [QSlotS]: '',\n            }, null, [], 0, key));\n        node.$children$.push(item);\n    }\n    return output;\n};\nexport const diffVnode = (rCtx, oldVnode, newVnode, flags) => {\n    assertEqual(oldVnode.$type$, newVnode.$type$, 'old and new vnodes type must be the same');\n    assertEqual(oldVnode.$key$, newVnode.$key$, 'old and new vnodes key must be the same');\n    assertEqual(oldVnode.$id$, newVnode.$id$, 'old and new vnodes key must be the same');\n    const elm = oldVnode.$elm$;\n    const tag = newVnode.$type$;\n    const staticCtx = rCtx.$static$;\n    const containerState = staticCtx.$containerState$;\n    const currentComponent = rCtx.$cmpCtx$;\n    assertDefined(elm, 'while patching element must be defined');\n    assertDefined(currentComponent, 'while patching current component must be defined');\n    newVnode.$elm$ = elm;\n    // Render text nodes\n    if (tag === '#text') {\n        staticCtx.$visited$.push(elm);\n        const signal = newVnode.$signal$;\n        if (signal) {\n            newVnode.$text$ = jsxToString(trackSignal(signal, [4, currentComponent.$element$, signal, elm]));\n        }\n        setProperty(staticCtx, elm, 'data', newVnode.$text$);\n        return;\n    }\n    else if (tag === '#signal') {\n        return;\n    }\n    assertQwikElement(elm);\n    const props = newVnode.$props$;\n    const vnodeFlags = newVnode.$flags$;\n    const elCtx = getContext(elm, containerState);\n    if (tag !== VIRTUAL) {\n        // Track SVG state\n        let isSvg = (flags & IS_SVG) !== 0;\n        if (!isSvg && tag === 'svg') {\n            flags |= IS_SVG;\n            isSvg = true;\n        }\n        if (props !== EMPTY_OBJ) {\n            // elCtx.$vdom$ = newVnode;\n            if ((vnodeFlags & static_listeners) === 0) {\n                elCtx.li.length = 0;\n            }\n            const values = oldVnode.$props$;\n            newVnode.$props$ = values;\n            for (const prop in props) {\n                let newValue = props[prop];\n                if (prop === 'ref') {\n                    assertElement(elm);\n                    if (newValue !== undefined) {\n                        setRef(newValue, elm);\n                    }\n                    continue;\n                }\n                if (isOnProp(prop)) {\n                    const normalized = setEvent(elCtx.li, prop, newValue, containerState.$containerEl$);\n                    addQwikEvent(staticCtx, elm, normalized);\n                    continue;\n                }\n                if (isSignal(newValue)) {\n                    newValue = trackSignal(newValue, [1, currentComponent.$element$, newValue, elm, prop]);\n                }\n                if (prop === 'class') {\n                    newValue = serializeClassWithHost(newValue, currentComponent);\n                }\n                else if (prop === 'style') {\n                    newValue = stringifyStyle(newValue);\n                }\n                if (values[prop] !== newValue) {\n                    values[prop] = newValue;\n                    smartSetProperty(staticCtx, elm, prop, newValue, isSvg);\n                }\n            }\n        }\n        if (vnodeFlags & static_subtree) {\n            return;\n        }\n        if (isSvg && tag === 'foreignObject') {\n            flags &= ~IS_SVG;\n        }\n        const setsInnerHTML = props[dangerouslySetInnerHTML] !== undefined;\n        if (setsInnerHTML) {\n            if (qDev && newVnode.$children$.length > 0) {\n                logWarn('Node can not have children when innerHTML is set');\n            }\n            return;\n        }\n        if (tag === 'textarea') {\n            return;\n        }\n        return smartUpdateChildren(rCtx, oldVnode, newVnode, flags);\n    }\n    else if (OnRenderProp in props) {\n        const cmpProps = props.props;\n        setComponentProps(containerState, elCtx, cmpProps);\n        let needsRender = !!(elCtx.$flags$ & HOST_FLAG_DIRTY);\n        // TODO: review this corner case\n        if (!needsRender && !elCtx.$componentQrl$ && !elCtx.$element$.hasAttribute(ELEMENT_ID)) {\n            setQId(rCtx, elCtx);\n            elCtx.$componentQrl$ = cmpProps[OnRenderProp];\n            assertQrl(elCtx.$componentQrl$);\n            needsRender = true;\n        }\n        // Rendering of children of component is more complicated,\n        // since the children must be projected into the rendered slots\n        // In addition, nested children might need rerendering, if that's the case\n        // we need to render the nested component, and wait before projecting the content\n        // since otherwise we don't know where the slots\n        if (needsRender) {\n            return maybeThen(renderComponent(rCtx, elCtx, flags), () => renderContentProjection(rCtx, elCtx, newVnode, flags));\n        }\n        return renderContentProjection(rCtx, elCtx, newVnode, flags);\n    }\n    else if (QSlotS in props) {\n        assertDefined(currentComponent.$slots$, 'current component slots must be a defined array');\n        currentComponent.$slots$.push(newVnode);\n        return;\n    }\n    else if (dangerouslySetInnerHTML in props) {\n        setProperty(staticCtx, elm, 'innerHTML', props[dangerouslySetInnerHTML]);\n        return;\n    }\n    if (vnodeFlags & static_subtree) {\n        return;\n    }\n    return smartUpdateChildren(rCtx, oldVnode, newVnode, flags);\n};\nconst renderContentProjection = (rCtx, hostCtx, vnode, flags) => {\n    if (vnode.$flags$ & static_subtree) {\n        return;\n    }\n    const newChildren = vnode.$children$;\n    const staticCtx = rCtx.$static$;\n    const splittedNewChildren = splitChildren(newChildren);\n    const slotMaps = getSlotMap(hostCtx);\n    // Remove content from empty slots\n    for (const key in slotMaps.slots) {\n        if (!splittedNewChildren[key]) {\n            const slotEl = slotMaps.slots[key];\n            const oldCh = getChildrenVnodes(slotEl, isChildComponent);\n            if (oldCh.length > 0) {\n                // getVdom(slotEl).$children$ = [];\n                const slotCtx = tryGetContext(slotEl);\n                if (slotCtx && slotCtx.$vdom$) {\n                    slotCtx.$vdom$.$children$ = [];\n                }\n                removeChildren(staticCtx, oldCh, 0, oldCh.length - 1);\n            }\n        }\n    }\n    // Remove empty templates\n    for (const key in slotMaps.templates) {\n        const templateEl = slotMaps.templates[key];\n        if (templateEl && !splittedNewChildren[key]) {\n            slotMaps.templates[key] = undefined;\n            removeNode(staticCtx, templateEl);\n        }\n    }\n    // Render into slots\n    return promiseAll(Object.keys(splittedNewChildren).map((slotName) => {\n        const newVdom = splittedNewChildren[slotName];\n        const slotCtx = getSlotCtx(staticCtx, slotMaps, hostCtx, slotName, rCtx.$static$.$containerState$);\n        const oldVdom = getVdom(slotCtx);\n        const slotRctx = pushRenderContext(rCtx);\n        const slotEl = slotCtx.$element$;\n        slotRctx.$slotCtx$ = slotCtx;\n        slotCtx.$vdom$ = newVdom;\n        newVdom.$elm$ = slotEl;\n        let newFlags = flags & ~IS_SVG;\n        if (slotEl.isSvg) {\n            newFlags |= IS_SVG;\n        }\n        // const oldVdom = getVdom(slotCtx.$element$);\n        // const slotRctx = pushRenderContext(rCtx);\n        // slotRctx.$slotCtx$ = slotCtx;\n        // setVdom(slotCtx.$element$, newVdom);\n        const index = staticCtx.$addSlots$.findIndex((slot) => slot[0] === slotEl);\n        if (index >= 0) {\n            staticCtx.$addSlots$.splice(index, 1);\n        }\n        return smartUpdateChildren(slotRctx, oldVdom, newVdom, newFlags);\n    }));\n};\nconst addChildren = (ctx, parentElm, before, vnodes, startIdx, endIdx, flags) => {\n    const promises = [];\n    for (; startIdx <= endIdx; ++startIdx) {\n        const ch = vnodes[startIdx];\n        assertDefined(ch, 'render: node must be defined at index', startIdx, vnodes);\n        const elm = createElm(ctx, ch, flags, promises);\n        insertBefore(ctx.$static$, parentElm, elm, before);\n    }\n    return promiseAllLazy(promises);\n};\nconst removeChildren = (staticCtx, nodes, startIdx, endIdx) => {\n    for (; startIdx <= endIdx; ++startIdx) {\n        const ch = nodes[startIdx];\n        if (ch) {\n            assertDefined(ch.$elm$, 'vnode elm must be defined');\n            removeNode(staticCtx, ch.$elm$);\n        }\n    }\n};\nconst getSlotCtx = (staticCtx, slotMaps, hostCtx, slotName, containerState) => {\n    const slotEl = slotMaps.slots[slotName];\n    if (slotEl) {\n        return getContext(slotEl, containerState);\n    }\n    const templateEl = slotMaps.templates[slotName];\n    if (templateEl) {\n        return getContext(templateEl, containerState);\n    }\n    const template = createTemplate(staticCtx.$doc$, slotName);\n    const elCtx = createContext(template);\n    elCtx.$parentCtx$ = hostCtx;\n    prepend(staticCtx, hostCtx.$element$, template);\n    slotMaps.templates[slotName] = template;\n    return elCtx;\n};\nconst getSlotName = (node) => {\n    return node.$props$[QSlot] ?? '';\n};\nexport const createElm = (rCtx, vnode, flags, promises) => {\n    const tag = vnode.$type$;\n    const doc = rCtx.$static$.$doc$;\n    const currentComponent = rCtx.$cmpCtx$;\n    if (tag === '#text') {\n        return (vnode.$elm$ = doc.createTextNode(vnode.$text$));\n    }\n    if (tag === '#signal') {\n        const signal = vnode.$signal$;\n        assertDefined(signal, 'expecting signal here');\n        assertDefined(currentComponent, 'signals can not be used outside components');\n        const signalValue = signal.value;\n        if (isJSXNode(signalValue)) {\n            // convert signal value to ProcessedJSXNode\n            const processedSignal = processData(signalValue);\n            if (isSignal(processedSignal)) {\n                throw new Error('NOT IMPLEMENTED: Promise');\n            }\n            else if (Array.isArray(processedSignal)) {\n                throw new Error('NOT IMPLEMENTED: Array');\n            }\n            else {\n                // crate elements\n                const elm = createElm(rCtx, processedSignal, flags, promises);\n                // create subscription\n                trackSignal(signal, flags & IS_IMMUTABLE\n                    ? [3, elm, signal, elm]\n                    : [4, currentComponent.$element$, signal, elm]);\n                // update the vNode for future diff.\n                return (vnode.$elm$ = elm);\n            }\n        }\n        else {\n            // create element\n            const elm = doc.createTextNode(vnode.$text$);\n            elm.data = vnode.$text$ = jsxToString(signalValue);\n            // create subscription\n            trackSignal(signal, flags & IS_IMMUTABLE\n                ? [3, elm, signal, elm]\n                : [4, currentComponent.$element$, signal, elm]);\n            // update the vNode for future diff.\n            return (vnode.$elm$ = elm);\n        }\n    }\n    let elm;\n    let isSvg = !!(flags & IS_SVG);\n    if (!isSvg && tag === 'svg') {\n        flags |= IS_SVG;\n        isSvg = true;\n    }\n    const isVirtual = tag === VIRTUAL;\n    const props = vnode.$props$;\n    const staticCtx = rCtx.$static$;\n    const containerState = staticCtx.$containerState$;\n    if (isVirtual) {\n        elm = newVirtualElement(doc, isSvg);\n    }\n    else if (tag === 'head') {\n        elm = doc.head;\n        flags |= IS_HEAD;\n    }\n    else {\n        elm = createElement(doc, tag, isSvg);\n        flags &= ~IS_HEAD;\n    }\n    if (vnode.$flags$ & static_subtree) {\n        flags |= IS_IMMUTABLE;\n    }\n    vnode.$elm$ = elm;\n    const elCtx = createContext(elm);\n    elCtx.$parentCtx$ = rCtx.$slotCtx$ ?? rCtx.$cmpCtx$;\n    if (!isVirtual) {\n        if (qDev && qInspector) {\n            const dev = vnode.$dev$;\n            if (dev) {\n                directSetAttribute(elm, 'data-qwik-inspector', `${dev.fileName}:${dev.lineNumber}:${dev.columnNumber}`);\n            }\n        }\n        if (vnode.$immutableProps$) {\n            setProperties(staticCtx, elCtx, currentComponent, vnode.$immutableProps$, isSvg, true);\n        }\n        if (props !== EMPTY_OBJ) {\n            elCtx.$vdom$ = vnode;\n            vnode.$props$ = setProperties(staticCtx, elCtx, currentComponent, props, isSvg, false);\n        }\n        if (isSvg && tag === 'foreignObject') {\n            isSvg = false;\n            flags &= ~IS_SVG;\n        }\n        if (currentComponent) {\n            const scopedIds = currentComponent.$scopeIds$;\n            if (scopedIds) {\n                scopedIds.forEach((styleId) => {\n                    elm.classList.add(styleId);\n                });\n            }\n            if (currentComponent.$flags$ & HOST_FLAG_NEED_ATTACH_LISTENER) {\n                elCtx.li.push(...currentComponent.li);\n                currentComponent.$flags$ &= ~HOST_FLAG_NEED_ATTACH_LISTENER;\n            }\n        }\n        for (const listener of elCtx.li) {\n            addQwikEvent(staticCtx, elm, listener[0]);\n        }\n        const setsInnerHTML = props[dangerouslySetInnerHTML] !== undefined;\n        if (setsInnerHTML) {\n            if (qDev && vnode.$children$.length > 0) {\n                logWarn('Node can not have children when innerHTML is set');\n            }\n            return elm;\n        }\n        if (isSvg && tag === 'foreignObject') {\n            isSvg = false;\n            flags &= ~IS_SVG;\n        }\n    }\n    else if (OnRenderProp in props) {\n        const renderQRL = props[OnRenderProp];\n        assertQrl(renderQRL);\n        const target = createPropsState();\n        const manager = containerState.$subsManager$.$createManager$();\n        const proxy = new Proxy(target, new ReadWriteProxyHandler(containerState, manager));\n        const expectProps = props.props;\n        containerState.$proxyMap$.set(target, proxy);\n        elCtx.$props$ = proxy;\n        if (expectProps !== EMPTY_OBJ) {\n            const immutableMeta = (target[_IMMUTABLE] =\n                expectProps[_IMMUTABLE] ?? EMPTY_OBJ);\n            for (const prop in expectProps) {\n                if (prop !== 'children' && prop !== QSlot) {\n                    const immutableValue = immutableMeta[prop];\n                    if (isSignal(immutableValue)) {\n                        target[_IMMUTABLE_PREFIX + prop] = immutableValue;\n                    }\n                    else {\n                        target[prop] = expectProps[prop];\n                    }\n                }\n            }\n        }\n        setQId(rCtx, elCtx);\n        // Run mount hook\n        elCtx.$componentQrl$ = renderQRL;\n        const wait = maybeThen(renderComponent(rCtx, elCtx, flags), () => {\n            let children = vnode.$children$;\n            if (children.length === 0) {\n                return;\n            }\n            if (children.length === 1 && children[0].$type$ === SKIP_RENDER_TYPE) {\n                children = children[0].$children$;\n            }\n            const slotMap = getSlotMap(elCtx);\n            const p = [];\n            const splittedNewChildren = splitChildren(children);\n            for (const slotName in splittedNewChildren) {\n                const newVnode = splittedNewChildren[slotName];\n                const slotCtx = getSlotCtx(staticCtx, slotMap, elCtx, slotName, staticCtx.$containerState$);\n                const slotRctx = pushRenderContext(rCtx);\n                const slotEl = slotCtx.$element$;\n                slotRctx.$slotCtx$ = slotCtx;\n                slotCtx.$vdom$ = newVnode;\n                newVnode.$elm$ = slotEl;\n                let newFlags = flags & ~IS_SVG;\n                if (slotEl.isSvg) {\n                    newFlags |= IS_SVG;\n                }\n                for (const node of newVnode.$children$) {\n                    const nodeElm = createElm(slotRctx, node, newFlags, p);\n                    assertDefined(node.$elm$, 'vnode elm must be defined');\n                    assertEqual(nodeElm, node.$elm$, 'vnode elm must be defined');\n                    appendChild(staticCtx, slotEl, nodeElm);\n                }\n            }\n            return promiseAllLazy(p);\n        });\n        if (isPromise(wait)) {\n            promises.push(wait);\n        }\n        return elm;\n    }\n    else if (QSlotS in props) {\n        assertDefined(currentComponent, 'slot can only be used inside component');\n        assertDefined(currentComponent.$slots$, 'current component slots must be a defined array');\n        setKey(elm, vnode.$key$);\n        directSetAttribute(elm, QSlotRef, currentComponent.$id$);\n        directSetAttribute(elm, QSlotS, '');\n        currentComponent.$slots$.push(vnode);\n        staticCtx.$addSlots$.push([elm, currentComponent.$element$]);\n    }\n    else if (dangerouslySetInnerHTML in props) {\n        setProperty(staticCtx, elm, 'innerHTML', props[dangerouslySetInnerHTML]);\n        return elm;\n    }\n    let children = vnode.$children$;\n    if (children.length === 0) {\n        return elm;\n    }\n    if (children.length === 1 && children[0].$type$ === SKIP_RENDER_TYPE) {\n        children = children[0].$children$;\n    }\n    const nodes = children.map((ch) => createElm(rCtx, ch, flags, promises));\n    for (const node of nodes) {\n        directAppendChild(elm, node);\n    }\n    return elm;\n};\nconst getSlots = (elCtx) => {\n    const slots = elCtx.$slots$;\n    if (!slots) {\n        const parent = elCtx.$element$.parentElement;\n        assertDefined(parent, 'component should be already attached to the dom');\n        return (elCtx.$slots$ = readDOMSlots(elCtx));\n    }\n    return slots;\n};\nconst getSlotMap = (elCtx) => {\n    const slotsArray = getSlots(elCtx);\n    const slots = {};\n    const templates = {};\n    const t = Array.from(elCtx.$element$.childNodes).filter(isSlotTemplate);\n    // Map virtual slots\n    for (const vnode of slotsArray) {\n        assertQwikElement(vnode.$elm$);\n        slots[vnode.$key$ ?? ''] = vnode.$elm$;\n    }\n    // Map templates\n    for (const elm of t) {\n        templates[directGetAttribute(elm, QSlot) ?? ''] = elm;\n    }\n    return { slots, templates };\n};\nconst readDOMSlots = (elCtx) => {\n    const parent = elCtx.$element$.parentElement;\n    assertDefined(parent, 'component should be already attached to the dom');\n    return queryAllVirtualByAttribute(parent, QSlotRef, elCtx.$id$).map(domToVnode);\n};\nconst handleStyle = (ctx, elm, newValue) => {\n    setProperty(ctx, elm.style, 'cssText', newValue);\n    return true;\n};\nconst handleClass = (ctx, elm, newValue) => {\n    assertTrue(newValue == null || typeof newValue === 'string', 'class newValue must be either nullish or string', newValue);\n    if (elm.namespaceURI === SVG_NS) {\n        setAttribute(ctx, elm, 'class', newValue);\n    }\n    else {\n        setProperty(ctx, elm, 'className', newValue);\n    }\n    return true;\n};\nconst checkBeforeAssign = (ctx, elm, newValue, prop) => {\n    if (prop in elm) {\n        if (elm[prop] !== newValue) {\n            if (elm.tagName === 'SELECT') {\n                setPropertyPost(ctx, elm, prop, newValue);\n            }\n            else {\n                setProperty(ctx, elm, prop, newValue);\n            }\n        }\n    }\n    return true;\n};\nconst forceAttribute = (ctx, elm, newValue, prop) => {\n    setAttribute(ctx, elm, prop.toLowerCase(), newValue);\n    return true;\n};\nconst setInnerHTML = (ctx, elm, newValue) => {\n    setProperty(ctx, elm, 'innerHTML', newValue);\n    return true;\n};\nconst noop = () => {\n    return true;\n};\nexport const PROP_HANDLER_MAP = {\n    style: handleStyle,\n    class: handleClass,\n    value: checkBeforeAssign,\n    checked: checkBeforeAssign,\n    href: forceAttribute,\n    list: forceAttribute,\n    form: forceAttribute,\n    tabIndex: forceAttribute,\n    download: forceAttribute,\n    innerHTML: noop,\n    [dangerouslySetInnerHTML]: setInnerHTML,\n};\nexport const smartSetProperty = (staticCtx, elm, prop, newValue, isSvg) => {\n    // aria attribute value should be rendered as string\n    if (isAriaAttribute(prop)) {\n        setAttribute(staticCtx, elm, prop, newValue != null ? String(newValue) : newValue);\n        return;\n    }\n    // Check if its an exception\n    const exception = PROP_HANDLER_MAP[prop];\n    if (exception) {\n        if (exception(staticCtx, elm, newValue, prop)) {\n            return;\n        }\n    }\n    // Check if property in prototype\n    if (!isSvg && prop in elm) {\n        setProperty(staticCtx, elm, prop, newValue);\n        return;\n    }\n    if (prop.startsWith(PREVENT_DEFAULT)) {\n        registerQwikEvent(prop.slice(PREVENT_DEFAULT.length));\n    }\n    // Fallback to render attribute\n    setAttribute(staticCtx, elm, prop, newValue);\n};\nexport const areExactQRLs = (oldValue, newValue) => {\n    if (!isQrl(oldValue) || !isQrl(newValue) || oldValue.$hash$ !== newValue.$hash$) {\n        return false;\n    }\n    const cA = oldValue.$captureRef$;\n    const cB = newValue.$captureRef$;\n    if (cA && cB) {\n        return sameArrays(cA, cB);\n    }\n    return false;\n};\nexport const sameArrays = (a1, a2) => {\n    const len = a1.length;\n    if (len !== a2.length) {\n        return false;\n    }\n    for (let i = 0; i < len; i++) {\n        if (a1[i] !== a2[i]) {\n            return false;\n        }\n    }\n    return true;\n};\nexport const setProperties = (staticCtx, elCtx, hostCtx, newProps, isSvg, immutable) => {\n    const values = {};\n    const elm = elCtx.$element$;\n    for (const prop in newProps) {\n        let newValue = newProps[prop];\n        if (prop === 'ref') {\n            assertElement(elm);\n            if (newValue !== undefined) {\n                setRef(newValue, elm);\n            }\n            continue;\n        }\n        if (isOnProp(prop)) {\n            setEvent(elCtx.li, prop, newValue, staticCtx.$containerState$.$containerEl$);\n            continue;\n        }\n        if (isSignal(newValue)) {\n            assertDefined(hostCtx, 'Signals can only be used in components');\n            newValue = trackSignal(newValue, immutable\n                ? [1, elm, newValue, hostCtx.$element$, prop]\n                : [2, hostCtx.$element$, newValue, elm, prop]);\n        }\n        if (prop === 'class') {\n            if (qDev && values.class) {\n                throw new TypeError('Can only provide one of class or className');\n            }\n            newValue = serializeClassWithHost(newValue, hostCtx);\n            if (!newValue) {\n                continue;\n            }\n        }\n        else if (prop === 'style') {\n            newValue = stringifyStyle(newValue);\n        }\n        values[prop] = newValue;\n        smartSetProperty(staticCtx, elm, prop, newValue, isSvg);\n    }\n    return values;\n};\nexport const setComponentProps = (containerState, elCtx, expectProps) => {\n    let props = elCtx.$props$;\n    if (!props) {\n        elCtx.$props$ = props = createProxy(createPropsState(), containerState);\n    }\n    if (expectProps === EMPTY_OBJ) {\n        return;\n    }\n    const manager = getSubscriptionManager(props);\n    assertDefined(manager, `props have to be a proxy, but it is not`, props);\n    const target = getProxyTarget(props);\n    assertDefined(target, `props have to be a proxy, but it is not`, props);\n    const immutableMeta = (target[_IMMUTABLE] =\n        expectProps[_IMMUTABLE] ?? EMPTY_OBJ);\n    for (const prop in expectProps) {\n        if (prop !== 'children' && prop !== QSlot && !immutableMeta[prop]) {\n            const value = expectProps[prop];\n            if (target[prop] !== value) {\n                target[prop] = value;\n                manager.$notifySubs$(prop);\n            }\n        }\n    }\n};\nexport const cleanupTree = (elm, staticCtx, subsManager, stopSlots) => {\n    subsManager.$clearSub$(elm);\n    if (isQwikElement(elm)) {\n        if (stopSlots && elm.hasAttribute(QSlotS)) {\n            staticCtx.$rmSlots$.push(elm);\n            return;\n        }\n        const ctx = tryGetContext(elm);\n        if (ctx) {\n            cleanupContext(ctx, subsManager);\n        }\n        const end = isVirtualElement(elm) ? elm.close : null;\n        let node = elm.firstChild;\n        while ((node = processVirtualNodes(node))) {\n            cleanupTree(node, staticCtx, subsManager, true);\n            node = node.nextSibling;\n            if (node === end) {\n                break;\n            }\n        }\n    }\n};\nconst restoreScroll = () => {\n    if (document.__q_scroll_restore__) {\n        document.__q_scroll_restore__();\n        document.__q_scroll_restore__ = undefined;\n    }\n};\nexport const executeContextWithScrollAndTransition = async (ctx) => {\n    // try to use `document.startViewTransition`\n    if (isBrowser && !qTest) {\n        if (document.__q_view_transition__) {\n            document.__q_view_transition__ = undefined;\n            if (document.startViewTransition) {\n                await document.startViewTransition(() => {\n                    executeDOMRender(ctx);\n                    restoreScroll();\n                }).finished;\n                return;\n            }\n        }\n    }\n    // fallback\n    executeDOMRender(ctx);\n    if (isBrowser) {\n        restoreScroll();\n    }\n};\nexport const directAppendChild = (parent, child) => {\n    if (isVirtualElement(child)) {\n        child.appendTo(parent);\n    }\n    else {\n        parent.appendChild(child);\n    }\n};\nexport const directRemoveChild = (parent, child) => {\n    if (isVirtualElement(child)) {\n        child.remove();\n    }\n    else {\n        parent.removeChild(child);\n    }\n};\nexport const directInsertAfter = (parent, child, ref) => {\n    if (isVirtualElement(child)) {\n        child.insertBeforeTo(parent, ref?.nextSibling ?? null);\n    }\n    else {\n        parent.insertBefore(child, ref?.nextSibling ?? null);\n    }\n};\nexport const directInsertBefore = (parent, child, ref) => {\n    if (isVirtualElement(child)) {\n        child.insertBeforeTo(parent, getRootNode(ref));\n    }\n    else {\n        parent.insertBefore(child, getRootNode(ref));\n    }\n};\nconst createKeyToOldIdx = (children, beginIdx, endIdx) => {\n    const map = {};\n    for (let i = beginIdx; i <= endIdx; ++i) {\n        const child = children[i];\n        const key = child.$key$;\n        if (key != null) {\n            map[key] = i;\n        }\n    }\n    return map;\n};\nexport const addQwikEvent = (staticCtx, elm, prop) => {\n    if (!prop.startsWith('on:')) {\n        setAttribute(staticCtx, elm, prop, '');\n    }\n    registerQwikEvent(prop);\n};\nexport const registerQwikEvent = (prop) => {\n    var _a;\n    if (!qTest) {\n        const eventName = getEventName(prop);\n        try {\n            const qwikevents = ((_a = globalThis).qwikevents || (_a.qwikevents = []));\n            qwikevents.push(eventName);\n        }\n        catch (err) {\n            logWarn(err);\n        }\n    }\n};\n//# sourceMappingURL=data:application/json;base64,","import { assertDefined } from '../../error/assert';\nimport { codeToText, QError_setProperty } from '../../error/error';\nimport { getDocument } from '../../util/dom';\nimport { isElement, isNode, isQwikElement } from '../../util/element';\nimport { logDebug, logError, logWarn } from '../../util/log';\nimport { QSlot, QSlotRef, QStyle } from '../../util/markers';\nimport { qDev } from '../../util/qdev';\nimport { directGetAttribute, directSetAttribute } from '../fast-calls';\nimport { cleanupTree, directAppendChild, directInsertAfter, directInsertBefore, directRemoveChild, getChildren, isChildComponent, isSlotTemplate, SVG_NS, } from './visitor';\nexport const setAttribute = (staticCtx, el, prop, value) => {\n    staticCtx.$operations$.push({\n        $operation$: _setAttribute,\n        $args$: [el, prop, value],\n    });\n};\nconst _setAttribute = (el, prop, value) => {\n    if (value == null || value === false) {\n        el.removeAttribute(prop);\n    }\n    else {\n        const str = value === true ? '' : String(value);\n        directSetAttribute(el, prop, str);\n    }\n};\nexport const setProperty = (staticCtx, node, key, value) => {\n    staticCtx.$operations$.push({\n        $operation$: _setProperty,\n        $args$: [node, key, value],\n    });\n};\nexport const setPropertyPost = (staticCtx, node, key, value) => {\n    staticCtx.$postOperations$.push({\n        $operation$: _setProperty,\n        $args$: [node, key, value],\n    });\n};\nconst _setProperty = (node, key, value) => {\n    try {\n        node[key] = value == null ? '' : value;\n        if (value == null && isNode(node) && isElement(node)) {\n            node.removeAttribute(key);\n        }\n    }\n    catch (err) {\n        logError(codeToText(QError_setProperty), { node, key, value }, err);\n    }\n};\nexport const createElement = (doc, expectTag, isSvg) => {\n    const el = isSvg ? doc.createElementNS(SVG_NS, expectTag) : doc.createElement(expectTag);\n    return el;\n};\nexport const insertBefore = (staticCtx, parent, newChild, refChild) => {\n    staticCtx.$operations$.push({\n        $operation$: directInsertBefore,\n        $args$: [parent, newChild, refChild ? refChild : null],\n    });\n    return newChild;\n};\nexport const insertAfter = (staticCtx, parent, newChild, refChild) => {\n    staticCtx.$operations$.push({\n        $operation$: directInsertAfter,\n        $args$: [parent, newChild, refChild ? refChild : null],\n    });\n    return newChild;\n};\nexport const appendChild = (staticCtx, parent, newChild) => {\n    staticCtx.$operations$.push({\n        $operation$: directAppendChild,\n        $args$: [parent, newChild],\n    });\n    return newChild;\n};\nexport const appendHeadStyle = (staticCtx, styleTask) => {\n    staticCtx.$containerState$.$styleIds$.add(styleTask.styleId);\n    staticCtx.$postOperations$.push({\n        $operation$: _appendHeadStyle,\n        $args$: [staticCtx.$containerState$, styleTask],\n    });\n};\nexport const setClasslist = (staticCtx, elm, toRemove, toAdd) => {\n    staticCtx.$operations$.push({\n        $operation$: _setClasslist,\n        $args$: [elm, toRemove, toAdd],\n    });\n};\nexport const _setClasslist = (elm, toRemove, toAdd) => {\n    const classList = elm.classList;\n    classList.remove(...toRemove);\n    classList.add(...toAdd);\n};\nexport const _appendHeadStyle = (containerState, styleTask) => {\n    const containerEl = containerState.$containerEl$;\n    const doc = getDocument(containerEl);\n    const isDoc = doc.documentElement === containerEl;\n    const headEl = doc.head;\n    const style = doc.createElement('style');\n    if (isDoc && !headEl) {\n        logWarn('document.head is undefined');\n    }\n    directSetAttribute(style, QStyle, styleTask.styleId);\n    directSetAttribute(style, 'hidden', '');\n    style.textContent = styleTask.content;\n    if (isDoc && headEl) {\n        directAppendChild(headEl, style);\n    }\n    else {\n        directInsertBefore(containerEl, style, containerEl.firstChild);\n    }\n};\nexport const prepend = (staticCtx, parent, newChild) => {\n    staticCtx.$operations$.push({\n        $operation$: directPrepend,\n        $args$: [parent, newChild],\n    });\n};\nexport const directPrepend = (parent, newChild) => {\n    directInsertBefore(parent, newChild, parent.firstChild);\n};\nexport const removeNode = (staticCtx, el) => {\n    if (isQwikElement(el)) {\n        const subsManager = staticCtx.$containerState$.$subsManager$;\n        cleanupTree(el, staticCtx, subsManager, true);\n    }\n    staticCtx.$operations$.push({\n        $operation$: _removeNode,\n        $args$: [el, staticCtx],\n    });\n};\nconst _removeNode = (el, staticCtx) => {\n    const parent = el.parentElement;\n    if (parent) {\n        directRemoveChild(parent, el);\n    }\n    else if (qDev) {\n        logWarn('Trying to remove component already removed', el);\n    }\n};\nexport const createTemplate = (doc, slotName) => {\n    const template = createElement(doc, 'q:template', false);\n    directSetAttribute(template, QSlot, slotName);\n    directSetAttribute(template, 'hidden', '');\n    directSetAttribute(template, 'aria-hidden', 'true');\n    return template;\n};\nexport const executeDOMRender = (staticCtx) => {\n    for (const op of staticCtx.$operations$) {\n        // PERF(misko): polymorphic execution\n        op.$operation$.apply(undefined, op.$args$);\n    }\n    resolveSlotProjection(staticCtx);\n};\nexport const getKey = (el) => {\n    return directGetAttribute(el, 'q:key');\n};\nexport const setKey = (el, key) => {\n    if (key !== null) {\n        directSetAttribute(el, 'q:key', key);\n    }\n};\nexport const resolveSlotProjection = (staticCtx) => {\n    // Slots removed\n    const subsManager = staticCtx.$containerState$.$subsManager$;\n    for (const slotEl of staticCtx.$rmSlots$) {\n        const key = getKey(slotEl);\n        assertDefined(key, 'slots must have a key');\n        const slotChildren = getChildren(slotEl, isChildComponent);\n        if (slotChildren.length > 0) {\n            const sref = slotEl.getAttribute(QSlotRef);\n            const hostCtx = staticCtx.$roots$.find((r) => r.$id$ === sref);\n            if (hostCtx) {\n                const hostElm = hostCtx.$element$;\n                if (hostElm.isConnected) {\n                    const hasTemplate = getChildren(hostElm, isSlotTemplate).some((node) => directGetAttribute(node, QSlot) === key);\n                    if (!hasTemplate) {\n                        const template = createTemplate(staticCtx.$doc$, key);\n                        for (const child of slotChildren) {\n                            directAppendChild(template, child);\n                        }\n                        directInsertBefore(hostElm, template, hostElm.firstChild);\n                    }\n                    else {\n                        cleanupTree(slotEl, staticCtx, subsManager, false);\n                    }\n                }\n                else {\n                    cleanupTree(slotEl, staticCtx, subsManager, false);\n                }\n            }\n            else {\n                // If slot content cannot be relocated, it means it's content is definitely removed\n                // Cleanup needs to be executed\n                cleanupTree(slotEl, staticCtx, subsManager, false);\n            }\n        }\n    }\n    // Slots added\n    for (const [slotEl, hostElm] of staticCtx.$addSlots$) {\n        const key = getKey(slotEl);\n        assertDefined(key, 'slots must have a key');\n        const template = getChildren(hostElm, isSlotTemplate).find((node) => {\n            return node.getAttribute(QSlot) === key;\n        });\n        if (template) {\n            getChildren(template, isChildComponent).forEach((child) => {\n                directAppendChild(slotEl, child);\n            });\n            template.remove();\n        }\n    }\n};\nexport const printRenderStats = (staticCtx) => {\n    if (qDev) {\n        if (typeof window !== 'undefined' && window.document != null) {\n            const byOp = {};\n            for (const op of staticCtx.$operations$) {\n                byOp[op.$operation$.name] = (byOp[op.$operation$.name] ?? 0) + 1;\n            }\n            const stats = {\n                byOp,\n                roots: staticCtx.$roots$.map((ctx) => ctx.$element$),\n                hostElements: Array.from(staticCtx.$hostElements$),\n                operations: staticCtx.$operations$.map((v) => [v.$operation$.name, ...v.$args$]),\n            };\n            const noOps = staticCtx.$operations$.length === 0;\n            logDebug('Render stats.', noOps ? 'No operations' : '', stats);\n        }\n    }\n};\n//# sourceMappingURL=data:application/json;base64,","import { assertEqual, assertFail, assertTrue } from '../../error/assert';\nimport { VIRTUAL_SYMBOL } from '../../state/constants';\nimport { isComment, isElement, isNodeElement, isQwikElement, isVirtualElement, } from '../../util/element';\nimport { qSerialize, seal } from '../../util/qdev';\nimport { directGetAttribute } from '../fast-calls';\nimport { createElement } from './operations';\nimport { SVG_NS, getChildren } from './visitor';\nexport const newVirtualElement = (doc, isSvg) => {\n    const open = doc.createComment('qv ');\n    const close = doc.createComment('/qv');\n    return new VirtualElementImpl(open, close, isSvg);\n};\nexport const parseVirtualAttributes = (str) => {\n    if (!str) {\n        return {};\n    }\n    const attributes = str.split(' ');\n    return Object.fromEntries(attributes.map((attr) => {\n        const index = attr.indexOf('=');\n        if (index >= 0) {\n            return [attr.slice(0, index), unescape(attr.slice(index + 1))];\n        }\n        else {\n            return [attr, ''];\n        }\n    }));\n};\nexport const serializeVirtualAttributes = (map) => {\n    const attributes = [];\n    Object.entries(map).forEach(([key, value]) => {\n        if (!value) {\n            attributes.push(`${key}`);\n        }\n        else {\n            attributes.push(`${key}=${escape(value)}`);\n        }\n    });\n    return attributes.join(' ');\n};\nconst SHOW_COMMENT = 128;\nconst FILTER_ACCEPT = 1;\nconst FILTER_REJECT = 2;\nexport const walkerVirtualByAttribute = (el, prop, value) => {\n    return el.ownerDocument.createTreeWalker(el, SHOW_COMMENT, {\n        acceptNode(c) {\n            const virtual = getVirtualElement(c);\n            if (virtual) {\n                return directGetAttribute(virtual, prop) === value ? FILTER_ACCEPT : FILTER_REJECT;\n            }\n            return FILTER_REJECT;\n        },\n    });\n};\nexport const queryVirtualByAttribute = (el, prop, value) => {\n    const walker = walkerVirtualByAttribute(el, prop, value);\n    const open = walker.firstChild();\n    if (open) {\n        return getVirtualElement(open);\n    }\n    return null;\n};\nexport const queryAllVirtualByAttribute = (el, prop, value) => {\n    const walker = walkerVirtualByAttribute(el, prop, value);\n    const pars = [];\n    let currentNode = null;\n    while ((currentNode = walker.nextNode())) {\n        pars.push(getVirtualElement(currentNode));\n    }\n    return pars;\n};\nexport const escape = (s) => {\n    return s.replace(/ /g, '+');\n};\nexport const unescape = (s) => {\n    return s.replace(/\\+/g, ' ');\n};\nexport const VIRTUAL = ':virtual';\nexport class VirtualElementImpl {\n    constructor(open, close, isSvg) {\n        this.open = open;\n        this.close = close;\n        this.isSvg = isSvg;\n        this._qc_ = null;\n        this.nodeType = 111;\n        this.localName = VIRTUAL;\n        this.nodeName = VIRTUAL;\n        const doc = (this.ownerDocument = open.ownerDocument);\n        this.$template$ = createElement(doc, 'template', false);\n        this.$attributes$ = parseVirtualAttributes(open.data.slice(3));\n        assertTrue(open.data.startsWith('qv '), 'comment is not a qv');\n        open[VIRTUAL_SYMBOL] = this;\n        close[VIRTUAL_SYMBOL] = this;\n        seal(this);\n    }\n    insertBefore(node, ref) {\n        const parent = this.parentElement;\n        if (parent) {\n            const ref2 = ref ? ref : this.close;\n            parent.insertBefore(node, ref2);\n        }\n        else {\n            this.$template$.insertBefore(node, ref);\n        }\n        return node;\n    }\n    remove() {\n        const parent = this.parentElement;\n        if (parent) {\n            const ch = this.childNodes;\n            assertEqual(this.$template$.childElementCount, 0, 'children should be empty');\n            parent.removeChild(this.open);\n            for (let i = 0; i < ch.length; i++) {\n                this.$template$.appendChild(ch[i]);\n            }\n            parent.removeChild(this.close);\n        }\n    }\n    appendChild(node) {\n        return this.insertBefore(node, null);\n    }\n    insertBeforeTo(newParent, child) {\n        // const ch = this.childNodes;\n        const ch = this.childNodes;\n        // TODO\n        // if (this.parentElement) {\n        //   console.warn('already attached');\n        // }\n        newParent.insertBefore(this.open, child);\n        for (const c of ch) {\n            newParent.insertBefore(c, child);\n        }\n        newParent.insertBefore(this.close, child);\n        assertEqual(this.$template$.childElementCount, 0, 'children should be empty');\n    }\n    appendTo(newParent) {\n        this.insertBeforeTo(newParent, null);\n    }\n    get namespaceURI() {\n        return this.parentElement?.namespaceURI ?? '';\n    }\n    removeChild(child) {\n        if (this.parentElement) {\n            this.parentElement.removeChild(child);\n        }\n        else {\n            this.$template$.removeChild(child);\n        }\n    }\n    getAttribute(prop) {\n        return this.$attributes$[prop] ?? null;\n    }\n    hasAttribute(prop) {\n        return prop in this.$attributes$;\n    }\n    setAttribute(prop, value) {\n        this.$attributes$[prop] = value;\n        if (qSerialize) {\n            this.open.data = updateComment(this.$attributes$);\n        }\n    }\n    removeAttribute(prop) {\n        delete this.$attributes$[prop];\n        if (qSerialize) {\n            this.open.data = updateComment(this.$attributes$);\n        }\n    }\n    matches(_) {\n        return false;\n    }\n    compareDocumentPosition(other) {\n        return this.open.compareDocumentPosition(other);\n    }\n    closest(query) {\n        const parent = this.parentElement;\n        if (parent) {\n            return parent.closest(query);\n        }\n        return null;\n    }\n    querySelectorAll(query) {\n        const result = [];\n        const ch = getChildren(this, isNodeElement);\n        ch.forEach((el) => {\n            if (isQwikElement(el)) {\n                if (el.matches(query)) {\n                    result.push(el);\n                }\n                result.concat(Array.from(el.querySelectorAll(query)));\n            }\n        });\n        return result;\n    }\n    querySelector(query) {\n        for (const el of this.childNodes) {\n            if (isElement(el)) {\n                if (el.matches(query)) {\n                    return el;\n                }\n                const v = el.querySelector(query);\n                if (v !== null) {\n                    return v;\n                }\n            }\n        }\n        return null;\n    }\n    get innerHTML() {\n        return '';\n    }\n    set innerHTML(html) {\n        const parent = this.parentElement;\n        if (parent) {\n            this.childNodes.forEach((a) => this.removeChild(a));\n            this.$template$.innerHTML = html;\n            parent.insertBefore(this.$template$.content, this.close);\n        }\n        else {\n            this.$template$.innerHTML = html;\n        }\n    }\n    get firstChild() {\n        if (this.parentElement) {\n            const first = this.open.nextSibling;\n            if (first === this.close) {\n                return null;\n            }\n            return first;\n        }\n        else {\n            return this.$template$.firstChild;\n        }\n    }\n    get nextSibling() {\n        return this.close.nextSibling;\n    }\n    get previousSibling() {\n        return this.open.previousSibling;\n    }\n    get childNodes() {\n        if (!this.parentElement) {\n            return Array.from(this.$template$.childNodes);\n        }\n        const nodes = [];\n        let node = this.open;\n        while ((node = node.nextSibling)) {\n            if (node === this.close) {\n                break;\n            }\n            nodes.push(node);\n        }\n        return nodes;\n    }\n    get isConnected() {\n        return this.open.isConnected;\n    }\n    /** The DOM parent element (not the vDOM parent, use findVirtual for that) */\n    get parentElement() {\n        return this.open.parentElement;\n    }\n}\nconst updateComment = (attributes) => {\n    return `qv ${serializeVirtualAttributes(attributes)}`;\n};\nexport const processVirtualNodes = (node) => {\n    if (node == null) {\n        return null;\n    }\n    if (isComment(node)) {\n        const virtual = getVirtualElement(node);\n        if (virtual) {\n            return virtual;\n        }\n    }\n    return node;\n};\nconst findClose = (open) => {\n    let node = open;\n    let stack = 1;\n    while ((node = node.nextSibling)) {\n        if (isComment(node)) {\n            // We don't want to resume virtual nodes but if they're already resumed, use them\n            const virtual = node[VIRTUAL_SYMBOL];\n            if (virtual) {\n                // This is not our existing virtual node because otherwise findClose wouldn't have been called\n                node = virtual;\n            }\n            else if (node.data.startsWith('qv ')) {\n                stack++;\n            }\n            else if (node.data === '/qv') {\n                stack--;\n                if (stack === 0) {\n                    return node;\n                }\n            }\n        }\n    }\n    assertFail('close not found');\n};\nexport const getVirtualElement = (open) => {\n    const virtual = open[VIRTUAL_SYMBOL];\n    if (virtual) {\n        return virtual;\n    }\n    if (open.data.startsWith('qv ')) {\n        const close = findClose(open);\n        return new VirtualElementImpl(open, close, open.parentElement?.namespaceURI === SVG_NS);\n    }\n    return null;\n};\nexport const getRootNode = (node) => {\n    if (node == null) {\n        return null; // TODO\n    }\n    if (isVirtualElement(node)) {\n        return node.open;\n    }\n    else {\n        return node;\n    }\n};\n//# sourceMappingURL=data:application/json;base64,","import { assertDefined, assertElement, assertEqual } from '../error/assert';\nimport { getDocument } from '../util/dom';\nimport { isComment, isDocument, isElement, isNode, isQwikElement, isText, isVirtualElement, } from '../util/element';\nimport { logWarn } from '../util/log';\nimport { ELEMENT_ID, ELEMENT_ID_PREFIX, QContainerAttr, QScopedStyle } from '../util/markers';\nimport { qDev } from '../util/qdev';\nimport { QError_containerAlreadyPaused, QError_missingObjectId, QError_verifySerializable, qError, } from '../error/error';\nimport { serializeQRLs } from '../qrl/qrl';\nimport { processVirtualNodes, } from '../render/dom/virtual-element';\nimport { directGetAttribute, directSetAttribute } from '../render/fast-calls';\nimport { LocalSubscriptionManager, fastSkipSerialize, fastWeakSerialize, getProxyFlags, getProxyTarget, getSubscriptionManager, isConnected, serializeSubscription, } from '../state/common';\nimport { QObjectImmutable, QObjectRecursive } from '../state/constants';\nimport { HOST_FLAG_DYNAMIC, tryGetContext } from '../state/context';\nimport { groupListeners } from '../state/listeners';\nimport { SignalImpl } from '../state/signal';\nimport { serializeSStyle } from '../style/qrl-styles';\nimport { TaskFlagsIsDirty, destroyTask, isResourceTask, } from '../use/use-task';\nimport { isNotNullable, isPromise } from '../util/promises';\nimport { isArray, isObject, isSerializableObject } from '../util/types';\nimport { FILTER_REJECT, FILTER_SKIP, SHOW_COMMENT, SHOW_ELEMENT, _getContainerState, intToStr, } from './container';\nimport { UNDEFINED_PREFIX, collectDeps, serializeValue } from './serializers';\nimport { isQrl } from '../qrl/qrl-class';\n/** @internal */\nexport const _serializeData = async (data, pureQRL) => {\n    const containerState = {};\n    const collector = createCollector(containerState);\n    collectValue(data, collector, false);\n    // Wait for remaining promises\n    let promises;\n    while ((promises = collector.$promises$).length > 0) {\n        collector.$promises$ = [];\n        await Promise.all(promises);\n    }\n    const objs = Array.from(collector.$objSet$.keys());\n    let count = 0;\n    const objToId = new Map();\n    for (const obj of objs) {\n        objToId.set(obj, intToStr(count));\n        count++;\n    }\n    if (collector.$noSerialize$.length > 0) {\n        const undefinedID = objToId.get(undefined);\n        assertDefined(undefinedID, 'undefined ID must be defined');\n        for (const obj of collector.$noSerialize$) {\n            objToId.set(obj, undefinedID);\n        }\n    }\n    const mustGetObjId = (obj) => {\n        let suffix = '';\n        if (isPromise(obj)) {\n            const promiseValue = getPromiseValue(obj);\n            if (!promiseValue) {\n                throw qError(QError_missingObjectId, obj);\n            }\n            obj = promiseValue.value;\n            if (promiseValue.resolved) {\n                suffix += '~';\n            }\n            else {\n                suffix += '_';\n            }\n        }\n        if (isObject(obj)) {\n            const target = getProxyTarget(obj);\n            if (target) {\n                suffix += '!';\n                obj = target;\n            }\n        }\n        const key = objToId.get(obj);\n        if (key === undefined) {\n            throw qError(QError_missingObjectId, obj);\n        }\n        return key + suffix;\n    };\n    const convertedObjs = serializeObjects(objs, mustGetObjId, null, collector, containerState);\n    return JSON.stringify({\n        _entry: mustGetObjId(data),\n        _objs: convertedObjs,\n    });\n};\n// <docs markdown=\"../readme.md#pauseContainer\">\n// !!DO NOT EDIT THIS COMMENT DIRECTLY!!!\n// (edit ../readme.md#pauseContainer instead)\n// </docs>\nexport const pauseContainer = async (elmOrDoc, defaultParentJSON) => {\n    const doc = getDocument(elmOrDoc);\n    const documentElement = doc.documentElement;\n    const containerEl = isDocument(elmOrDoc) ? documentElement : elmOrDoc;\n    if (directGetAttribute(containerEl, QContainerAttr) === 'paused') {\n        throw qError(QError_containerAlreadyPaused);\n    }\n    const parentJSON = defaultParentJSON ?? (containerEl === doc.documentElement ? doc.body : containerEl);\n    const containerState = _getContainerState(containerEl);\n    const contexts = getNodesInScope(containerEl, hasContext);\n    // Set container to paused\n    directSetAttribute(containerEl, QContainerAttr, 'paused');\n    // Update elements with context\n    for (const elCtx of contexts) {\n        const elm = elCtx.$element$;\n        const listeners = elCtx.li;\n        if (elCtx.$scopeIds$) {\n            const value = serializeSStyle(elCtx.$scopeIds$);\n            if (value) {\n                elm.setAttribute(QScopedStyle, value);\n            }\n        }\n        if (elCtx.$id$) {\n            elm.setAttribute(ELEMENT_ID, elCtx.$id$);\n        }\n        if (isElement(elm) && listeners.length > 0) {\n            const groups = groupListeners(listeners);\n            for (const listener of groups) {\n                elm.setAttribute(listener[0], serializeQRLs(listener[1], elCtx));\n            }\n        }\n    }\n    // Serialize data\n    const data = await _pauseFromContexts(contexts, containerState, (el) => {\n        if (isNode(el) && isText(el)) {\n            return getTextID(el, containerState);\n        }\n        return null;\n    });\n    // Emit Qwik JSON\n    const qwikJson = doc.createElement('script');\n    directSetAttribute(qwikJson, 'type', 'qwik/json');\n    qwikJson.textContent = escapeText(JSON.stringify(data.state, undefined, qDev ? '  ' : undefined));\n    parentJSON.appendChild(qwikJson);\n    // Emit event registration\n    const extraListeners = Array.from(containerState.$events$, (s) => JSON.stringify(s));\n    const eventsScript = doc.createElement('script');\n    eventsScript.textContent = `window.qwikevents||=[];window.qwikevents.push(${extraListeners.join(', ')})`;\n    parentJSON.appendChild(eventsScript);\n    return data;\n};\n/** @internal */\nexport const _pauseFromContexts = async (allContexts, containerState, fallbackGetObjId, textNodes) => {\n    const collector = createCollector(containerState);\n    textNodes?.forEach((_, key) => {\n        collector.$seen$.add(key);\n    });\n    let hasListeners = false;\n    // TODO: optimize\n    for (const ctx of allContexts) {\n        if (ctx.$tasks$) {\n            for (const task of ctx.$tasks$) {\n                if (qDev) {\n                    if (task.$flags$ & TaskFlagsIsDirty) {\n                        logWarn(`Serializing dirty task. Looks like an internal error. \nTask Symbol: ${task.$qrl$.$symbol$}\n`);\n                    }\n                    if (!isConnected(task)) {\n                        logWarn('Serializing disconnected task. Looks like an internal error.');\n                    }\n                }\n                if (isResourceTask(task)) {\n                    collector.$resources$.push(task.$state$);\n                }\n                destroyTask(task);\n            }\n        }\n    }\n    for (const ctx of allContexts) {\n        const el = ctx.$element$;\n        const ctxListeners = ctx.li;\n        for (const listener of ctxListeners) {\n            if (isElement(el)) {\n                const qrl = listener[1];\n                const captured = qrl.$captureRef$;\n                if (captured) {\n                    for (const obj of captured) {\n                        collectValue(obj, collector, true);\n                    }\n                }\n                collector.$qrls$.push(qrl);\n                hasListeners = true;\n            }\n        }\n    }\n    // No listeners implies static page\n    if (!hasListeners) {\n        return {\n            state: {\n                refs: {},\n                ctx: {},\n                objs: [],\n                subs: [],\n            },\n            objs: [],\n            funcs: [],\n            qrls: [],\n            resources: collector.$resources$,\n            mode: 'static',\n        };\n    }\n    // Wait for remaining promises\n    let promises;\n    while ((promises = collector.$promises$).length > 0) {\n        collector.$promises$ = [];\n        await Promise.all(promises);\n    }\n    // If at this point any component can render, we need to capture Context and Props\n    const canRender = collector.$elements$.length > 0;\n    if (canRender) {\n        for (const elCtx of collector.$deferElements$) {\n            collectElementData(elCtx, collector, elCtx.$element$);\n        }\n        for (const ctx of allContexts) {\n            collectProps(ctx, collector);\n        }\n    }\n    // Wait for remaining promises\n    while ((promises = collector.$promises$).length > 0) {\n        collector.$promises$ = [];\n        await Promise.all(promises);\n    }\n    // Convert objSet to array\n    const elementToIndex = new Map();\n    const objs = Array.from(collector.$objSet$.keys());\n    const objToId = new Map();\n    const getElementID = (el) => {\n        let id = elementToIndex.get(el);\n        if (id === undefined) {\n            id = getQId(el);\n            if (!id) {\n                console.warn('Missing ID', el);\n            }\n            elementToIndex.set(el, id);\n        }\n        return id;\n    };\n    const getObjId = (obj) => {\n        let suffix = '';\n        if (isPromise(obj)) {\n            const promiseValue = getPromiseValue(obj);\n            if (!promiseValue) {\n                return null;\n            }\n            obj = promiseValue.value;\n            if (promiseValue.resolved) {\n                suffix += '~';\n            }\n            else {\n                suffix += '_';\n            }\n        }\n        if (isObject(obj)) {\n            const target = getProxyTarget(obj);\n            if (target) {\n                suffix += '!';\n                obj = target;\n            }\n            else if (isQwikElement(obj)) {\n                const elID = getElementID(obj);\n                if (elID) {\n                    return ELEMENT_ID_PREFIX + elID + suffix;\n                }\n                return null;\n            }\n        }\n        const id = objToId.get(obj);\n        if (id) {\n            return id + suffix;\n        }\n        const textId = textNodes?.get(obj);\n        if (textId) {\n            return '*' + textId;\n        }\n        if (fallbackGetObjId) {\n            return fallbackGetObjId(obj);\n        }\n        return null;\n    };\n    const mustGetObjId = (obj) => {\n        const key = getObjId(obj);\n        if (key === null) {\n            // TODO(mhevery): this is a hack as we should never get here.\n            // This as a workaround for https://github.com/BuilderIO/qwik/issues/4979\n            if (isQrl(obj)) {\n                const id = intToStr(objToId.size);\n                objToId.set(obj, id);\n                return id;\n            }\n            else {\n                throw qError(QError_missingObjectId, obj);\n            }\n        }\n        return key;\n    };\n    // Compute subscriptions\n    const subsMap = new Map();\n    for (const obj of objs) {\n        const subs = getManager(obj, containerState)?.$subs$;\n        if (!subs) {\n            continue;\n        }\n        const flags = getProxyFlags(obj) ?? 0;\n        const converted = [];\n        if (flags & QObjectRecursive) {\n            converted.push(flags);\n        }\n        for (const sub of subs) {\n            const host = sub[1];\n            if (sub[0] === 0 && isNode(host) && isVirtualElement(host)) {\n                if (!collector.$elements$.includes(tryGetContext(host))) {\n                    continue;\n                }\n            }\n            converted.push(sub);\n        }\n        if (converted.length > 0) {\n            subsMap.set(obj, converted);\n        }\n    }\n    // Sort objects: the ones with subscriptions go first\n    objs.sort((a, b) => {\n        const isProxyA = subsMap.has(a) ? 0 : 1;\n        const isProxyB = subsMap.has(b) ? 0 : 1;\n        return isProxyA - isProxyB;\n    });\n    // Generate object ID by using a monotonic counter\n    let count = 0;\n    for (const obj of objs) {\n        objToId.set(obj, intToStr(count));\n        count++;\n    }\n    if (collector.$noSerialize$.length > 0) {\n        const undefinedID = objToId.get(undefined);\n        assertDefined(undefinedID, 'undefined ID must be defined');\n        for (const obj of collector.$noSerialize$) {\n            objToId.set(obj, undefinedID);\n        }\n    }\n    // Serialize object subscriptions\n    const subs = [];\n    for (const obj of objs) {\n        const value = subsMap.get(obj);\n        if (value == null) {\n            break;\n        }\n        subs.push(value\n            .map((s) => {\n            if (typeof s === 'number') {\n                return `_${s}`;\n            }\n            return serializeSubscription(s, getObjId);\n        })\n            .filter(isNotNullable));\n    }\n    assertEqual(subs.length, subsMap.size, 'missing subscriptions to serialize', subs, subsMap);\n    const convertedObjs = serializeObjects(objs, mustGetObjId, getObjId, collector, containerState);\n    const meta = {};\n    const refs = {};\n    // Write back to the dom\n    for (const ctx of allContexts) {\n        const node = ctx.$element$;\n        const elementID = ctx.$id$;\n        const ref = ctx.$refMap$;\n        const props = ctx.$props$;\n        const contexts = ctx.$contexts$;\n        const tasks = ctx.$tasks$;\n        const renderQrl = ctx.$componentQrl$;\n        const seq = ctx.$seq$;\n        const metaValue = {};\n        const elementCaptured = isVirtualElement(node) && collector.$elements$.includes(ctx);\n        assertDefined(elementID, `pause: can not generate ID for dom node`, node);\n        if (ref.length > 0) {\n            assertElement(node);\n            const value = mapJoin(ref, mustGetObjId, ' ');\n            if (value) {\n                refs[elementID] = value;\n            }\n        }\n        else if (canRender) {\n            let add = false;\n            if (elementCaptured) {\n                assertDefined(renderQrl, 'renderQrl must be defined');\n                const propsId = getObjId(props);\n                metaValue.h = mustGetObjId(renderQrl) + (propsId ? ' ' + propsId : '');\n                add = true;\n            }\n            else {\n                const propsId = getObjId(props);\n                if (propsId) {\n                    metaValue.h = ' ' + propsId;\n                    add = true;\n                }\n            }\n            if (tasks && tasks.length > 0) {\n                const value = mapJoin(tasks, getObjId, ' ');\n                if (value) {\n                    metaValue.w = value;\n                    add = true;\n                }\n            }\n            if (elementCaptured && seq && seq.length > 0) {\n                const value = mapJoin(seq, mustGetObjId, ' ');\n                metaValue.s = value;\n                add = true;\n            }\n            if (contexts) {\n                const serializedContexts = [];\n                contexts.forEach((value, key) => {\n                    const id = getObjId(value);\n                    if (id) {\n                        serializedContexts.push(`${key}=${id}`);\n                    }\n                });\n                const value = serializedContexts.join(' ');\n                if (value) {\n                    metaValue.c = value;\n                    add = true;\n                }\n            }\n            if (add) {\n                meta[elementID] = metaValue;\n            }\n        }\n    }\n    // Sanity check of serialized element\n    if (qDev) {\n        elementToIndex.forEach((value, el) => {\n            if (!value) {\n                logWarn('unconnected element', el.nodeName, '\\n');\n            }\n        });\n    }\n    return {\n        state: {\n            refs,\n            ctx: meta,\n            objs: convertedObjs,\n            subs,\n        },\n        objs,\n        funcs: collector.$inlinedFunctions$,\n        resources: collector.$resources$,\n        qrls: collector.$qrls$,\n        mode: canRender ? 'render' : 'listeners',\n    };\n};\nexport const mapJoin = (objects, getObjectId, sep) => {\n    let output = '';\n    for (const obj of objects) {\n        const id = getObjectId(obj);\n        if (id !== null) {\n            if (output !== '') {\n                output += sep;\n            }\n            output += id;\n        }\n    }\n    return output;\n};\nexport const getNodesInScope = (parent, predicate) => {\n    const results = [];\n    const v = predicate(parent);\n    if (v !== undefined) {\n        results.push(v);\n    }\n    const walker = parent.ownerDocument.createTreeWalker(parent, SHOW_ELEMENT | SHOW_COMMENT, {\n        acceptNode(node) {\n            if (isContainer(node)) {\n                return FILTER_REJECT;\n            }\n            const v = predicate(node);\n            if (v !== undefined) {\n                results.push(v);\n            }\n            return FILTER_SKIP;\n        },\n    });\n    while (walker.nextNode()) {\n        // do nothing\n    }\n    return results;\n};\nconst collectProps = (elCtx, collector) => {\n    const parentCtx = elCtx.$parentCtx$;\n    const props = elCtx.$props$;\n    if (parentCtx && props && !isEmptyObj(props) && collector.$elements$.includes(parentCtx)) {\n        const subs = getSubscriptionManager(props)?.$subs$;\n        const el = elCtx.$element$;\n        if (subs) {\n            for (const [type, host] of subs) {\n                if (type === 0) {\n                    if (host !== el) {\n                        collectSubscriptions(getSubscriptionManager(props), collector, false);\n                    }\n                    if (isNode(host)) {\n                        collectElement(host, collector);\n                    }\n                    else {\n                        collectValue(host, collector, true);\n                    }\n                }\n                else {\n                    collectValue(props, collector, false);\n                    collectSubscriptions(getSubscriptionManager(props), collector, false);\n                }\n            }\n        }\n    }\n};\nconst createCollector = (containerState) => {\n    return {\n        $containerState$: containerState,\n        $seen$: new Set(),\n        $objSet$: new Set(),\n        $prefetch$: 0,\n        $noSerialize$: [],\n        $inlinedFunctions$: [],\n        $resources$: [],\n        $elements$: [],\n        $qrls$: [],\n        $deferElements$: [],\n        $promises$: [],\n    };\n};\nconst collectDeferElement = (el, collector) => {\n    const ctx = tryGetContext(el);\n    if (collector.$elements$.includes(ctx)) {\n        return;\n    }\n    collector.$elements$.push(ctx);\n    collector.$prefetch$++;\n    if (ctx.$flags$ & HOST_FLAG_DYNAMIC) {\n        collectElementData(ctx, collector, true);\n    }\n    else {\n        collector.$deferElements$.push(ctx);\n    }\n    collector.$prefetch$--;\n};\nconst collectElement = (el, collector) => {\n    const ctx = tryGetContext(el);\n    if (ctx) {\n        if (collector.$elements$.includes(ctx)) {\n            return;\n        }\n        collector.$elements$.push(ctx);\n        collectElementData(ctx, collector, el);\n    }\n};\nexport const collectElementData = (elCtx, collector, dynamicCtx) => {\n    if (elCtx.$props$ && !isEmptyObj(elCtx.$props$)) {\n        collectValue(elCtx.$props$, collector, dynamicCtx);\n        collectSubscriptions(getSubscriptionManager(elCtx.$props$), collector, dynamicCtx);\n    }\n    if (elCtx.$componentQrl$) {\n        collectValue(elCtx.$componentQrl$, collector, dynamicCtx);\n    }\n    if (elCtx.$seq$) {\n        for (const obj of elCtx.$seq$) {\n            collectValue(obj, collector, dynamicCtx);\n        }\n    }\n    if (elCtx.$tasks$) {\n        const map = collector.$containerState$.$subsManager$.$groupToManagers$;\n        for (const obj of elCtx.$tasks$) {\n            if (map.has(obj)) {\n                collectValue(obj, collector, dynamicCtx);\n            }\n        }\n    }\n    if (dynamicCtx === true) {\n        collectContext(elCtx, collector);\n        if (elCtx.$dynamicSlots$) {\n            for (const slotCtx of elCtx.$dynamicSlots$) {\n                collectContext(slotCtx, collector);\n            }\n        }\n    }\n};\nconst collectContext = (elCtx, collector) => {\n    while (elCtx) {\n        if (elCtx.$contexts$) {\n            for (const obj of elCtx.$contexts$.values()) {\n                collectValue(obj, collector, true);\n            }\n        }\n        elCtx = elCtx.$parentCtx$;\n    }\n};\nexport const escapeText = (str) => {\n    return str.replace(/<(\\/?script)/g, '\\\\x3C$1');\n};\nexport const collectSubscriptions = (manager, collector, leaks) => {\n    // if (!leaks) {\n    //   return;\n    // }\n    if (collector.$seen$.has(manager)) {\n        return;\n    }\n    collector.$seen$.add(manager);\n    const subs = manager.$subs$;\n    assertDefined(subs, 'subs must be defined');\n    for (const key of subs) {\n        const type = key[0];\n        if (type > 0) {\n            collectValue(key[2], collector, leaks);\n        }\n        if (leaks === true) {\n            const host = key[1];\n            if (isNode(host) && isVirtualElement(host)) {\n                if (type === 0) {\n                    collectDeferElement(host, collector);\n                }\n            }\n            else {\n                collectValue(host, collector, true);\n            }\n        }\n    }\n};\nconst PROMISE_VALUE = Symbol();\nconst resolvePromise = (promise) => {\n    return promise.then((value) => {\n        const v = {\n            resolved: true,\n            value,\n        };\n        promise[PROMISE_VALUE] = v;\n        return value;\n    }, (value) => {\n        const v = {\n            resolved: false,\n            value,\n        };\n        promise[PROMISE_VALUE] = v;\n        return value;\n    });\n};\nconst getPromiseValue = (promise) => {\n    return promise[PROMISE_VALUE];\n};\nexport const collectValue = (obj, collector, leaks) => {\n    if (obj !== null) {\n        const objType = typeof obj;\n        switch (objType) {\n            case 'function':\n            case 'object': {\n                const seen = collector.$seen$;\n                if (seen.has(obj)) {\n                    return;\n                }\n                seen.add(obj);\n                if (fastSkipSerialize(obj)) {\n                    collector.$objSet$.add(undefined);\n                    collector.$noSerialize$.push(obj);\n                    return;\n                }\n                const input = obj;\n                const target = getProxyTarget(obj);\n                if (target) {\n                    obj = target;\n                    // NOTE: You may be tempted to add the `target` to the `seen` set,\n                    // but that would not work as it is possible for the `target` object\n                    // to already be in `seen` set if it was passed in directly, so\n                    // we can't short circuit and need to do the work.\n                    // Issue: https://github.com/BuilderIO/qwik/issues/5001\n                    const mutable = (getProxyFlags(obj) & QObjectImmutable) === 0;\n                    if (leaks && mutable) {\n                        collectSubscriptions(getSubscriptionManager(input), collector, leaks);\n                    }\n                    if (fastWeakSerialize(input)) {\n                        collector.$objSet$.add(obj);\n                        return;\n                    }\n                }\n                const collected = collectDeps(obj, collector, leaks);\n                if (collected) {\n                    collector.$objSet$.add(obj);\n                    return;\n                }\n                if (isPromise(obj)) {\n                    collector.$promises$.push(resolvePromise(obj).then((value) => {\n                        collectValue(value, collector, leaks);\n                    }));\n                    return;\n                }\n                if (objType === 'object') {\n                    if (isNode(obj)) {\n                        return;\n                    }\n                    if (isArray(obj)) {\n                        for (let i = 0; i < obj.length; i++) {\n                            collectValue(input[i], collector, leaks);\n                        }\n                    }\n                    else if (isSerializableObject(obj)) {\n                        for (const key in obj) {\n                            collectValue(input[key], collector, leaks);\n                        }\n                    }\n                }\n                break;\n            }\n            case 'string': {\n                if (collector.$seen$.has(obj)) {\n                    return;\n                }\n            }\n        }\n    }\n    collector.$objSet$.add(obj);\n};\nexport const isContainer = (el) => {\n    return isElement(el) && el.hasAttribute(QContainerAttr);\n};\nconst hasContext = (el) => {\n    const node = processVirtualNodes(el);\n    if (isQwikElement(node)) {\n        const ctx = tryGetContext(node);\n        if (ctx && ctx.$id$) {\n            return ctx;\n        }\n    }\n    return undefined;\n};\nconst getManager = (obj, containerState) => {\n    if (!isObject(obj)) {\n        return undefined;\n    }\n    if (obj instanceof SignalImpl) {\n        return getSubscriptionManager(obj);\n    }\n    const proxy = containerState.$proxyMap$.get(obj);\n    if (proxy) {\n        return getSubscriptionManager(proxy);\n    }\n    return undefined;\n};\nconst getQId = (el) => {\n    const ctx = tryGetContext(el);\n    if (ctx) {\n        return ctx.$id$;\n    }\n    return null;\n};\nconst getTextID = (node, containerState) => {\n    const prev = node.previousSibling;\n    if (prev && isComment(prev)) {\n        if (prev.data.startsWith('t=')) {\n            return ELEMENT_ID_PREFIX + prev.data.slice(2);\n        }\n    }\n    const doc = node.ownerDocument;\n    const id = intToStr(containerState.$elementIndex$++);\n    const open = doc.createComment(`t=${id}`);\n    const close = doc.createComment('');\n    const parent = node.parentElement;\n    parent.insertBefore(open, node);\n    parent.insertBefore(close, node.nextSibling);\n    return ELEMENT_ID_PREFIX + id;\n};\nconst isEmptyObj = (obj) => {\n    return Object.keys(obj).length === 0;\n};\nfunction serializeObjects(objs, mustGetObjId, getObjId, collector, containerState) {\n    return objs.map((obj) => {\n        if (obj === null) {\n            return null;\n        }\n        const typeObj = typeof obj;\n        switch (typeObj) {\n            case 'undefined':\n                return UNDEFINED_PREFIX;\n            case 'number':\n                if (!Number.isFinite(obj)) {\n                    break;\n                }\n                return obj;\n            case 'string':\n                if (obj.charCodeAt(0) < 32 /* space */) {\n                    // if strings starts with a special character let the string serializer handle it\n                    // to deal with escape sequences.\n                    break;\n                }\n                else {\n                    // Fast path of just serializing the string.\n                    return obj;\n                }\n            case 'boolean':\n                return obj;\n        }\n        const value = serializeValue(obj, mustGetObjId, collector, containerState);\n        if (value !== undefined) {\n            return value;\n        }\n        if (typeObj === 'object') {\n            if (isArray(obj)) {\n                return obj.map(mustGetObjId);\n            }\n            if (isSerializableObject(obj)) {\n                const output = {};\n                for (const key in obj) {\n                    if (getObjId) {\n                        const id = getObjId(obj[key]);\n                        if (id !== null) {\n                            output[key] = id;\n                        }\n                    }\n                    else {\n                        output[key] = mustGetObjId(obj[key]);\n                    }\n                }\n                return output;\n            }\n        }\n        throw qError(QError_verifySerializable, obj);\n    });\n}\n//# sourceMappingURL=data:application/json;base64,","import { EMPTY_ARRAY } from '../util/flyweight';\nimport { assertQrl, createQRL, emitEvent, getSymbolHash } from './qrl-class';\nimport { isFunction, isString } from '../util/types';\nimport { qError, QError_dynamicImportFailed, QError_qrlMissingChunk, QError_unknownTypeArgument, } from '../error/error';\nimport { qRuntimeQrl, qSerialize } from '../util/qdev';\nimport { getPlatform } from '../platform/platform';\nimport { assertDefined, assertTrue, assertElement } from '../error/assert';\nimport { mapJoin } from '../container/pause';\n// https://regexr.com/68v72\nconst EXTRACT_IMPORT_PATH = /\\(\\s*(['\"])([^\\1]+)\\1\\s*\\)/;\n// https://regexr.com/690ds\nconst EXTRACT_SELF_IMPORT = /Promise\\s*\\.\\s*resolve/;\n// https://regexr.com/6a83h\nconst EXTRACT_FILE_NAME = /[\\\\/(]([\\w\\d.\\-_]+\\.(js|ts)x?):/;\nconst announcedQRL = /*#__PURE__*/ new Set();\n// <docs markdown=\"../readme.md#qrl\">\n// !!DO NOT EDIT THIS COMMENT DIRECTLY!!!\n// (edit ../readme.md#qrl instead)\n/**\n * Used by Qwik Optimizer to point to lazy-loaded resources.\n *\n * This function should be used by the Qwik Optimizer only. The function should not be directly\n * referred to in the source code of the application.\n *\n * @param chunkOrFn - Chunk name (or function which is stringified to extract chunk name)\n * @param symbol - Symbol to lazy load\n * @param lexicalScopeCapture - A set of lexically scoped variables to capture.\n * @public\n * @see `QRL`, `$(...)`\n */\n// </docs>\nexport const qrl = (chunkOrFn, symbol, lexicalScopeCapture = EMPTY_ARRAY, stackOffset = 0) => {\n    let chunk = null;\n    let symbolFn = null;\n    if (isFunction(chunkOrFn)) {\n        symbolFn = chunkOrFn;\n        if (qSerialize) {\n            let match;\n            const srcCode = String(chunkOrFn);\n            if ((match = srcCode.match(EXTRACT_IMPORT_PATH)) && match[2]) {\n                chunk = match[2];\n            }\n            else if ((match = srcCode.match(EXTRACT_SELF_IMPORT))) {\n                const ref = 'QWIK-SELF';\n                const frames = new Error(ref).stack.split('\\n');\n                const start = frames.findIndex((f) => f.includes(ref));\n                const frame = frames[start + 2 + stackOffset];\n                match = frame.match(EXTRACT_FILE_NAME);\n                if (!match) {\n                    chunk = 'main';\n                }\n                else {\n                    chunk = match[1];\n                }\n            }\n            else {\n                throw qError(QError_dynamicImportFailed, srcCode);\n            }\n        }\n    }\n    else if (isString(chunkOrFn)) {\n        chunk = chunkOrFn;\n    }\n    else {\n        throw qError(QError_unknownTypeArgument, chunkOrFn);\n    }\n    if (!announcedQRL.has(symbol)) {\n        // Emit event\n        announcedQRL.add(symbol);\n        emitEvent('qprefetch', {\n            symbols: [getSymbolHash(symbol)],\n        });\n    }\n    // Unwrap subscribers\n    return createQRL(chunk, symbol, null, symbolFn, null, lexicalScopeCapture, null);\n};\n/** @internal */\nexport const inlinedQrl = (symbol, symbolName, lexicalScopeCapture = EMPTY_ARRAY) => {\n    // Unwrap subscribers\n    return createQRL(null, symbolName, symbol, null, null, lexicalScopeCapture, null);\n};\n/** @internal */\nexport const _noopQrl = (symbolName, lexicalScopeCapture = EMPTY_ARRAY) => {\n    return createQRL(null, symbolName, null, null, null, lexicalScopeCapture, null);\n};\n/** @internal */\nexport const qrlDEV = (chunkOrFn, symbol, opts, lexicalScopeCapture = EMPTY_ARRAY) => {\n    const newQrl = qrl(chunkOrFn, symbol, lexicalScopeCapture, 1);\n    newQrl.dev = opts;\n    return newQrl;\n};\n/** @internal */\nexport const inlinedQrlDEV = (symbol, symbolName, opts, lexicalScopeCapture = EMPTY_ARRAY) => {\n    const qrl = inlinedQrl(symbol, symbolName, lexicalScopeCapture);\n    qrl.dev = opts;\n    return qrl;\n};\nexport const serializeQRL = (qrl, opts = {}) => {\n    assertTrue(qSerialize, 'In order to serialize a QRL, qSerialize must be true');\n    assertQrl(qrl);\n    let symbol = qrl.$symbol$;\n    let chunk = qrl.$chunk$;\n    const refSymbol = qrl.$refSymbol$ ?? symbol;\n    const platform = getPlatform();\n    if (platform) {\n        const result = platform.chunkForSymbol(refSymbol, chunk);\n        if (result) {\n            chunk = result[1];\n            if (!qrl.$refSymbol$) {\n                symbol = result[0];\n            }\n        }\n    }\n    if (qRuntimeQrl && !chunk) {\n        chunk = '/runtimeQRL';\n        symbol = '_';\n    }\n    if (!chunk) {\n        throw qError(QError_qrlMissingChunk, qrl.$symbol$);\n    }\n    if (chunk.startsWith('./')) {\n        chunk = chunk.slice(2);\n    }\n    let output = `${chunk}#${symbol}`;\n    const capture = qrl.$capture$;\n    const captureRef = qrl.$captureRef$;\n    if (captureRef && captureRef.length) {\n        if (opts.$getObjId$) {\n            output += `[${mapJoin(captureRef, opts.$getObjId$, ' ')}]`;\n        }\n        else if (opts.$addRefMap$) {\n            output += `[${mapJoin(captureRef, opts.$addRefMap$, ' ')}]`;\n        }\n    }\n    else if (capture && capture.length > 0) {\n        output += `[${capture.join(' ')}]`;\n    }\n    return output;\n};\nexport const serializeQRLs = (existingQRLs, elCtx) => {\n    assertElement(elCtx.$element$);\n    const opts = {\n        $addRefMap$: (obj) => addToArray(elCtx.$refMap$, obj),\n    };\n    return mapJoin(existingQRLs, (qrl) => serializeQRL(qrl, opts), '\\n');\n};\n/** `./chunk#symbol[captures] */\nexport const parseQRL = (qrl, containerEl) => {\n    const endIdx = qrl.length;\n    const hashIdx = indexOf(qrl, 0, '#');\n    const captureIdx = indexOf(qrl, hashIdx, '[');\n    const chunkEndIdx = Math.min(hashIdx, captureIdx);\n    const chunk = qrl.substring(0, chunkEndIdx);\n    const symbolStartIdx = hashIdx == endIdx ? hashIdx : hashIdx + 1;\n    const symbolEndIdx = captureIdx;\n    const symbol = symbolStartIdx == symbolEndIdx ? 'default' : qrl.substring(symbolStartIdx, symbolEndIdx);\n    const captureStartIdx = captureIdx;\n    const captureEndIdx = endIdx;\n    const capture = captureStartIdx === captureEndIdx\n        ? EMPTY_ARRAY\n        : qrl.substring(captureStartIdx + 1, captureEndIdx - 1).split(' ');\n    const iQrl = createQRL(chunk, symbol, null, null, capture, null, null);\n    if (containerEl) {\n        iQrl.$setContainer$(containerEl);\n    }\n    return iQrl;\n};\nconst indexOf = (text, startIdx, char) => {\n    const endIdx = text.length;\n    const charIdx = text.indexOf(char, startIdx == endIdx ? 0 : startIdx);\n    return charIdx == -1 ? endIdx : charIdx;\n};\nconst addToArray = (array, obj) => {\n    const index = array.indexOf(obj);\n    if (index === -1) {\n        array.push(obj);\n        return String(array.length - 1);\n    }\n    return String(index);\n};\nexport const inflateQrl = (qrl, elCtx) => {\n    assertDefined(qrl.$capture$, 'invoke: qrl capture must be defined inside useLexicalScope()', qrl);\n    return (qrl.$captureRef$ = qrl.$capture$.map((idx) => {\n        const int = parseInt(idx, 10);\n        const obj = elCtx.$refMap$[int];\n        assertTrue(elCtx.$refMap$.length > int, 'out of bounds inflate access', idx);\n        return obj;\n    }));\n};\n/** @internal */\nexport const _regSymbol = (symbol, hash) => {\n    if (typeof globalThis.__qwik_reg_symbols === 'undefined') {\n        globalThis.__qwik_reg_symbols = new Map();\n    }\n    globalThis.__qwik_reg_symbols.set(hash, symbol);\n    return symbol;\n};\n//# sourceMappingURL=data:application/json;base64,","import { $ } from '../qrl/qrl.public';\nimport { assertQrl } from '../qrl/qrl-class';\nimport { runResource, TaskFlagsIsDirty, TaskFlagsIsResource, Task, } from './use-task';\nimport { Fragment, jsx } from '../render/jsx/jsx-runtime';\nimport { isServerPlatform } from '../platform/platform';\nimport { untrack, useBindInvokeContext } from './use-core';\nimport { useSequentialScope } from './use-sequential-scope';\nimport { createProxy } from '../state/store';\nimport { getProxyTarget } from '../state/common';\nimport { isSignal } from '../state/signal';\nimport { isObject } from '../util/types';\nimport { isPromise } from '../util/promises';\n// <docs markdown=\"../readme.md#useResource\">\n// !!DO NOT EDIT THIS COMMENT DIRECTLY!!!\n// (edit ../readme.md#useResource instead)\n/**\n * This method works like an async memoized function that runs whenever some tracked value changes\n * and returns some data.\n *\n * `useResource` however returns immediate a `ResourceReturn` object that contains the data and a\n * state that indicates if the data is available or not.\n *\n * The status can be one of the following:\n *\n * - 'pending' - the data is not yet available.\n * - 'resolved' - the data is available.\n * - 'rejected' - the data is not available due to an error or timeout.\n *\n * ### Example\n *\n * Example showing how `useResource` to perform a fetch to request the weather, whenever the input\n * city name changes.\n *\n * ```tsx\n * const Cmp = component$(() => {\n *   const store = useStore({\n *     city: '',\n *   });\n *\n *   const weatherResource = useResource$<any>(async ({ track, cleanup }) => {\n *     const cityName = track(() => store.city);\n *     const abortController = new AbortController();\n *     cleanup(() => abortController.abort('cleanup'));\n *     const res = await fetch(`http://weatherdata.com?city=${cityName}`, {\n *       signal: abortController.signal,\n *     });\n *     const data = res.json();\n *     return data;\n *   });\n *\n *   return (\n *     <div>\n *       <input name=\"city\" onInput$={(ev: any) => (store.city = ev.target.value)} />\n *       <Resource\n *         value={weatherResource}\n *         onResolved={(weather) => {\n *           return <div>Temperature: {weather.temp}</div>;\n *         }}\n *       />\n *     </div>\n *   );\n * });\n * ```\n *\n * @public\n * @see Resource\n * @see ResourceReturn\n */\n// </docs>\nexport const useResourceQrl = (qrl, opts) => {\n    const { val, set, i, iCtx, elCtx } = useSequentialScope();\n    if (val != null) {\n        return val;\n    }\n    assertQrl(qrl);\n    const containerState = iCtx.$renderCtx$.$static$.$containerState$;\n    const resource = createResourceReturn(containerState, opts);\n    const el = elCtx.$element$;\n    const task = new Task(TaskFlagsIsDirty | TaskFlagsIsResource, i, el, qrl, resource);\n    const previousWait = Promise.all(iCtx.$waitOn$.slice());\n    runResource(task, containerState, iCtx.$renderCtx$, previousWait);\n    if (!elCtx.$tasks$) {\n        elCtx.$tasks$ = [];\n    }\n    elCtx.$tasks$.push(task);\n    set(resource);\n    return resource;\n};\n// <docs markdown=\"../readme.md#useResource\">\n// !!DO NOT EDIT THIS COMMENT DIRECTLY!!!\n// (edit ../readme.md#useResource instead)\n/**\n * This method works like an async memoized function that runs whenever some tracked value changes\n * and returns some data.\n *\n * `useResource` however returns immediate a `ResourceReturn` object that contains the data and a\n * state that indicates if the data is available or not.\n *\n * The status can be one of the following:\n *\n * - 'pending' - the data is not yet available.\n * - 'resolved' - the data is available.\n * - 'rejected' - the data is not available due to an error or timeout.\n *\n * ### Example\n *\n * Example showing how `useResource` to perform a fetch to request the weather, whenever the input\n * city name changes.\n *\n * ```tsx\n * const Cmp = component$(() => {\n *   const store = useStore({\n *     city: '',\n *   });\n *\n *   const weatherResource = useResource$<any>(async ({ track, cleanup }) => {\n *     const cityName = track(() => store.city);\n *     const abortController = new AbortController();\n *     cleanup(() => abortController.abort('cleanup'));\n *     const res = await fetch(`http://weatherdata.com?city=${cityName}`, {\n *       signal: abortController.signal,\n *     });\n *     const data = res.json();\n *     return data;\n *   });\n *\n *   return (\n *     <div>\n *       <input name=\"city\" onInput$={(ev: any) => (store.city = ev.target.value)} />\n *       <Resource\n *         value={weatherResource}\n *         onResolved={(weather) => {\n *           return <div>Temperature: {weather.temp}</div>;\n *         }}\n *       />\n *     </div>\n *   );\n * });\n * ```\n *\n * @public\n * @see Resource\n * @see ResourceReturn\n */\n// </docs>\nexport const useResource$ = (generatorFn, opts) => {\n    return useResourceQrl($(generatorFn), opts);\n};\n// <docs markdown=\"../readme.md#useResource\">\n// !!DO NOT EDIT THIS COMMENT DIRECTLY!!!\n// (edit ../readme.md#useResource instead)\n/**\n * This method works like an async memoized function that runs whenever some tracked value changes\n * and returns some data.\n *\n * `useResource` however returns immediate a `ResourceReturn` object that contains the data and a\n * state that indicates if the data is available or not.\n *\n * The status can be one of the following:\n *\n * - 'pending' - the data is not yet available.\n * - 'resolved' - the data is available.\n * - 'rejected' - the data is not available due to an error or timeout.\n *\n * ### Example\n *\n * Example showing how `useResource` to perform a fetch to request the weather, whenever the input\n * city name changes.\n *\n * ```tsx\n * const Cmp = component$(() => {\n *   const store = useStore({\n *     city: '',\n *   });\n *\n *   const weatherResource = useResource$<any>(async ({ track, cleanup }) => {\n *     const cityName = track(() => store.city);\n *     const abortController = new AbortController();\n *     cleanup(() => abortController.abort('cleanup'));\n *     const res = await fetch(`http://weatherdata.com?city=${cityName}`, {\n *       signal: abortController.signal,\n *     });\n *     const data = res.json();\n *     return data;\n *   });\n *\n *   return (\n *     <div>\n *       <input name=\"city\" onInput$={(ev: any) => (store.city = ev.target.value)} />\n *       <Resource\n *         value={weatherResource}\n *         onResolved={(weather) => {\n *           return <div>Temperature: {weather.temp}</div>;\n *         }}\n *       />\n *     </div>\n *   );\n * });\n * ```\n *\n * @public\n * @see Resource\n * @see ResourceReturn\n */\n// </docs>\nexport const Resource = (props) => {\n    const isBrowser = !isServerPlatform();\n    const resource = props.value;\n    let promise;\n    if (isResourceReturn(resource)) {\n        if (isBrowser) {\n            if (props.onRejected) {\n                resource.value.catch(() => { });\n                if (resource._state === 'rejected') {\n                    return props.onRejected(resource._error);\n                }\n            }\n            if (props.onPending) {\n                const state = resource._state;\n                if (state === 'resolved') {\n                    return props.onResolved(resource._resolved);\n                }\n                else if (state === 'pending') {\n                    return props.onPending();\n                }\n                else if (state === 'rejected') {\n                    throw resource._error;\n                }\n            }\n            if (untrack(() => resource._resolved) !== undefined) {\n                return props.onResolved(resource._resolved);\n            }\n        }\n        promise = resource.value;\n    }\n    else if (isPromise(resource)) {\n        promise = resource;\n    }\n    else if (isSignal(resource)) {\n        promise = Promise.resolve(resource.value);\n    }\n    else {\n        return props.onResolved(resource);\n    }\n    // Resource path\n    return jsx(Fragment, {\n        children: promise.then(useBindInvokeContext(props.onResolved), useBindInvokeContext(props.onRejected)),\n    });\n};\nexport const _createResourceReturn = (opts) => {\n    const resource = {\n        __brand: 'resource',\n        value: undefined,\n        loading: isServerPlatform() ? false : true,\n        _resolved: undefined,\n        _error: undefined,\n        _state: 'pending',\n        _timeout: opts?.timeout ?? -1,\n        _cache: 0,\n    };\n    return resource;\n};\nexport const createResourceReturn = (containerState, opts, initialPromise) => {\n    const result = _createResourceReturn(opts);\n    result.value = initialPromise;\n    const resource = createProxy(result, containerState, undefined);\n    return resource;\n};\nexport const getInternalResource = (resource) => {\n    return getProxyTarget(resource);\n};\nexport const isResourceReturn = (obj) => {\n    return isObject(obj) && obj.__brand === 'resource';\n};\nexport const serializeResource = (resource, getObjId) => {\n    const state = resource._state;\n    if (state === 'resolved') {\n        return `0 ${getObjId(resource._resolved)}`;\n    }\n    else if (state === 'pending') {\n        return `1`;\n    }\n    else {\n        return `2 ${getObjId(resource._error)}`;\n    }\n};\nexport const parseResourceReturn = (data) => {\n    const [first, id] = data.split(' ');\n    const result = _createResourceReturn(undefined);\n    result.value = Promise.resolve();\n    if (first === '0') {\n        result._state = 'resolved';\n        result._resolved = id;\n        result.loading = false;\n    }\n    else if (first === '1') {\n        result._state = 'pending';\n        result.value = new Promise(() => { });\n        result.loading = true;\n    }\n    else if (first === '2') {\n        result._state = 'rejected';\n        result._error = id;\n        result.loading = false;\n    }\n    return result;\n};\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidXNlLXJlc291cmNlLmpzIiwic291cmNlUm9vdCI6Ii4vIiwic291cmNlcyI6WyJwYWNrYWdlcy9xd2lrL3NyYy9jb3JlL3VzZS91c2UtcmVzb3VyY2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLENBQUMsRUFBWSxNQUFNLG1CQUFtQixDQUFDO0FBQ2hELE9BQU8sRUFBRSxTQUFTLEVBQUUsTUFBTSxrQkFBa0IsQ0FBQztBQUM3QyxPQUFPLEVBSUwsV0FBVyxFQUNYLGdCQUFnQixFQUNoQixtQkFBbUIsRUFDbkIsSUFBSSxHQUVMLE1BQU0sWUFBWSxDQUFDO0FBQ3BCLE9BQU8sRUFBRSxRQUFRLEVBQUUsR0FBRyxFQUFFLE1BQU0sMkJBQTJCLENBQUM7QUFFMUQsT0FBTyxFQUFFLGdCQUFnQixFQUFFLE1BQU0sc0JBQXNCLENBQUM7QUFDeEQsT0FBTyxFQUFFLE9BQU8sRUFBRSxvQkFBb0IsRUFBRSxNQUFNLFlBQVksQ0FBQztBQUczRCxPQUFPLEVBQUUsa0JBQWtCLEVBQUUsTUFBTSx3QkFBd0IsQ0FBQztBQUM1RCxPQUFPLEVBQUUsV0FBVyxFQUFFLE1BQU0sZ0JBQWdCLENBQUM7QUFDN0MsT0FBTyxFQUFFLGNBQWMsRUFBRSxNQUFNLGlCQUFpQixDQUFDO0FBQ2pELE9BQU8sRUFBRSxRQUFRLEVBQWUsTUFBTSxpQkFBaUIsQ0FBQztBQUN4RCxPQUFPLEVBQUUsUUFBUSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQ3pDLE9BQU8sRUFBRSxTQUFTLEVBQUUsTUFBTSxrQkFBa0IsQ0FBQztBQWdCN0MsNkNBQTZDO0FBQzdDLHlDQUF5QztBQUN6QywwQ0FBMEM7QUFDMUM7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7R0FvREc7QUFDSCxVQUFVO0FBQ1YsTUFBTSxDQUFDLE1BQU0sY0FBYyxHQUFHLENBQzVCLEdBQXVCLEVBQ3ZCLElBQXNCLEVBQ0gsRUFBRTtJQUNyQixNQUFNLEVBQUUs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TUFBTSxDQUFDLE1BQU0sR0FBRyxFQUFTLENBQUM7UUFDMUIsTUFBTSxDQUFDLE9BQU8sR0FBRyxLQUFLLENBQUM7SUFDekIsQ0FBQztJQUNELE9BQU8sTUFBTSxDQUFDO0FBQ2hCLENBQUMsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7ICQsIHR5cGUgUVJMIH0gZnJvbSAnLi4vcXJsL3FybC5wdWJsaWMnO1xuaW1wb3J0IHsgYXNzZXJ0UXJsIH0gZnJvbSAnLi4vcXJsL3FybC1jbGFzcyc7XG5pbXBvcnQge1xuICB0eXBlIFJlc291cmNlUmV0dXJuLFxuICB0eXBlIFJlc291cmNlRGVzY3JpcHRvcixcbiAgdHlwZSBSZXNvdXJjZUZuLFxuICBydW5SZXNvdXJjZSxcbiAgVGFza0ZsYWdzSXNEaXJ0eSxcbiAgVGFza0ZsYWdzSXNSZXNvdXJjZSxcbiAgVGFzayxcbiAgdHlwZSBSZXNvdXJjZVJldHVybkludGVybmFsLFxufSBmcm9tICcuL3VzZS10YXNrJztcbmltcG9ydCB7IEZyYWdtZW50LCBqc3ggfSBmcm9tICcuLi9yZW5kZXIvanN4L2pzeC1ydW50aW1lJztcbmltcG9ydCB0eXBlIHsgSlNYTm9kZSB9IGZyb20gJy4uL3JlbmRlci9qc3gvdHlwZXMvanN4LW5vZGUnO1xuaW1wb3J0IHsgaXNTZXJ2ZXJQbGF0Zm9ybSB9IGZyb20gJy4uL3BsYXRmb3JtL3BsYXRmb3JtJztcbmltcG9ydCB7IHVudHJhY2ssIHVzZUJpbmRJbnZva2VDb250ZXh0IH0gZnJvbSAnLi91c2UtY29yZSc7XG5cbmltcG9ydCB0eXBlIHsgQ29udGFpbmVyU3RhdGUsIEdldE9iaklEIH0gZnJvbSAnLi4vY29udGFpbmVyL2NvbnRhaW5lcic7XG5pbXBvcnQgeyB1c2VTZXF1ZW50aWFsU2NvcGUgfSBmcm9tICcuL3VzZS1zZXF1ZW50aWFsLXNjb3BlJztcbmltcG9ydCB7IGNyZWF0ZVByb3h5IH0gZnJvbSAnLi4vc3RhdGUvc3RvcmUnO1xuaW1wb3J0IHsgZ2V0UHJveHlUYXJnZXQgfSBmcm9tICcuLi9zdGF0ZS9jb21tb24nO1xuaW1wb3J0IHsgaXNTaWduYWwsIHR5cGUgU2lnbmFsIH0gZnJvbSAnLi4vc3RhdGUvc2lnbmFsJztcbmltcG9ydCB7IGlzT2JqZWN0IH0gZnJvbSAnLi4vdXRpbC90eXBlcyc7XG5pbXBvcnQgeyBpc1Byb21pc2UgfSBmcm9tICcuLi91dGlsL3Byb21pc2VzJztcblxuLyoqXG4gKiBPcHRpb25zIHRvIHBhc3MgdG8gYHVzZVJlc291cmNlJCgpYFxuICpcbiAqIEBwdWJsaWNcbiAqIEBzZWUgdXNlUmVzb3VyY2VcbiAqL1xuZXhwb3J0IGludGVyZmFjZSBSZXNvdXJjZU9wdGlvbnMge1xuICAvKipcbiAgICogVGltZW91dCBpbiBtaWxsaXNlY29uZHMuIElmIHRoZSByZXNvdXJjZSB0YWtlcyBtb3JlIHRoYW4gdGhlIHNwZWNpZmllZCBtaWxsaXNlY29uZCwgaXQgd2lsbFxuICAgKiB0aW1lb3V0LiBSZXN1bHRpbmcgb24gYSByZWplY3RlZCByZXNvdXJjZS5cbiAgICovXG4gIHRpbWVvdXQ/OiBudW1iZXI7XG59XG5cbi8vIDxkb2NzIG1hcmtkb3duPVwiLi4vcmVhZG1lLm1kI3VzZVJlc291cmNlXCI+XG4vLyAhIURPIE5PVCBFRElUIFRISVMgQ09NTUVOVCBESVJFQ1RMWSEhIVxuLy8gKGVkaXQgLi4vcmVhZG1lLm1kI3VzZVJlc291cmNlIGluc3RlYWQpXG4vKipcbiAqIFRoaXMgbWV0aG9kIHdvcmtzIGxpa2UgYW4gYXN5bmMgbWVtb2l6ZWQgZnVuY3Rpb24gdGhhdCBydW5zIHdoZW5ldmVyIHNvbWUgdHJhY2tlZCB2YWx1ZSBjaGFuZ2VzXG4gKiBhbmQgcmV0dXJucyBzb21lIGRhdGEuXG4gKlxuICogYHVzZVJlc291cmNlYCBob3dldmVyIHJldHVybnMgaW1tZWRpYXRlIGEgYFJlc291cmNlUmV0dXJuYCBvYmplY3QgdGhhdCBjb250YWlucyB0aGUgZGF0YSBhbmQgYVxuICogc3RhdGUgdGhhdCBpbmRpY2F0ZXMgaWYgdGhlIGRhdGEgaXMgYXZhaWxhYmxlIG9yIG5vdC5cbiAqXG4gKiBUaGUgc3RhdHVzIGNhbiBiZSBvbmUgb2YgdGhlIGZvbGxvd2luZzpcbiAqXG4gKiAtICdwZW5kaW5nJyAtIHRoZSBkYXRhIGlzIG5vdCB5ZXQgYXZhaWxhYmxlLlxuICogLSAncmVzb2x2ZWQnIC0gdGhlIGRhdGEgaXMgYXZhaWxhYmxlLlxuICogLSAncmVqZWN0ZWQnIC0gdGhlIGRhdGEgaXMgbm90IGF2YWlsYWJsZSBkdWUgdG8gYW4gZXJyb3Igb3IgdGltZW91dC5cbiAqXG4gKiAjIyMgRXhhbXBsZVxuICpcbiAqIEV4YW1wbGUgc2hvd2luZyBob3cgYHVzZVJlc291cmNlYCB0byBwZXJmb3JtIGEgZmV0Y2ggdG8gcmVxdWVzdCB0aGUgd2VhdGhlciwgd2hlbmV2ZXIgdGhlIGlucHV0XG4gKiBjaXR5IG5hbWUgY2hhbmdlcy5cbiAqXG4gKiBgYGB0c3hcbiAqIGNvbnN0IENtcCA9IGNvbXBvbmVudCQoKCkgPT4ge1xuICogICBjb25zdCBzdG9yZSA9IHVzZVN0b3JlKHtcbiAqICAgICBjaXR5OiAnJyxcbiAqICAgfSk7XG4gKlxuICogICBjb25zdCB3ZWF0aGVyUmVzb3VyY2UgPSB1c2VSZXNvdXJjZSQ8YW55Pihhc3luYyAoeyB0cmFjaywgY2xlYW51cCB9KSA9PiB7XG4gKiAgICAgY29uc3QgY2l0eU5hbWUgPSB0cmFjaygoKSA9PiBzdG9yZS5jaXR5KTtcbiAqICAgICBjb25zdCBhYm9ydENvbnRyb2xsZXIgPSBuZXcgQWJvcnRDb250cm9sbGVyKCk7XG4gKiAgICAgY2xlYW51cCgoKSA9PiBhYm9ydENvbnRyb2xsZXIuYWJvcnQoJ2NsZWFudXAnKSk7XG4gKiAgICAgY29uc3QgcmVzID0gYXdhaXQgZmV0Y2goYGh0dHA6Ly93ZWF0aGVyZGF0YS5jb20/Y2l0eT0ke2NpdHlOYW1lfWAsIHtcbiAqICAgICAgIHNpZ25hbDogYWJvcnRDb250cm9sbGVyLnNpZ25hbCxcbiAqICAgICB9KTtcbiAqICAgICBjb25zdCBkYXRhID0gcmVzLmpzb24oKTtcbiAqICAgICByZXR1cm4gZGF0YTtcbiAqICAgfSk7XG4gKlxuICogICByZXR1cm4gKFxuICogICAgIDxkaXY+XG4gKiAgICAgICA8aW5wdXQgbmFtZT1cImNpdHlcIiBvbklucHV0JD17KGV2OiBhbnkpID0+IChzdG9yZS5jaXR5ID0gZXYudGFyZ2V0LnZhbHVlKX0gLz5cbiAqICAgICAgIDxSZXNvdXJjZVxuICogICAgICAgICB2YWx1ZT17d2VhdGhlclJlc291cmNlfVxuICogICAgICAgICBvblJlc29sdmVkPXsod2VhdGhlcikgPT4ge1xuICogICAgICAgICAgIHJldHVybiA8ZGl2PlRlbXBlcmF0dXJlOiB7d2VhdGhlci50ZW1wfTwvZGl2PjtcbiAqICAgICAgICAgfX1cbiAqICAgICAgIC8+XG4gKiAgICAgPC9kaXY+XG4gKiAgICk7XG4gKiB9KTtcbiAqIGBgYFxuICpcbiAqIEBwdWJsaWNcbiAqIEBzZWUgUmVzb3VyY2VcbiAqIEBzZWUgUmVzb3VyY2VSZXR1cm5cbiAqL1xuLy8gPC9kb2NzPlxuZXhwb3J0IGNvbnN0IHVzZVJlc291cmNlUXJsID0gPFQ+KFxuICBxcmw6IFFSTDxSZXNvdXJjZUZuPFQ+PixcbiAgb3B0cz86IFJlc291cmNlT3B0aW9uc1xuKTogUmVzb3VyY2VSZXR1cm48VD4gPT4ge1xuICBjb25zdCB7IHZhbCwgc2V0LCBpLCBpQ3R4LCBlbEN0eCB9ID0gdXNlU2VxdWVudGlhbFNjb3BlPFJlc291cmNlUmV0dXJuPFQ+PigpO1xuICBpZiAodmFsICE9IG51bGwpIHtcbiAgICByZXR1cm4gdmFsO1xuICB9XG4gIGFzc2VydFFybChxcmwpO1xuXG4gIGNvbnN0IGNvbnRhaW5lclN0YXRlID0gaUN0eC4kcmVuZGVyQ3R4JC4kc3RhdGljJC4kY29udGFpbmVyU3RhdGUkO1xuICBjb25zdCByZXNvdXJjZSA9IGNyZWF0ZVJlc291cmNlUmV0dXJuPFQ+KGNvbnRhaW5lclN0YXRlLCBvcHRzKTtcbiAgY29uc3QgZWwgPSBlbEN0eC4kZWxlbWVudCQ7XG4gIGNvbnN0IHRhc2sgPSBuZXcgVGFzayhcbiAgICBUYXNrRmxhZ3NJc0RpcnR5IHwgVGFza0ZsYWdzSXNSZXNvdXJjZSxcbiAgICBpLFxuICAgIGVsLFxuICAgIHFybCxcbiAgICByZXNvdXJjZVxuICApIGFzIFJlc291cmNlRGVzY3JpcHRvcjxhbnk+O1xuICBjb25zdCBwcmV2aW91c1dhaXQgPSBQcm9taXNlLmFsbChpQ3R4LiR3YWl0T24kLnNsaWNlKCkpO1xuICBydW5SZXNvdXJjZSh0YXNrLCBjb250YWluZXJTdGF0ZSwgaUN0eC4kcmVuZGVyQ3R4JCwgcHJldmlvdXNXYWl0KTtcbiAgaWYgKCFlbEN0eC4kdGFza3MkKSB7XG4gICAgZWxDdHguJHRhc2tzJCA9IFtdO1xuICB9XG4gIGVsQ3R4LiR0YXNrcyQucHVzaCh0YXNrKTtcbiAgc2V0KHJlc291cmNlKTtcblxuICByZXR1cm4gcmVzb3VyY2U7XG59O1xuXG4vLyA8ZG9jcyBtYXJrZG93bj1cIi4uL3JlYWRtZS5tZCN1c2VSZXNvdXJjZVwiPlxuLy8gISFETyBOT1QgRURJVCBUSElTIENPTU1FTlQgRElSRUNUTFkhISFcbi8vIChlZGl0IC4uL3JlYWRtZS5tZCN1c2VSZXNvdXJjZSBpbnN0ZWFkKVxuLyoqXG4gKiBUaGlzIG1ldGhvZCB3b3JrcyBsaWtlIGFuIGFzeW5jIG1lbW9pemVkIGZ1bmN0aW9uIHRoYXQgcnVucyB3aGVuZXZlciBzb21lIHRyYWNrZWQgdmFsdWUgY2hhbmdlc1xuICogYW5kIHJldHVybnMgc29tZSBkYXRhLlxuICpcbiAqIGB1c2VSZXNvdXJjZWAgaG93ZXZlciByZXR1cm5zIGltbWVkaWF0ZSBhIGBSZXNvdXJjZVJldHVybmAgb2JqZWN0IHRoYXQgY29udGFpbnMgdGhlIGRhdGEgYW5kIGFcbiAqIHN0YXRlIHRoYXQgaW5kaWNhdGVzIGlmIHRoZSBkYXRhIGlzIGF2YWlsYWJsZSBvciBub3QuXG4gKlxuICogVGhlIHN0YXR1cyBjYW4gYmUgb25lIG9mIHRoZSBmb2xsb3dpbmc6XG4gKlxuICogLSAncGVuZGluZycgLSB0aGUgZGF0YSBpcyBub3QgeWV0IGF2YWlsYWJsZS5cbiAqIC0gJ3Jlc29sdmVkJyAtIHRoZSBkYXRhIGlzIGF2YWlsYWJsZS5cbiAqIC0gJ3JlamVjdGVkJyAtIHRoZSBkYXRhIGlzIG5vdCBhdmFpbGFibGUgZHVlIHRvIGFuIGVycm9yIG9yIHRpbWVvdXQuXG4gKlxuICogIyMjIEV4YW1wbGVcbiAqXG4gKiBFeGFtcGxlIHNob3dpbmcgaG93IGB1c2VSZXNvdXJjZWAgdG8gcGVyZm9ybSBhIGZldGNoIHRvIHJlcXVlc3QgdGhlIHdlYXRoZXIsIHdoZW5ldmVyIHRoZSBpbnB1dFxuICogY2l0eSBuYW1lIGNoYW5nZXMuXG4gKlxuICogYGBgdHN4XG4gKiBjb25zdCBDbXAgPSBjb21wb25lbnQkKCgpID0+IHtcbiAqICAgY29uc3Qgc3RvcmUgPSB1c2VTdG9yZSh7XG4gKiAgICAgY2l0eTogJycsXG4gKiAgIH0pO1xuICpcbiAqICAgY29uc3Qgd2VhdGhlclJlc291cmNlID0gdXNlUmVzb3VyY2UkPGFueT4oYXN5bmMgKHsgdHJhY2ssIGNsZWFudXAgfSkgPT4ge1xuICogICAgIGNvbnN0IGNpdHlOYW1lID0gdHJhY2soKCkgPT4gc3RvcmUuY2l0eSk7XG4gKiAgICAgY29uc3QgYWJvcnRDb250cm9sbGVyID0gbmV3IEFib3J0Q29udHJvbGxlcigpO1xuICogICAgIGNsZWFudXAoKCkgPT4gYWJvcnRDb250cm9sbGVyLmFib3J0KCdjbGVhbnVwJykpO1xuICogICAgIGNvbnN0IHJlcyA9IGF3YWl0IGZldGNoKGBodHRwOi8vd2VhdGhlcmRhdGEuY29tP2NpdHk9JHtjaXR5TmFtZX1gLCB7XG4gKiAgICAgICBzaWduYWw6IGFib3J0Q29udHJvbGxlci5zaWduYWwsXG4gKiAgICAgfSk7XG4gKiAgICAgY29uc3QgZGF0YSA9IHJlcy5qc29uKCk7XG4gKiAgICAgcmV0dXJuIGRhdGE7XG4gKiAgIH0pO1xuICpcbiAqICAgcmV0dXJuIChcbiAqICAgICA8ZGl2PlxuICogICAgICAgPGlucHV0IG5hbWU9XCJjaXR5XCIgb25JbnB1dCQ9eyhldjogYW55KSA9PiAoc3RvcmUuY2l0eSA9IGV2LnRhcmdldC52YWx1ZSl9IC8+XG4gKiAgICAgICA8UmVzb3VyY2VcbiAqICAgICAgICAgdmFsdWU9e3dlYXRoZXJSZXNvdXJjZX1cbiAqICAgICAgICAgb25SZXNvbHZlZD17KHdlYXRoZXIpID0+IHtcbiAqICAgICAgICAgICByZXR1cm4gPGRpdj5UZW1wZXJhdHVyZToge3dlYXRoZXIudGVtcH08L2Rpdj47XG4gKiAgICAgICAgIH19XG4gKiAgICAgICAvPlxuICogICAgIDwvZGl2PlxuICogICApO1xuICogfSk7XG4gKiBgYGBcbiAqXG4gKiBAcHVibGljXG4gKiBAc2VlIFJlc291cmNlXG4gKiBAc2VlIFJlc291cmNlUmV0dXJuXG4gKi9cbi8vIDwvZG9jcz5cbmV4cG9ydCBjb25zdCB1c2VSZXNvdXJjZSQgPSA8VD4oXG4gIGdlbmVyYXRvckZuOiBSZXNvdXJjZUZuPFQ+LFxuICBvcHRzPzogUmVzb3VyY2VPcHRpb25zXG4pOiBSZXNvdXJjZVJldHVybjxUPiA9PiB7XG4gIHJldHVybiB1c2VSZXNvdXJjZVFybDxUPigkKGdlbmVyYXRvckZuKSwgb3B0cyk7XG59O1xuXG4vKiogQHB1YmxpYyAqL1xuZXhwb3J0IGludGVyZmFjZSBSZXNvdXJjZVByb3BzPFQ+IHtcbiAgcmVhZG9ubHkgdmFsdWU6IFJlc291cmNlUmV0dXJuPFQ+IHwgU2lnbmFsPFByb21pc2U8VD4gfCBUPiB8IFByb21pc2U8VD47XG4gIG9uUmVzb2x2ZWQ6ICh2YWx1ZTogVCkgPT4gSlNYTm9kZTtcbiAgb25QZW5kaW5nPzogKCkgPT4gSlNYTm9kZTtcbiAgb25SZWplY3RlZD86IChyZWFzb246IEVycm9yKSA9PiBKU1hOb2RlO1xufVxuXG4vLyA8ZG9jcyBtYXJrZG93bj1cIi4uL3JlYWRtZS5tZCN1c2VSZXNvdXJjZVwiPlxuLy8gISFETyBOT1QgRURJVCBUSElTIENPTU1FTlQgRElSRUNUTFkhISFcbi8vIChlZGl0IC4uL3JlYWRtZS5tZCN1c2VSZXNvdXJjZSBpbnN0ZWFkKVxuLyoqXG4gKiBUaGlzIG1ldGhvZCB3b3JrcyBsaWtlIGFuIGFzeW5jIG1lbW9pemVkIGZ1bmN0aW9uIHRoYXQgcnVucyB3aGVuZXZlciBzb21lIHRyYWNrZWQgdmFsdWUgY2hhbmdlc1xuICogYW5kIHJldHVybnMgc29tZSBkYXRhLlxuICpcbiAqIGB1c2VSZXNvdXJjZWAgaG93ZXZlciByZXR1cm5zIGltbWVkaWF0ZSBhIGBSZXNvdXJjZVJldHVybmAgb2JqZWN0IHRoYXQgY29udGFpbnMgdGhlIGRhdGEgYW5kIGFcbiAqIHN0YXRlIHRoYXQgaW5kaWNhdGVzIGlmIHRoZSBkYXRhIGlzIGF2YWlsYWJsZSBvciBub3QuXG4gKlxuICogVGhlIHN0YXR1cyBjYW4gYmUgb25lIG9mIHRoZSBmb2xsb3dpbmc6XG4gKlxuICogLSAncGVuZGluZycgLSB0aGUgZGF0YSBpcyBub3QgeWV0IGF2YWlsYWJsZS5cbiAqIC0gJ3Jlc29sdmVkJyAtIHRoZSBkYXRhIGlzIGF2YWlsYWJsZS5cbiAqIC0gJ3JlamVjdGVkJyAtIHRoZSBkYXRhIGlzIG5vdCBhdmFpbGFibGUgZHVlIHRvIGFuIGVycm9yIG9yIHRpbWVvdXQuXG4gKlxuICogIyMjIEV4YW1wbGVcbiAqXG4gKiBFeGFtcGxlIHNob3dpbmcgaG93IGB1c2VSZXNvdXJjZWAgdG8gcGVyZm9ybSBhIGZldGNoIHRvIHJlcXVlc3QgdGhlIHdlYXRoZXIsIHdoZW5ldmVyIHRoZSBpbnB1dFxuICogY2l0eSBuYW1lIGNoYW5nZXMuXG4gKlxuICogYGBgdHN4XG4gKiBjb25zdCBDbXAgPSBjb21wb25lbnQkKCgpID0+IHtcbiAqICAgY29uc3Qgc3RvcmUgPSB1c2VTdG9yZSh7XG4gKiAgICAgY2l0eTogJycsXG4gKiAgIH0pO1xuICpcbiAqICAgY29uc3Qgd2VhdGhlclJlc291cmNlID0gdXNlUmVzb3VyY2UkPGFueT4oYXN5bmMgKHsgdHJhY2ssIGNsZWFudXAgfSkgPT4ge1xuICogICAgIGNvbnN0IGNpdHlOYW1lID0gdHJhY2soKCkgPT4gc3RvcmUuY2l0eSk7XG4gKiAgICAgY29uc3QgYWJvcnRDb250cm9sbGVyID0gbmV3IEFib3J0Q29udHJvbGxlcigpO1xuICogICAgIGNsZWFudXAoKCkgPT4gYWJvcnRDb250cm9sbGVyLmFib3J0KCdjbGVhbnVwJykpO1xuICogICAgIGNvbnN0IHJlcyA9IGF3YWl0IGZldGNoKGBodHRwOi8vd2VhdGhlcmRhdGEuY29tP2NpdHk9JHtjaXR5TmFtZX1gLCB7XG4gKiAgICAgICBzaWduYWw6IGFib3J0Q29udHJvbGxlci5zaWduYWwsXG4gKiAgICAgfSk7XG4gKiAgICAgY29uc3QgZGF0YSA9IHJlcy5qc29uKCk7XG4gKiAgICAgcmV0dXJuIGRhdGE7XG4gKiAgIH0pO1xuICpcbiAqICAgcmV0dXJuIChcbiAqICAgICA8ZGl2PlxuICogICAgICAgPGlucHV0IG5hbWU9XCJjaXR5XCIgb25JbnB1dCQ9eyhldjogYW55KSA9PiAoc3RvcmUuY2l0eSA9IGV2LnRhcmdldC52YWx1ZSl9IC8+XG4gKiAgICAgICA8UmVzb3VyY2VcbiAqICAgICAgICAgdmFsdWU9e3dlYXRoZXJSZXNvdXJjZX1cbiAqICAgICAgICAgb25SZXNvbHZlZD17KHdlYXRoZXIpID0+IHtcbiAqICAgICAgICAgICByZXR1cm4gPGRpdj5UZW1wZXJhdHVyZToge3dlYXRoZXIudGVtcH08L2Rpdj47XG4gKiAgICAgICAgIH19XG4gKiAgICAgICAvPlxuICogICAgIDwvZGl2PlxuICogICApO1xuICogfSk7XG4gKiBgYGBcbiAqXG4gKiBAcHVibGljXG4gKiBAc2VlIFJlc291cmNlXG4gKiBAc2VlIFJlc291cmNlUmV0dXJuXG4gKi9cbi8vIDwvZG9jcz5cbmV4cG9ydCBjb25zdCBSZXNvdXJjZSA9IDxUPihwcm9wczogUmVzb3VyY2VQcm9wczxUPik6IEpTWE5vZGUgPT4ge1xuICBjb25zdCBpc0Jyb3dzZXIgPSAhaXNTZXJ2ZXJQbGF0Zm9ybSgpO1xuICBjb25zdCByZXNvdXJjZSA9IHByb3BzLnZhbHVlIGFzIFJlc291cmNlUmV0dXJuSW50ZXJuYWw8VD4gfCBQcm9taXNlPFQ+IHwgU2lnbmFsPFQ+O1xuICBsZXQgcHJvbWlzZTogUHJvbWlzZTxUPiB8IHVuZGVmaW5lZDtcbiAgaWYgKGlzUmVzb3VyY2VSZXR1cm4ocmVzb3VyY2UpKSB7XG4gICAgaWYgKGlzQnJvd3Nlcikge1xuICAgICAgaWYgKHByb3BzLm9uUmVqZWN0ZWQpIHtcbiAgICAgICAgcmVzb3VyY2UudmFsdWUuY2F0Y2goKCkgPT4ge30pO1xuICAgICAgICBpZiAocmVzb3VyY2UuX3N0YXRlID09PSAncmVqZWN0ZWQnKSB7XG4gICAgICAgICAgcmV0dXJuIHByb3BzLm9uUmVqZWN0ZWQocmVzb3VyY2UuX2Vycm9yISk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIGlmIChwcm9wcy5vblBlbmRpbmcpIHtcbiAgICAgICAgY29uc3Qgc3RhdGUgPSByZXNvdXJjZS5fc3RhdGU7XG4gICAgICAgIGlmIChzdGF0ZSA9PT0gJ3Jlc29sdmVkJykge1xuICAgICAgICAgIHJldHVybiBwcm9wcy5vblJlc29sdmVkKHJlc291cmNlLl9yZXNvbHZlZCEpO1xuICAgICAgICB9IGVsc2UgaWYgKHN0YXRlID09PSAncGVuZGluZycpIHtcbiAgICAgICAgICByZXR1cm4gcHJvcHMub25QZW5kaW5nKCk7XG4gICAgICAgIH0gZWxzZSBpZiAoc3RhdGUgPT09ICdyZWplY3RlZCcpIHtcbiAgICAgICAgICB0aHJvdyByZXNvdXJjZS5fZXJyb3I7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIGlmICh1bnRyYWNrKCgpID0+IHJlc291cmNlLl9yZXNvbHZlZCkgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICByZXR1cm4gcHJvcHMub25SZXNvbHZlZChyZXNvdXJjZS5fcmVzb2x2ZWQhKTtcbiAgICAgIH1cbiAgICB9XG4gICAgcHJvbWlzZSA9IHJlc291cmNlLnZhbHVlO1xuICB9IGVsc2UgaWYgKGlzUHJvbWlzZShyZXNvdXJjZSkpIHtcbiAgICBwcm9taXNlID0gcmVzb3VyY2U7XG4gIH0gZWxzZSBpZiAoaXNTaWduYWwocmVzb3VyY2UpKSB7XG4gICAgcHJvbWlzZSA9IFByb21pc2UucmVzb2x2ZShyZXNvdXJjZS52YWx1ZSk7XG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIHByb3BzLm9uUmVzb2x2ZWQocmVzb3VyY2UgYXMgVCk7XG4gIH1cblxuICAvLyBSZXNvdXJjZSBwYXRoXG4gIHJldHVybiBqc3goRnJhZ21lbnQsIHtcbiAgICBjaGlsZHJlbjogcHJvbWlzZS50aGVuKFxuICAgICAgdXNlQmluZEludm9rZUNvbnRleHQocHJvcHMub25SZXNvbHZlZCksXG4gICAgICB1c2VCaW5kSW52b2tlQ29udGV4dChwcm9wcy5vblJlamVjdGVkKVxuICAgICksXG4gIH0pO1xufTtcblxuZXhwb3J0IGNvbnN0IF9jcmVhdGVSZXNvdXJjZVJldHVybiA9IDxUPihvcHRzPzogUmVzb3VyY2VPcHRpb25zKTogUmVzb3VyY2VSZXR1cm5JbnRlcm5hbDxUPiA9PiB7XG4gIGNvbnN0IHJlc291cmNlOiBSZXNvdXJjZVJldHVybkludGVybmFsPFQ+ID0ge1xuICAgIF9fYnJhbmQ6ICdyZXNvdXJjZScsXG4gICAgdmFsdWU6IHVuZGVmaW5lZCBhcyBuZXZlcixcbiAgICBsb2FkaW5nOiBpc1NlcnZlclBsYXRmb3JtKCkgPyBmYWxzZSA6IHRydWUsXG4gICAgX3Jlc29sdmVkOiB1bmRlZmluZWQgYXMgbmV2ZXIsXG4gICAgX2Vycm9yOiB1bmRlZmluZWQgYXMgbmV2ZXIsXG4gICAgX3N0YXRlOiAncGVuZGluZycsXG4gICAgX3RpbWVvdXQ6IG9wdHM/LnRpbWVvdXQgPz8gLTEsXG4gICAgX2NhY2hlOiAwLFxuICB9O1xuICByZXR1cm4gcmVzb3VyY2U7XG59O1xuXG5leHBvcnQgY29uc3QgY3JlYXRlUmVzb3VyY2VSZXR1cm4gPSA8VD4oXG4gIGNvbnRhaW5lclN0YXRlOiBDb250YWluZXJTdGF0ZSxcbiAgb3B0cz86IFJlc291cmNlT3B0aW9ucyxcbiAgaW5pdGlhbFByb21pc2U/OiBQcm9taXNlPFQ+XG4pOiBSZXNvdXJjZVJldHVybkludGVybmFsPFQ+ID0+IHtcbiAgY29uc3QgcmVzdWx0ID0gX2NyZWF0ZVJlc291cmNlUmV0dXJuPFQ+KG9wdHMpO1xuICByZXN1bHQudmFsdWUgPSBpbml0aWFsUHJvbWlzZSBhcyBhbnk7XG4gIGNvbnN0IHJlc291cmNlID0gY3JlYXRlUHJveHkocmVzdWx0LCBjb250YWluZXJTdGF0ZSwgdW5kZWZpbmVkKTtcbiAgcmV0dXJuIHJlc291cmNlO1xufTtcblxuZXhwb3J0IGNvbnN0IGdldEludGVybmFsUmVzb3VyY2UgPSA8VD4ocmVzb3VyY2U6IFJlc291cmNlUmV0dXJuPFQ+KTogUmVzb3VyY2VSZXR1cm5JbnRlcm5hbDxUPiA9PiB7XG4gIHJldHVybiBnZXRQcm94eVRhcmdldChyZXNvdXJjZSkgYXMgYW55O1xufTtcblxuZXhwb3J0IGNvbnN0IGlzUmVzb3VyY2VSZXR1cm4gPSAob2JqOiBhbnkpOiBvYmogaXMgUmVzb3VyY2VSZXR1cm48dW5rbm93bj4gPT4ge1xuICByZXR1cm4gaXNPYmplY3Qob2JqKSAmJiBvYmouX19icmFuZCA9PT0gJ3Jlc291cmNlJztcbn07XG5cbmV4cG9ydCBjb25zdCBzZXJpYWxpemVSZXNvdXJjZSA9IChcbiAgcmVzb3VyY2U6IFJlc291cmNlUmV0dXJuSW50ZXJuYWw8dW5rbm93bj4sXG4gIGdldE9iaklkOiBHZXRPYmpJRFxuKSA9PiB7XG4gIGNvbnN0IHN0YXRlID0gcmVzb3VyY2UuX3N0YXRlO1xuICBpZiAoc3RhdGUgPT09ICdyZXNvbHZlZCcpIHtcbiAgICByZXR1cm4gYDAgJHtnZXRPYmpJZChyZXNvdXJjZS5fcmVzb2x2ZWQpfWA7XG4gIH0gZWxzZSBpZiAoc3RhdGUgPT09ICdwZW5kaW5nJykge1xuICAgIHJldHVybiBgMWA7XG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIGAyICR7Z2V0T2JqSWQocmVzb3VyY2UuX2Vycm9yKX1gO1xuICB9XG59O1xuXG5leHBvcnQgY29uc3QgcGFyc2VSZXNvdXJjZVJldHVybiA9IDxUPihkYXRhOiBzdHJpbmcpOiBSZXNvdXJjZVJldHVybkludGVybmFsPFQ+ID0+IHtcbiAgY29uc3QgW2ZpcnN0LCBpZF0gPSBkYXRhLnNwbGl0KCcgJyk7XG4gIGNvbnN0IHJlc3VsdCA9IF9jcmVhdGVSZXNvdXJjZVJldHVybjxUPih1bmRlZmluZWQpO1xuICByZXN1bHQudmFsdWUgPSBQcm9taXNlLnJlc29sdmUoKSBhcyBhbnk7XG4gIGlmIChmaXJzdCA9PT0gJzAnKSB7XG4gICAgcmVzdWx0Ll9zdGF0ZSA9ICdyZXNvbHZlZCc7XG4gICAgcmVzdWx0Ll9yZXNvbHZlZCA9IGlkIGFzIGFueTtcbiAgICByZXN1bHQubG9hZGluZyA9IGZhbHNlO1xuICB9IGVsc2UgaWYgKGZpcnN0ID09PSAnMScpIHtcbiAgICByZXN1bHQuX3N0YXRlID0gJ3BlbmRpbmcnO1xuICAgIHJlc3VsdC52YWx1ZSA9IG5ldyBQcm9taXNlKCgpID0+IHt9KTtcbiAgICByZXN1bHQubG9hZGluZyA9IHRydWU7XG4gIH0gZWxzZSBpZiAoZmlyc3QgPT09ICcyJykge1xuICAgIHJlc3VsdC5fc3RhdGUgPSAncmVqZWN0ZWQnO1xuICAgIHJlc3VsdC5fZXJyb3IgPSBpZCBhcyBhbnk7XG4gICAgcmVzdWx0LmxvYWRpbmcgPSBmYWxzZTtcbiAgfVxuICByZXR1cm4gcmVzdWx0O1xufTtcbiJdfQ==","import { QSlotS } from '../../util/markers';\nimport { Virtual, _jsxC, _jsxQ } from './jsx-runtime';\n/**\n * Allows to project the children of the current component. <Slot/> can only be used within the\n * context of a component defined with `component$`.\n *\n * @public\n */\nexport const Slot = (props) => {\n    return _jsxC(Virtual, {\n        [QSlotS]: '',\n    }, 0, props.name ?? '');\n};\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2xvdC5wdWJsaWMuanMiLCJzb3VyY2VSb290IjoiLi8iLCJzb3VyY2VzIjpbInBhY2thZ2VzL3F3aWsvc3JjL2NvcmUvcmVuZGVyL2pzeC9zbG90LnB1YmxpYy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsTUFBTSxFQUFFLE1BQU0sb0JBQW9CLENBQUM7QUFDNUMsT0FBTyxFQUFFLE9BQU8sRUFBRSxLQUFLLEVBQUUsS0FBSyxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBR3REOzs7OztHQUtHO0FBQ0gsTUFBTSxDQUFDLE1BQU0sSUFBSSxHQUVaLENBQUMsS0FBSyxFQUFFLEVBQUU7SUFDYixPQUFPLEtBQUssQ0FDVixPQUFPLEVBQ1A7UUFDRSxDQUFDLE1BQU0sQ0FBQyxFQUFFLEVBQUU7S0FDYixFQUNELENBQUMsRUFDRCxLQUFLLENBQUMsSUFBSSxJQUFJLEVBQUUsQ0FDakIsQ0FBQztBQUNKLENBQUMsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IFFTbG90UyB9IGZyb20gJy4uLy4uL3V0aWwvbWFya2Vycyc7XG5pbXBvcnQgeyBWaXJ0dWFsLCBfanN4QywgX2pzeFEgfSBmcm9tICcuL2pzeC1ydW50aW1lJztcbmltcG9ydCB0eXBlIHsgRnVuY3Rpb25Db21wb25lbnQgfSBmcm9tICcuL3R5cGVzL2pzeC1ub2RlJztcblxuLyoqXG4gKiBBbGxvd3MgdG8gcHJvamVjdCB0aGUgY2hpbGRyZW4gb2YgdGhlIGN1cnJlbnQgY29tcG9uZW50LiA8U2xvdC8+IGNhbiBvbmx5IGJlIHVzZWQgd2l0aGluIHRoZVxuICogY29udGV4dCBvZiBhIGNvbXBvbmVudCBkZWZpbmVkIHdpdGggYGNvbXBvbmVudCRgLlxuICpcbiAqIEBwdWJsaWNcbiAqL1xuZXhwb3J0IGNvbnN0IFNsb3Q6IEZ1bmN0aW9uQ29tcG9uZW50PHtcbiAgbmFtZT86IHN0cmluZztcbn0+ID0gKHByb3BzKSA9PiB7XG4gIHJldHVybiBfanN4QyhcbiAgICBWaXJ0dWFsLFxuICAgIHtcbiAgICAgIFtRU2xvdFNdOiAnJyxcbiAgICB9LFxuICAgIDAsXG4gICAgcHJvcHMubmFtZSA/PyAnJ1xuICApO1xufTtcbiJdfQ==","import { componentQrl, isQwikComponent, } from '../component/component.public';\nimport { parseQRL, serializeQRL } from '../qrl/qrl';\nimport { isQrl } from '../qrl/qrl-class';\nimport { intToStr } from './container';\nimport { isResourceReturn, parseResourceReturn, serializeResource } from '../use/use-resource';\nimport { isSubscriberDescriptor, parseTask, serializeTask, } from '../use/use-task';\nimport { isDocument } from '../util/element';\nimport { QObjectSignalFlags, SIGNAL_IMMUTABLE, SignalDerived, SignalImpl, SignalWrapper, } from '../state/signal';\nimport { collectSubscriptions, collectValue, mapJoin } from './pause';\nimport { fastWeakSerialize, getSubscriptionManager, LocalSubscriptionManager, } from '../state/common';\nimport { getOrCreateProxy } from '../state/store';\nimport { QObjectManagerSymbol } from '../state/constants';\nimport { serializeDerivedSignalFunc } from '../qrl/inlined-fn';\nimport { assertString, assertTrue } from '../error/assert';\nimport { Fragment, JSXNodeImpl, isJSXNode } from '../render/jsx/jsx-runtime';\nimport { Slot } from '../render/jsx/slot.public';\n/**\n * - 0, 8, 9, A, B, C, D\n * - `\\0`: null character (U+0000 NULL) (only if the next character is not a decimal digit; else it’s\n *   an octal escape sequence)\n * - `\\b`: backspace (U+0008 BACKSPACE)\n * - `\\t`: horizontal tab (U+0009 CHARACTER TABULATION)\n * - `\\n`: line feed (U+000A LINE FEED)\n * - `\\v`: vertical tab (U+000B LINE TABULATION)\n * - `\\f`: form feed (U+000C FORM FEED)\n * - `\\r`: carriage return (U+000D CARRIAGE RETURN)\n * - `\\\"`: double quote (U+0022 QUOTATION MARK)\n * - `\\'`: single quote (U+0027 APOSTROPHE)\n * - `\\\\`: backslash (U+005C REVERSE SOLIDUS)\n */\nexport const UNDEFINED_PREFIX = '\\u0001';\n/**\n * Normalize the shape of the serializer for better inline-cache performance.\n *\n * @param serializer\n * @returns\n */\nfunction serializer(serializer) {\n    return {\n        $prefixCode$: serializer.$prefix$.charCodeAt(0),\n        $prefixChar$: serializer.$prefix$,\n        $test$: serializer.$test$,\n        $serialize$: serializer.$serialize$,\n        $prepare$: serializer.$prepare$,\n        $fill$: serializer.$fill$,\n        $collect$: serializer.$collect$,\n        $subs$: serializer.$subs$,\n    };\n}\nconst QRLSerializer = /*#__PURE__*/ serializer({\n    $prefix$: '\\u0002',\n    $test$: (v) => isQrl(v),\n    $collect$: (v, collector, leaks) => {\n        if (v.$captureRef$) {\n            for (const item of v.$captureRef$) {\n                collectValue(item, collector, leaks);\n            }\n        }\n        if (collector.$prefetch$ === 0) {\n            collector.$qrls$.push(v);\n        }\n    },\n    $serialize$: (obj, getObjId) => {\n        return serializeQRL(obj, {\n            $getObjId$: getObjId,\n        });\n    },\n    $prepare$: (data, containerState) => {\n        return parseQRL(data, containerState.$containerEl$);\n    },\n    $fill$: (qrl, getObject) => {\n        if (qrl.$capture$ && qrl.$capture$.length > 0) {\n            qrl.$captureRef$ = qrl.$capture$.map(getObject);\n            qrl.$capture$ = null;\n        }\n    },\n});\nconst TaskSerializer = /*#__PURE__*/ serializer({\n    $prefix$: '\\u0003',\n    $test$: (v) => isSubscriberDescriptor(v),\n    $collect$: (v, collector, leaks) => {\n        collectValue(v.$qrl$, collector, leaks);\n        if (v.$state$) {\n            collectValue(v.$state$, collector, leaks);\n            if (leaks === true && v.$state$ instanceof SignalImpl) {\n                collectSubscriptions(v.$state$[QObjectManagerSymbol], collector, true);\n            }\n        }\n    },\n    $serialize$: (obj, getObjId) => serializeTask(obj, getObjId),\n    $prepare$: (data) => parseTask(data),\n    $fill$: (task, getObject) => {\n        task.$el$ = getObject(task.$el$);\n        task.$qrl$ = getObject(task.$qrl$);\n        if (task.$state$) {\n            task.$state$ = getObject(task.$state$);\n        }\n    },\n});\nconst ResourceSerializer = /*#__PURE__*/ serializer({\n    $prefix$: '\\u0004',\n    $test$: (v) => isResourceReturn(v),\n    $collect$: (obj, collector, leaks) => {\n        collectValue(obj.value, collector, leaks);\n        collectValue(obj._resolved, collector, leaks);\n    },\n    $serialize$: (obj, getObjId) => {\n        return serializeResource(obj, getObjId);\n    },\n    $prepare$: (data) => {\n        return parseResourceReturn(data);\n    },\n    $fill$: (resource, getObject) => {\n        if (resource._state === 'resolved') {\n            resource._resolved = getObject(resource._resolved);\n            resource.value = Promise.resolve(resource._resolved);\n        }\n        else if (resource._state === 'rejected') {\n            const p = Promise.reject(resource._error);\n            p.catch(() => null);\n            resource._error = getObject(resource._error);\n            resource.value = p;\n        }\n    },\n});\nconst URLSerializer = /*#__PURE__*/ serializer({\n    $prefix$: '\\u0005',\n    $test$: (v) => v instanceof URL,\n    $serialize$: (obj) => obj.href,\n    $prepare$: (data) => new URL(data),\n    $fill$: undefined,\n});\nconst DateSerializer = /*#__PURE__*/ serializer({\n    $prefix$: '\\u0006',\n    $test$: (v) => v instanceof Date,\n    $serialize$: (obj) => obj.toISOString(),\n    $prepare$: (data) => new Date(data),\n    $fill$: undefined,\n});\nconst RegexSerializer = /*#__PURE__*/ serializer({\n    $prefix$: '\\u0007',\n    $test$: (v) => v instanceof RegExp,\n    $serialize$: (obj) => `${obj.flags} ${obj.source}`,\n    $prepare$: (data) => {\n        const space = data.indexOf(' ');\n        const source = data.slice(space + 1);\n        const flags = data.slice(0, space);\n        return new RegExp(source, flags);\n    },\n    $fill$: undefined,\n});\nconst ErrorSerializer = /*#__PURE__*/ serializer({\n    $prefix$: '\\u000E',\n    $test$: (v) => v instanceof Error,\n    $serialize$: (obj) => {\n        return obj.message;\n    },\n    $prepare$: (text) => {\n        const err = new Error(text);\n        err.stack = undefined;\n        return err;\n    },\n    $fill$: undefined,\n});\nconst DocumentSerializer = /*#__PURE__*/ serializer({\n    $prefix$: '\\u000F',\n    $test$: (v) => isDocument(v),\n    $serialize$: undefined,\n    $prepare$: (_, _c, doc) => {\n        return doc;\n    },\n    $fill$: undefined,\n});\nexport const SERIALIZABLE_STATE = Symbol('serializable-data');\nconst ComponentSerializer = /*#__PURE__*/ serializer({\n    $prefix$: '\\u0010',\n    $test$: (obj) => isQwikComponent(obj),\n    $serialize$: (obj, getObjId) => {\n        const [qrl] = obj[SERIALIZABLE_STATE];\n        return serializeQRL(qrl, {\n            $getObjId$: getObjId,\n        });\n    },\n    $prepare$: (data, containerState) => {\n        const qrl = parseQRL(data, containerState.$containerEl$);\n        return componentQrl(qrl);\n    },\n    $fill$: (component, getObject) => {\n        const [qrl] = component[SERIALIZABLE_STATE];\n        if (qrl.$capture$ && qrl.$capture$.length > 0) {\n            qrl.$captureRef$ = qrl.$capture$.map(getObject);\n            qrl.$capture$ = null;\n        }\n    },\n});\nconst DerivedSignalSerializer = /*#__PURE__*/ serializer({\n    $prefix$: '\\u0011',\n    $test$: (obj) => obj instanceof SignalDerived,\n    $collect$: (obj, collector, leaks) => {\n        if (obj.$args$) {\n            for (const arg of obj.$args$) {\n                collectValue(arg, collector, leaks);\n            }\n        }\n    },\n    $serialize$: (signal, getObjID, collector) => {\n        const serialized = serializeDerivedSignalFunc(signal);\n        let index = collector.$inlinedFunctions$.indexOf(serialized);\n        if (index < 0) {\n            collector.$inlinedFunctions$.push(serialized);\n            index = collector.$inlinedFunctions$.length - 1;\n        }\n        return mapJoin(signal.$args$, getObjID, ' ') + ' @' + intToStr(index);\n    },\n    $prepare$: (data) => {\n        const ids = data.split(' ');\n        const args = ids.slice(0, -1);\n        const fn = ids[ids.length - 1];\n        return new SignalDerived(fn, args, fn);\n    },\n    $fill$: (fn, getObject) => {\n        assertString(fn.$func$, 'fn.$func$ should be a string');\n        fn.$func$ = getObject(fn.$func$);\n        fn.$args$ = fn.$args$.map(getObject);\n    },\n});\nconst SignalSerializer = /*#__PURE__*/ serializer({\n    $prefix$: '\\u0012',\n    $test$: (v) => v instanceof SignalImpl,\n    $collect$: (obj, collector, leaks) => {\n        collectValue(obj.untrackedValue, collector, leaks);\n        const mutable = (obj[QObjectSignalFlags] & SIGNAL_IMMUTABLE) === 0;\n        if (leaks === true && mutable) {\n            collectSubscriptions(obj[QObjectManagerSymbol], collector, true);\n        }\n        return obj;\n    },\n    $serialize$: (obj, getObjId) => {\n        return getObjId(obj.untrackedValue);\n    },\n    $prepare$: (data, containerState) => {\n        return new SignalImpl(data, containerState?.$subsManager$?.$createManager$(), 0);\n    },\n    $subs$: (signal, subs) => {\n        signal[QObjectManagerSymbol].$addSubs$(subs);\n    },\n    $fill$: (signal, getObject) => {\n        signal.untrackedValue = getObject(signal.untrackedValue);\n    },\n});\nconst SignalWrapperSerializer = /*#__PURE__*/ serializer({\n    $prefix$: '\\u0013',\n    $test$: (v) => v instanceof SignalWrapper,\n    $collect$(obj, collector, leaks) {\n        collectValue(obj.ref, collector, leaks);\n        if (fastWeakSerialize(obj.ref)) {\n            const localManager = getSubscriptionManager(obj.ref);\n            if (isTreeShakeable(collector.$containerState$.$subsManager$, localManager, leaks)) {\n                collectValue(obj.ref[obj.prop], collector, leaks);\n            }\n        }\n        return obj;\n    },\n    $serialize$: (obj, getObjId) => {\n        return `${getObjId(obj.ref)} ${obj.prop}`;\n    },\n    $prepare$: (data) => {\n        const [id, prop] = data.split(' ');\n        return new SignalWrapper(id, prop);\n    },\n    $fill$: (signal, getObject) => {\n        signal.ref = getObject(signal.ref);\n    },\n});\nconst NoFiniteNumberSerializer = /*#__PURE__*/ serializer({\n    $prefix$: '\\u0014',\n    $test$: (v) => typeof v === 'number',\n    $serialize$: (v) => {\n        return String(v);\n    },\n    $prepare$: (data) => {\n        return Number(data);\n    },\n    $fill$: undefined,\n});\nconst URLSearchParamsSerializer = /*#__PURE__*/ serializer({\n    $prefix$: '\\u0015',\n    $test$: (v) => v instanceof URLSearchParams,\n    $serialize$: (obj) => obj.toString(),\n    $prepare$: (data) => new URLSearchParams(data),\n    $fill$: undefined,\n});\nconst FormDataSerializer = /*#__PURE__*/ serializer({\n    $prefix$: '\\u0016',\n    $test$: (v) => typeof FormData !== 'undefined' && v instanceof globalThis.FormData,\n    $serialize$: (formData) => {\n        const array = [];\n        formData.forEach((value, key) => {\n            if (typeof value === 'string') {\n                array.push([key, value]);\n            }\n            else {\n                array.push([key, value.name]);\n            }\n        });\n        return JSON.stringify(array);\n    },\n    $prepare$: (data) => {\n        const array = JSON.parse(data);\n        const formData = new FormData();\n        for (const [key, value] of array) {\n            formData.append(key, value);\n        }\n        return formData;\n    },\n    $fill$: undefined,\n});\nconst JSXNodeSerializer = /*#__PURE__*/ serializer({\n    $prefix$: '\\u0017',\n    $test$: (v) => isJSXNode(v),\n    $collect$: (node, collector, leaks) => {\n        collectValue(node.children, collector, leaks);\n        collectValue(node.props, collector, leaks);\n        collectValue(node.immutableProps, collector, leaks);\n        let type = node.type;\n        if (type === Slot) {\n            type = ':slot';\n        }\n        else if (type === Fragment) {\n            type = ':fragment';\n        }\n        collectValue(type, collector, leaks);\n    },\n    $serialize$: (node, getObjID) => {\n        let type = node.type;\n        if (type === Slot) {\n            type = ':slot';\n        }\n        else if (type === Fragment) {\n            type = ':fragment';\n        }\n        return `${getObjID(type)} ${getObjID(node.props)} ${getObjID(node.immutableProps)} ${getObjID(node.children)} ${node.flags}`;\n    },\n    $prepare$: (data) => {\n        const [type, props, immutableProps, children, flags] = data.split(' ');\n        const node = new JSXNodeImpl(type, props, immutableProps, children, parseInt(flags, 10));\n        return node;\n    },\n    $fill$: (node, getObject) => {\n        node.type = getResolveJSXType(getObject(node.type));\n        node.props = getObject(node.props);\n        node.immutableProps = getObject(node.immutableProps);\n        node.children = getObject(node.children);\n    },\n});\nconst BigIntSerializer = /*#__PURE__*/ serializer({\n    $prefix$: '\\u0018',\n    $test$: (v) => typeof v === 'bigint',\n    $serialize$: (v) => {\n        return v.toString();\n    },\n    $prepare$: (data) => {\n        return BigInt(data);\n    },\n    $fill$: undefined,\n});\nconst DATA = Symbol();\nconst SetSerializer = /*#__PURE__*/ serializer({\n    $prefix$: '\\u0019',\n    $test$: (v) => v instanceof Set,\n    $collect$: (set, collector, leaks) => {\n        set.forEach((value) => collectValue(value, collector, leaks));\n    },\n    $serialize$: (v, getObjID) => {\n        return Array.from(v).map(getObjID).join(' ');\n    },\n    $prepare$: (data) => {\n        const set = new Set();\n        set[DATA] = data;\n        return set;\n    },\n    $fill$: (set, getObject) => {\n        const data = set[DATA];\n        set[DATA] = undefined;\n        assertString(data, 'SetSerializer should be defined');\n        const items = data.length === 0 ? [] : data.split(' ');\n        for (const id of items) {\n            set.add(getObject(id));\n        }\n    },\n});\nconst MapSerializer = /*#__PURE__*/ serializer({\n    $prefix$: '\\u001a',\n    $test$: (v) => v instanceof Map,\n    $collect$: (map, collector, leaks) => {\n        map.forEach((value, key) => {\n            collectValue(value, collector, leaks);\n            collectValue(key, collector, leaks);\n        });\n    },\n    $serialize$: (map, getObjID) => {\n        const result = [];\n        map.forEach((value, key) => {\n            result.push(getObjID(key) + ' ' + getObjID(value));\n        });\n        return result.join(' ');\n    },\n    $prepare$: (data) => {\n        const set = new Map();\n        set[DATA] = data;\n        return set;\n    },\n    $fill$: (set, getObject) => {\n        const data = set[DATA];\n        set[DATA] = undefined;\n        assertString(data, 'SetSerializer should be defined');\n        const items = data.length === 0 ? [] : data.split(' ');\n        assertTrue(items.length % 2 === 0, 'MapSerializer should have even number of items');\n        for (let i = 0; i < items.length; i += 2) {\n            set.set(getObject(items[i]), getObject(items[i + 1]));\n        }\n    },\n});\nconst StringSerializer = /*#__PURE__*/ serializer({\n    $prefix$: '\\u001b',\n    $test$: (v) => !!getSerializer(v) || v === UNDEFINED_PREFIX,\n    $serialize$: (v) => v,\n    $prepare$: (data) => data,\n    $fill$: undefined,\n});\nconst serializers = /*#__PURE__*/ [\n    // NULL                       \\u0000\n    // UNDEFINED_PREFIX           \\u0001\n    QRLSerializer, ////////////// \\u0002\n    TaskSerializer, ///////////// \\u0003\n    ResourceSerializer, ///////// \\u0004\n    URLSerializer, ////////////// \\u0005\n    DateSerializer, ///////////// \\u0006\n    RegexSerializer, //////////// \\u0007\n    // BACKSPACE                  \\u0008\n    // HORIZONTAL TAB             \\u0009\n    // NEW LINE                   \\u000A\n    // VERTICAL TAB               \\u000B\n    // FORM FEED                  \\u000C\n    // CARRIAGE RETURN            \\u000D\n    ErrorSerializer, //////////// \\u000E\n    DocumentSerializer, ///////// \\u000F\n    ComponentSerializer, //////// \\u0010\n    DerivedSignalSerializer, //// \\u0011\n    SignalSerializer, /////////// \\u0012\n    SignalWrapperSerializer, //// \\u0013\n    NoFiniteNumberSerializer, /// \\u0014\n    URLSearchParamsSerializer, // \\u0015\n    FormDataSerializer, ///////// \\u0016\n    JSXNodeSerializer, ////////// \\u0017\n    BigIntSerializer, /////////// \\u0018\n    SetSerializer, ////////////// \\u0019\n    MapSerializer, ////////////// \\u001a\n    StringSerializer, /////////// \\u001b\n];\nconst serializerByPrefix = /*#__PURE__*/ (() => {\n    const serializerByPrefix = [];\n    serializers.forEach((s) => {\n        const prefix = s.$prefixCode$;\n        while (serializerByPrefix.length < prefix) {\n            serializerByPrefix.push(undefined);\n        }\n        serializerByPrefix.push(s);\n    });\n    return serializerByPrefix;\n})();\nexport function getSerializer(obj) {\n    if (typeof obj === 'string') {\n        const prefix = obj.charCodeAt(0);\n        if (prefix < serializerByPrefix.length) {\n            return serializerByPrefix[prefix];\n        }\n    }\n    return undefined;\n}\nconst collectorSerializers = /*#__PURE__*/ serializers.filter((a) => a.$collect$);\nexport const canSerialize = (obj) => {\n    for (const s of serializers) {\n        if (s.$test$(obj)) {\n            return true;\n        }\n    }\n    return false;\n};\nexport const collectDeps = (obj, collector, leaks) => {\n    for (const s of collectorSerializers) {\n        if (s.$test$(obj)) {\n            s.$collect$(obj, collector, leaks);\n            return true;\n        }\n    }\n    return false;\n};\nexport const serializeValue = (obj, getObjID, collector, containerState) => {\n    for (const s of serializers) {\n        if (s.$test$(obj)) {\n            let value = s.$prefixChar$;\n            if (s.$serialize$) {\n                value += s.$serialize$(obj, getObjID, collector, containerState);\n            }\n            return value;\n        }\n    }\n    if (typeof obj === 'string') {\n        return obj;\n    }\n    return undefined;\n};\nexport const createParser = (containerState, doc) => {\n    const fillMap = new Map();\n    const subsMap = new Map();\n    return {\n        prepare(data) {\n            const serializer = getSerializer(data);\n            if (serializer) {\n                const value = serializer.$prepare$(data.slice(1), containerState, doc);\n                if (serializer.$fill$) {\n                    fillMap.set(value, serializer);\n                }\n                if (serializer.$subs$) {\n                    subsMap.set(value, serializer);\n                }\n                return value;\n            }\n            return data;\n        },\n        subs(obj, subs) {\n            const serializer = subsMap.get(obj);\n            if (serializer) {\n                serializer.$subs$(obj, subs, containerState);\n                return true;\n            }\n            return false;\n        },\n        fill(obj, getObject) {\n            const serializer = fillMap.get(obj);\n            if (serializer) {\n                serializer.$fill$(obj, getObject, containerState);\n                return true;\n            }\n            return false;\n        },\n    };\n};\nexport const OBJECT_TRANSFORMS = {\n    '!': (obj, containerState) => {\n        return containerState.$proxyMap$.get(obj) ?? getOrCreateProxy(obj, containerState);\n    },\n    '~': (obj) => {\n        return Promise.resolve(obj);\n    },\n    _: (obj) => {\n        return Promise.reject(obj);\n    },\n};\nconst isTreeShakeable = (manager, target, leaks) => {\n    if (typeof leaks === 'boolean') {\n        return leaks;\n    }\n    const localManager = manager.$groupToManagers$.get(leaks);\n    if (localManager && localManager.length > 0) {\n        if (localManager.length === 1) {\n            return localManager[0] !== target;\n        }\n        return true;\n    }\n    return false;\n};\nconst getResolveJSXType = (type) => {\n    if (type === ':slot') {\n        return Slot;\n    }\n    if (type === ':fragment') {\n        return Fragment;\n    }\n    return type;\n};\n//# sourceMappingURL=data:application/json;base64,","import { assertFail, assertTrue } from '../error/assert';\nimport { qError, QError_verifySerializable } from '../error/error';\nimport { isNode } from '../util/element';\nimport { seal } from '../util/qdev';\nimport { isArray, isFunction, isObject, isSerializableObject } from '../util/types';\nimport { isPromise } from '../util/promises';\nimport { canSerialize } from '../container/serializers';\nimport { isSubscriberDescriptor, } from '../use/use-task';\nimport { notifyChange } from '../render/dom/notify-render';\nimport { logError, throwErrorAndStop } from '../util/log';\nimport { tryGetContext } from './context';\nimport { QObjectFlagsSymbol, QObjectManagerSymbol, QOjectTargetSymbol } from './constants';\n/** @internal */\nexport const verifySerializable = (value, preMessage) => {\n    const seen = new Set();\n    return _verifySerializable(value, seen, '_', preMessage);\n};\nconst _verifySerializable = (value, seen, ctx, preMessage) => {\n    const unwrapped = unwrapProxy(value);\n    if (unwrapped == null) {\n        return value;\n    }\n    if (shouldSerialize(unwrapped)) {\n        if (seen.has(unwrapped)) {\n            return value;\n        }\n        seen.add(unwrapped);\n        if (canSerialize(unwrapped)) {\n            return value;\n        }\n        const typeObj = typeof unwrapped;\n        switch (typeObj) {\n            case 'object':\n                if (isPromise(unwrapped)) {\n                    return value;\n                }\n                if (isNode(unwrapped)) {\n                    return value;\n                }\n                if (isArray(unwrapped)) {\n                    let expectIndex = 0;\n                    // Make sure the array has no holes\n                    unwrapped.forEach((v, i) => {\n                        if (i !== expectIndex) {\n                            throw qError(QError_verifySerializable, unwrapped);\n                        }\n                        _verifySerializable(v, seen, ctx + '[' + i + ']');\n                        expectIndex = i + 1;\n                    });\n                    return value;\n                }\n                if (isSerializableObject(unwrapped)) {\n                    for (const [key, item] of Object.entries(unwrapped)) {\n                        _verifySerializable(item, seen, ctx + '.' + key);\n                    }\n                    return value;\n                }\n                break;\n            case 'boolean':\n            case 'string':\n            case 'number':\n                return value;\n        }\n        let message = '';\n        if (preMessage) {\n            message = preMessage;\n        }\n        else {\n            message = 'Value cannot be serialized';\n        }\n        if (ctx !== '_') {\n            message += ` in ${ctx},`;\n        }\n        if (typeObj === 'object') {\n            message += ` because it's an instance of \"${value?.constructor.name}\". You might need to use 'noSerialize()' or use an object literal instead. Check out https://qwik.builder.io/docs/advanced/dollar/`;\n        }\n        else if (typeObj === 'function') {\n            const fnName = value.name;\n            message += ` because it's a function named \"${fnName}\". You might need to convert it to a QRL using $(fn):\\n\\nconst ${fnName} = $(${String(value)});\\n\\nPlease check out https://qwik.builder.io/docs/advanced/qrl/ for more information.`;\n        }\n        console.error('Trying to serialize', value);\n        throwErrorAndStop(message);\n    }\n    return value;\n};\nconst noSerializeSet = /*#__PURE__*/ new WeakSet();\nconst weakSerializeSet = /*#__PURE__*/ new WeakSet();\nexport const shouldSerialize = (obj) => {\n    if (isObject(obj) || isFunction(obj)) {\n        return !noSerializeSet.has(obj);\n    }\n    return true;\n};\nexport const fastSkipSerialize = (obj) => {\n    return noSerializeSet.has(obj);\n};\nexport const fastWeakSerialize = (obj) => {\n    return weakSerializeSet.has(obj);\n};\n// <docs markdown=\"../readme.md#noSerialize\">\n// !!DO NOT EDIT THIS COMMENT DIRECTLY!!!\n// (edit ../readme.md#noSerialize instead)\n/**\n * Marks a property on a store as non-serializable.\n *\n * At times it is necessary to store values on a store that are non-serializable. Normally this is a\n * runtime error as Store wants to eagerly report when a non-serializable property is assigned to\n * it.\n *\n * You can use `noSerialize()` to mark a value as non-serializable. The value is persisted in the\n * Store but does not survive serialization. The implication is that when your application is\n * resumed, the value of this object will be `undefined`. You will be responsible for recovering\n * from this.\n *\n * See: [noSerialize Tutorial](http://qwik.builder.io/tutorial/store/no-serialize)\n *\n * @public\n */\n// </docs>\nexport const noSerialize = (input) => {\n    if (input != null) {\n        noSerializeSet.add(input);\n    }\n    return input;\n};\n/** @internal */\nexport const _weakSerialize = (input) => {\n    weakSerializeSet.add(input);\n    return input;\n};\nexport const isConnected = (sub) => {\n    if (isSubscriberDescriptor(sub)) {\n        return isConnected(sub.$el$);\n    }\n    else {\n        return !!tryGetContext(sub) || sub.isConnected;\n    }\n};\n/** @public */\nexport const unwrapProxy = (proxy) => {\n    return isObject(proxy) ? getProxyTarget(proxy) ?? proxy : proxy;\n};\nexport const getProxyTarget = (obj) => {\n    return obj[QOjectTargetSymbol];\n};\nexport const getSubscriptionManager = (obj) => {\n    return obj[QObjectManagerSymbol];\n};\nexport const getProxyFlags = (obj) => {\n    return obj[QObjectFlagsSymbol];\n};\nexport const serializeSubscription = (sub, getObjId) => {\n    const type = sub[0];\n    const host = typeof sub[1] === 'string' ? sub[1] : getObjId(sub[1]);\n    if (!host) {\n        return undefined;\n    }\n    let base = type + ' ' + host;\n    let key;\n    if (type === 0) {\n        key = sub[2];\n    }\n    else {\n        const signalID = getObjId(sub[2]);\n        if (!signalID) {\n            return undefined;\n        }\n        if (type <= 2) {\n            key = sub[5];\n            base += ` ${signalID} ${must(getObjId(sub[3]))} ${sub[4]}`;\n        }\n        else if (type <= 4) {\n            key = sub[4];\n            const nodeID = typeof sub[3] === 'string' ? sub[3] : must(getObjId(sub[3]));\n            base += ` ${signalID} ${nodeID}`;\n        }\n        else {\n            assertFail('Should not get here');\n        }\n    }\n    if (key) {\n        base += ` ${encodeURI(key)}`;\n    }\n    return base;\n};\nexport const parseSubscription = (sub, getObject) => {\n    const parts = sub.split(' ');\n    const type = parseInt(parts[0], 10);\n    assertTrue(parts.length >= 2, 'At least 2 parts');\n    const host = getObject(parts[1]);\n    if (!host) {\n        return undefined;\n    }\n    if (isSubscriberDescriptor(host) && !host.$el$) {\n        return undefined;\n    }\n    const subscription = [type, host];\n    if (type === 0) {\n        assertTrue(parts.length <= 3, 'Max 3 parts');\n        subscription.push(safeDecode(parts[2]));\n    }\n    else if (type <= 2) {\n        assertTrue(parts.length === 5 || parts.length === 6, 'Type 1 has 5');\n        subscription.push(getObject(parts[2]), getObject(parts[3]), parts[4], safeDecode(parts[5]));\n    }\n    else if (type <= 4) {\n        assertTrue(parts.length === 4 || parts.length === 5, 'Type 2 has 4');\n        subscription.push(getObject(parts[2]), getObject(parts[3]), safeDecode(parts[4]));\n    }\n    return subscription;\n};\nconst safeDecode = (str) => {\n    if (str !== undefined) {\n        return decodeURI(str);\n    }\n    return undefined;\n};\nexport const createSubscriptionManager = (containerState) => {\n    const groupToManagers = new Map();\n    const manager = {\n        $groupToManagers$: groupToManagers,\n        $createManager$: (initialMap) => {\n            return new LocalSubscriptionManager(groupToManagers, containerState, initialMap);\n        },\n        $clearSub$: (group) => {\n            const managers = groupToManagers.get(group);\n            if (managers) {\n                for (const manager of managers) {\n                    manager.$unsubGroup$(group);\n                }\n                groupToManagers.delete(group);\n                managers.length = 0;\n            }\n        },\n        $clearSignal$: (signal) => {\n            const managers = groupToManagers.get(signal[1]);\n            if (managers) {\n                for (const manager of managers) {\n                    manager.$unsubEntry$(signal);\n                }\n            }\n        },\n    };\n    seal(manager);\n    return manager;\n};\nexport class LocalSubscriptionManager {\n    constructor($groupToManagers$, $containerState$, initialMap) {\n        this.$groupToManagers$ = $groupToManagers$;\n        this.$containerState$ = $containerState$;\n        this.$subs$ = [];\n        if (initialMap) {\n            this.$addSubs$(initialMap);\n        }\n        seal(this);\n    }\n    $addSubs$(subs) {\n        this.$subs$.push(...subs);\n        for (const sub of this.$subs$) {\n            this.$addToGroup$(sub[1], this);\n        }\n    }\n    $addToGroup$(group, manager) {\n        let managers = this.$groupToManagers$.get(group);\n        if (!managers) {\n            this.$groupToManagers$.set(group, (managers = []));\n        }\n        if (!managers.includes(manager)) {\n            managers.push(manager);\n        }\n    }\n    $unsubGroup$(group) {\n        const subs = this.$subs$;\n        for (let i = 0; i < subs.length; i++) {\n            const found = subs[i][1] === group;\n            if (found) {\n                subs.splice(i, 1);\n                i--;\n            }\n        }\n    }\n    $unsubEntry$(entry) {\n        const [type, group, signal, elm] = entry;\n        const subs = this.$subs$;\n        if (type === 1 || type === 2) {\n            const prop = entry[4];\n            for (let i = 0; i < subs.length; i++) {\n                const sub = subs[i];\n                const match = sub[0] === type &&\n                    sub[1] === group &&\n                    sub[2] === signal &&\n                    sub[3] === elm &&\n                    sub[4] === prop;\n                if (match) {\n                    subs.splice(i, 1);\n                    i--;\n                }\n            }\n        }\n        else if (type === 3 || type === 4) {\n            for (let i = 0; i < subs.length; i++) {\n                const sub = subs[i];\n                const match = sub[0] === type && sub[1] === group && sub[2] === signal && sub[3] === elm;\n                if (match) {\n                    subs.splice(i, 1);\n                    i--;\n                }\n            }\n        }\n    }\n    $addSub$(sub, key) {\n        const subs = this.$subs$;\n        const group = sub[1];\n        if (sub[0] === 0 &&\n            subs.some(([_type, _group, _key]) => _type === 0 && _group === group && _key === key)) {\n            return;\n        }\n        subs.push((__lastSubscription = [...sub, key]));\n        this.$addToGroup$(group, this);\n    }\n    $notifySubs$(key) {\n        const subs = this.$subs$;\n        for (const sub of subs) {\n            const compare = sub[sub.length - 1];\n            if (key && compare && compare !== key) {\n                continue;\n            }\n            notifyChange(sub, this.$containerState$);\n        }\n    }\n}\nlet __lastSubscription;\nexport function getLastSubscription() {\n    // HACK(misko): This is a hack to get the last subscription.\n    // It is used by `executeSignalOperation` to update the target element\n    // after the subscription has been created.\n    return __lastSubscription;\n}\nconst must = (a) => {\n    if (a == null) {\n        throw logError('must be non null', a);\n    }\n    return a;\n};\n//# sourceMappingURL=data:application/json;base64,","import { qError, QError_qrlIsNotFunction } from '../error/error';\nimport { getPlatform, isServerPlatform } from '../platform/platform';\nimport { verifySerializable } from '../state/common';\nimport { isSignal } from '../state/signal';\nimport { newInvokeContext, invoke, newInvokeContextFromTuple, tryGetInvokeContext, } from '../use/use-core';\nimport { maybeThen } from '../util/promises';\nimport { qDev, qSerialize, qTest, seal } from '../util/qdev';\nimport { isArray, isFunction } from '../util/types';\nexport const isQrl = (value) => {\n    return typeof value === 'function' && typeof value.getSymbol === 'function';\n};\nexport const createQRL = (chunk, symbol, symbolRef, symbolFn, capture, captureRef, refSymbol) => {\n    if (qDev && qSerialize) {\n        if (captureRef) {\n            for (const item of captureRef) {\n                verifySerializable(item, 'Captured variable in the closure can not be serialized');\n            }\n        }\n    }\n    let _containerEl;\n    const qrl = async function (...args) {\n        const fn = invokeFn.call(this, tryGetInvokeContext());\n        const result = await fn(...args);\n        return result;\n    };\n    const setContainer = (el) => {\n        if (!_containerEl) {\n            _containerEl = el;\n        }\n        return _containerEl;\n    };\n    const resolve = async (containerEl) => {\n        if (containerEl) {\n            setContainer(containerEl);\n        }\n        if (symbolRef !== null) {\n            return symbolRef;\n        }\n        if (symbolFn !== null) {\n            return (symbolRef = symbolFn().then((module) => (qrl.resolved = symbolRef = module[symbol])));\n        }\n        else {\n            const symbol2 = getPlatform().importSymbol(_containerEl, chunk, symbol);\n            return (symbolRef = maybeThen(symbol2, (ref) => {\n                return (qrl.resolved = symbolRef = ref);\n            }));\n        }\n    };\n    const resolveLazy = (containerEl) => {\n        return symbolRef !== null ? symbolRef : resolve(containerEl);\n    };\n    function invokeFn(currentCtx, beforeFn) {\n        return (...args) => {\n            const start = now();\n            const fn = resolveLazy();\n            return maybeThen(fn, (f) => {\n                if (isFunction(f)) {\n                    if (beforeFn && beforeFn() === false) {\n                        return;\n                    }\n                    const baseContext = createOrReuseInvocationContext(currentCtx);\n                    const context = {\n                        ...baseContext,\n                        $qrl$: qrl,\n                    };\n                    if (context.$event$ === undefined) {\n                        context.$event$ = this;\n                    }\n                    emitUsedSymbol(symbol, context.$element$, start);\n                    return invoke.call(this, context, f, ...args);\n                }\n                throw qError(QError_qrlIsNotFunction);\n            });\n        };\n    }\n    const createOrReuseInvocationContext = (invoke) => {\n        if (invoke == null) {\n            return newInvokeContext();\n        }\n        else if (isArray(invoke)) {\n            return newInvokeContextFromTuple(invoke);\n        }\n        else {\n            return invoke;\n        }\n    };\n    const resolvedSymbol = refSymbol ?? symbol;\n    const hash = getSymbolHash(resolvedSymbol);\n    Object.assign(qrl, {\n        getSymbol: () => resolvedSymbol,\n        getHash: () => hash,\n        getCaptured: () => captureRef,\n        resolve,\n        $resolveLazy$: resolveLazy,\n        $setContainer$: setContainer,\n        $chunk$: chunk,\n        $symbol$: symbol,\n        $refSymbol$: refSymbol,\n        $hash$: hash,\n        getFn: invokeFn,\n        $capture$: capture,\n        $captureRef$: captureRef,\n        dev: null,\n        resolved: undefined,\n    });\n    seal(qrl);\n    return qrl;\n};\nexport const getSymbolHash = (symbolName) => {\n    const index = symbolName.lastIndexOf('_');\n    if (index > -1) {\n        return symbolName.slice(index + 1);\n    }\n    return symbolName;\n};\nexport function assertQrl(qrl) {\n    if (qDev) {\n        if (!isQrl(qrl)) {\n            throw new Error('Not a QRL');\n        }\n    }\n}\nexport function assertSignal(obj) {\n    if (qDev) {\n        if (!isSignal(obj)) {\n            throw new Error('Not a Signal');\n        }\n    }\n}\nconst EMITTED = /*#__PURE__*/ new Set();\nexport const emitUsedSymbol = (symbol, element, reqTime) => {\n    if (!EMITTED.has(symbol)) {\n        EMITTED.add(symbol);\n        emitEvent('qsymbol', {\n            symbol,\n            element,\n            reqTime,\n        });\n    }\n};\nexport const emitEvent = (eventName, detail) => {\n    if (!qTest && !isServerPlatform() && typeof document === 'object') {\n        document.dispatchEvent(new CustomEvent(eventName, {\n            bubbles: false,\n            detail,\n        }));\n    }\n};\nconst now = () => {\n    if (qTest || isServerPlatform()) {\n        return 0;\n    }\n    if (typeof performance === 'object') {\n        return performance.now();\n    }\n    return 0;\n};\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicXJsLWNsYXNzLmpzIiwic291cmNlUm9vdCI6Ii4vIiwic291cmNlcyI6WyJwYWNrYWdlcy9xd2lrL3NyYy9jb3JlL3FybC9xcmwtY2xhc3MudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLE1BQU0sRUFBRSx1QkFBdUIsRUFBRSxNQUFNLGdCQUFnQixDQUFDO0FBQ2pFLE9BQU8sRUFBRSxXQUFXLEVBQUUsZ0JBQWdCLEVBQUUsTUFBTSxzQkFBc0IsQ0FBQztBQUNyRSxPQUFPLEVBQUUsa0JBQWtCLEVBQUUsTUFBTSxpQkFBaUIsQ0FBQztBQUNyRCxPQUFPLEVBQUUsUUFBUSxFQUF1QixNQUFNLGlCQUFpQixDQUFDO0FBQ2hFLE9BQU8sRUFFTCxnQkFBZ0IsRUFDaEIsTUFBTSxFQUVOLHlCQUF5QixFQUN6QixtQkFBbUIsR0FDcEIsTUFBTSxpQkFBaUIsQ0FBQztBQUN6QixPQUFPLEVBQUUsU0FBUyxFQUFFLE1BQU0sa0JBQWtCLENBQUM7QUFDN0MsT0FBTyxFQUFFLElBQUksRUFBRSxVQUFVLEVBQUUsS0FBSyxFQUFFLElBQUksRUFBRSxNQUFNLGNBQWMsQ0FBQztBQUM3RCxPQUFPLEVBQUUsT0FBTyxFQUFFLFVBQVUsRUFBdUIsTUFBTSxlQUFlLENBQUM7QUFJekUsTUFBTSxDQUFDLE1BQU0sS0FBSyxHQUFHLENBQWMsS0FBYyxFQUEyQixFQUFFO0lBQzVFLE9BQU8sT0FBTyxLQUFLLEtBQUssVUFBVSxJQUFJLE9BQVEsS0FBYSxDQUFDLFNBQVMsS0FBSyxVQUFVLENBQUM7QUFDdkYsQ0FBQyxDQUFDO0FBZ0NGLE1BQU0sQ0FBQyxNQUFNLFNBQVMsR0FBRyxDQUN2QixLQUFvQixFQUNwQixNQUFjLEVBQ2QsU0FBc0MsRUFDdEMsUUFBeUQsRUFDekQsT0FBa0MsRUFDbEMsVUFBc0MsRUFDdEMsU0FBd0IsRUFDTCxFQUFFO0lBQ3JCLElBQUksSUFBSSxJQUFJLFVBQVUsRUFBRSxDQUFDO1FBQ3ZCLElBQUksVUFBVSxFQUFFLENBQUM7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Q0FBQyxPQUFPLENBQUMsR0FBRyxDQUFDLE1BQU0sQ0FBQyxFQUFFLENBQUM7UUFDekIsT0FBTyxDQUFDLEdBQUcsQ0FBQyxNQUFNLENBQUMsQ0FBQztRQUNwQixTQUFTLENBQUMsU0FBUyxFQUFFO1lBQ25CLE1BQU07WUFDTixPQUFPO1lBQ1AsT0FBTztTQUNSLENBQUMsQ0FBQztJQUNMLENBQUM7QUFDSCxDQUFDLENBQUM7QUFFRixNQUFNLENBQUMsTUFBTSxTQUFTLEdBQUcsQ0FBOEIsU0FBaUIsRUFBRSxNQUFtQixFQUFFLEVBQUU7SUFDL0YsSUFBSSxDQUFDLEtBQUssSUFBSSxDQUFDLGdCQUFnQixFQUFFLElBQUksT0FBTyxRQUFRLEtBQUssUUFBUSxFQUFFLENBQUM7UUFDbEUsUUFBUSxDQUFDLGFBQWEsQ0FDcEIsSUFBSSxXQUFXLENBQUMsU0FBUyxFQUFFO1lBQ3pCLE9BQU8sRUFBRSxLQUFLO1lBQ2QsTUFBTTtTQUNQLENBQU0sQ0FDUixDQUFDO0lBQ0osQ0FBQztBQUNILENBQUMsQ0FBQztBQUVGLE1BQU0sR0FBRyxHQUFHLEdBQUcsRUFBRTtJQUNmLElBQUksS0FBSyxJQUFJLGdCQUFnQixFQUFFLEVBQUUsQ0FBQztRQUNoQyxPQUFPLENBQUMsQ0FBQztJQUNYLENBQUM7SUFDRCxJQUFJLE9BQU8sV0FBVyxLQUFLLFFBQVEsRUFBRSxDQUFDO1FBQ3BDLE9BQU8sV0FBVyxDQUFDLEdBQUcsRUFBRSxDQUFDO0lBQzNCLENBQUM7SUFDRCxPQUFPLENBQUMsQ0FBQztBQUNYLENBQUMsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IHFFcnJvciwgUUVycm9yX3FybElzTm90RnVuY3Rpb24gfSBmcm9tICcuLi9lcnJvci9lcnJvcic7XG5pbXBvcnQgeyBnZXRQbGF0Zm9ybSwgaXNTZXJ2ZXJQbGF0Zm9ybSB9IGZyb20gJy4uL3BsYXRmb3JtL3BsYXRmb3JtJztcbmltcG9ydCB7IHZlcmlmeVNlcmlhbGl6YWJsZSB9IGZyb20gJy4uL3N0YXRlL2NvbW1vbic7XG5pbXBvcnQgeyBpc1NpZ25hbCwgdHlwZSBTaWduYWxJbnRlcm5hbCB9IGZyb20gJy4uL3N0YXRlL3NpZ25hbCc7XG5pbXBvcnQge1xuICB0eXBlIEludm9rZUNvbnRleHQsXG4gIG5ld0ludm9rZUNvbnRleHQsXG4gIGludm9rZSxcbiAgdHlwZSBJbnZva2VUdXBsZSxcbiAgbmV3SW52b2tlQ29udGV4dEZyb21UdXBsZSxcbiAgdHJ5R2V0SW52b2tlQ29udGV4dCxcbn0gZnJvbSAnLi4vdXNlL3VzZS1jb3JlJztcbmltcG9ydCB7IG1heWJlVGhlbiB9IGZyb20gJy4uL3V0aWwvcHJvbWlzZXMnO1xuaW1wb3J0IHsgcURldiwgcVNlcmlhbGl6ZSwgcVRlc3QsIHNlYWwgfSBmcm9tICcuLi91dGlsL3FkZXYnO1xuaW1wb3J0IHsgaXNBcnJheSwgaXNGdW5jdGlvbiwgdHlwZSBWYWx1ZU9yUHJvbWlzZSB9IGZyb20gJy4uL3V0aWwvdHlwZXMnO1xuaW1wb3J0IHR5cGUgeyBRUkxEZXYgfSBmcm9tICcuL3FybCc7XG5pbXBvcnQgdHlwZSB7IFFSTCwgUXJsQXJncywgUXJsUmV0dXJuIH0gZnJvbSAnLi9xcmwucHVibGljJztcblxuZXhwb3J0IGNvbnN0IGlzUXJsID0gPFQgPSB1bmtub3duPih2YWx1ZTogdW5rbm93bik6IHZhbHVlIGlzIFFSTEludGVybmFsPFQ+ID0+IHtcbiAgcmV0dXJuIHR5cGVvZiB2YWx1ZSA9PT0gJ2Z1bmN0aW9uJyAmJiB0eXBlb2YgKHZhbHVlIGFzIGFueSkuZ2V0U3ltYm9sID09PSAnZnVuY3Rpb24nO1xufTtcblxuZXhwb3J0IHR5cGUgUVJMSW50ZXJuYWxNZXRob2RzPFRZUEU+ID0ge1xuICByZWFkb25seSAkY2h1bmskOiBzdHJpbmcgfCBudWxsO1xuICByZWFkb25seSAkc3ltYm9sJDogc3RyaW5nO1xuICByZWFkb25seSAkcmVmU3ltYm9sJDogc3RyaW5nIHwgbnVsbDtcbiAgcmVhZG9ubHkgJGhhc2gkOiBzdHJpbmc7XG5cbiAgJGNhcHR1cmUkOiBzdHJpbmdbXSB8IG51bGw7XG4gICRjYXB0dXJlUmVmJDogdW5rbm93bltdIHwgbnVsbDtcbiAgZGV2OiBRUkxEZXYgfCBudWxsO1xuXG4gIHJlc29sdmVkOiB1bmRlZmluZWQgfCBUWVBFO1xuXG4gIHJlc29sdmUoKTogUHJvbWlzZTxUWVBFPjtcbiAgZ2V0U3ltYm9sKCk6IHN0cmluZztcbiAgZ2V0SGFzaCgpOiBzdHJpbmc7XG4gIGdldENhcHR1cmVkKCk6IHVua25vd25bXSB8IG51bGw7XG4gIGdldEZuKFxuICAgIGN1cnJlbnRDdHg/OiBJbnZva2VDb250ZXh0IHwgSW52b2tlVHVwbGUsXG4gICAgYmVmb3JlRm4/OiAoKSA9PiB2b2lkXG4gICk6IFRZUEUgZXh0ZW5kcyAoLi4uYXJnczogYW55KSA9PiBhbnlcbiAgICA/ICguLi5hcmdzOiBQYXJhbWV0ZXJzPFRZUEU+KSA9PiBWYWx1ZU9yUHJvbWlzZTxSZXR1cm5UeXBlPFRZUEU+PlxuICAgIDogLy8gdW5rbm93biBzbyB3ZSBhbGxvdyBhc3NpZ25pbmcgZnVuY3Rpb24gUVJMcyB0byBhbnlcbiAgICAgIHVua25vd247XG5cbiAgJHNldENvbnRhaW5lciQoY29udGFpbmVyRWw6IEVsZW1lbnQgfCB1bmRlZmluZWQpOiBFbGVtZW50IHwgdW5kZWZpbmVkO1xuICAkcmVzb2x2ZUxhenkkKGNvbnRhaW5lckVsPzogRWxlbWVudCk6IFZhbHVlT3JQcm9taXNlPFRZUEU+O1xufTtcblxuZXhwb3J0IHR5cGUgUVJMSW50ZXJuYWw8VFlQRSA9IHVua25vd24+ID0gUVJMPFRZUEU+ICYgUVJMSW50ZXJuYWxNZXRob2RzPFRZUEU+O1xuXG5leHBvcnQgY29uc3QgY3JlYXRlUVJMID0gPFRZUEU+KFxuICBjaHVuazogc3RyaW5nIHwgbnVsbCxcbiAgc3ltYm9sOiBzdHJpbmcsXG4gIHN5bWJvbFJlZjogbnVsbCB8IFZhbHVlT3JQcm9taXNlPFRZUEU+LFxuICBzeW1ib2xGbjogbnVsbCB8ICgoKSA9PiBQcm9taXNlPFJlY29yZDxzdHJpbmcsIHVua25vd24+PiksXG4gIGNhcHR1cmU6IG51bGwgfCBSZWFkb25seTxzdHJpbmdbXT4sXG4gIGNhcHR1cmVSZWY6IFJlYWRvbmx5PHVua25vd25bXT4gfCBudWxsLFxuICByZWZTeW1ib2w6IHN0cmluZyB8IG51bGxcbik6IFFSTEludGVybmFsPFRZUEU+ID0+IHtcbiAgaWYgKHFEZXYgJiYgcVNlcmlhbGl6ZSkge1xuICAgIGlmIChjYXB0dXJlUmVmKSB7XG4gICAgICBmb3IgKGNvbnN0IGl0ZW0gb2YgY2FwdHVyZVJlZikge1xuICAgICAgICB2ZXJpZnlTZXJpYWxpemFibGUoaXRlbSwgJ0NhcHR1cmVkIHZhcmlhYmxlIGluIHRoZSBjbG9zdXJlIGNhbiBub3QgYmUgc2VyaWFsaXplZCcpO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIGxldCBfY29udGFpbmVyRWw6IEVsZW1lbnQgfCB1bmRlZmluZWQ7XG5cbiAgY29uc3QgcXJsID0gYXN5bmMgZnVuY3Rpb24gKHRoaXM6IHVua25vd24sIC4uLmFyZ3M6IFFybEFyZ3M8VFlQRT4pIHtcbiAgICBjb25zdCBmbiA9IGludm9rZUZuLmNhbGwodGhpcywgdHJ5R2V0SW52b2tlQ29udGV4dCgpKTtcbiAgICBjb25zdCByZXN1bHQgPSBhd2FpdCBmbiguLi5hcmdzKTtcbiAgICByZXR1cm4gcmVzdWx0O1xuICB9IGFzIFFSTEludGVybmFsPFRZUEU+O1xuXG4gIGNvbnN0IHNldENvbnRhaW5lciA9IChlbDogRWxlbWVudCB8IHVuZGVmaW5lZCkgPT4ge1xuICAgIGlmICghX2NvbnRhaW5lckVsKSB7XG4gICAgICBfY29udGFpbmVyRWwgPSBlbDtcbiAgICB9XG4gICAgcmV0dXJuIF9jb250YWluZXJFbDtcbiAgfTtcblxuICBjb25zdCByZXNvbHZlID0gYXN5bmMgKGNvbnRhaW5lckVsPzogRWxlbWVudCk6IFByb21pc2U8VFlQRT4gPT4ge1xuICAgIGlmIChjb250YWluZXJFbCkge1xuICAgICAgc2V0Q29udGFpbmVyKGNvbnRhaW5lckVsKTtcbiAgICB9XG4gICAgaWYgKHN5bWJvbFJlZiAhPT0gbnVsbCkge1xuICAgICAgcmV0dXJuIHN5bWJvbFJlZjtcbiAgICB9XG4gICAgaWYgKHN5bWJvbEZuICE9PSBudWxsKSB7XG4gICAgICByZXR1cm4gKHN5bWJvbFJlZiA9IHN5bWJvbEZuKCkudGhlbihcbiAgICAgICAgKG1vZHVsZSkgPT4gKHFybC5yZXNvbHZlZCA9IHN5bWJvbFJlZiA9IG1vZHVsZVtzeW1ib2xdIGFzIFRZUEUpXG4gICAgICApKTtcbiAgICB9IGVsc2Uge1xuICAgICAgY29uc3Qgc3ltYm9sMiA9IGdldFBsYXRmb3JtKCkuaW1wb3J0U3ltYm9sKF9jb250YWluZXJFbCwgY2h1bmssIHN5bWJvbCk7XG4gICAgICByZXR1cm4gKHN5bWJvbFJlZiA9IG1heWJlVGhlbihzeW1ib2wyLCAocmVmKSA9PiB7XG4gICAgICAgIHJldHVybiAocXJsLnJlc29sdmVkID0gc3ltYm9sUmVmID0gcmVmKTtcbiAgICAgIH0pKTtcbiAgICB9XG4gIH07XG5cbiAgY29uc3QgcmVzb2x2ZUxhenkgPSAoY29udGFpbmVyRWw/OiBFbGVtZW50KTogVmFsdWVPclByb21pc2U8VFlQRT4gPT4ge1xuICAgIHJldHVybiBzeW1ib2xSZWYgIT09IG51bGwgPyBzeW1ib2xSZWYgOiByZXNvbHZlKGNvbnRhaW5lckVsKTtcbiAgfTtcblxuICBmdW5jdGlvbiBpbnZva2VGbihcbiAgICB0aGlzOiB1bmtub3duLFxuICAgIGN1cnJlbnRDdHg/OiBJbnZva2VDb250ZXh0IHwgSW52b2tlVHVwbGUsXG4gICAgYmVmb3JlRm4/OiAoKSA9PiB2b2lkIHwgYm9vbGVhblxuICApIHtcbiAgICByZXR1cm4gKC4uLmFyZ3M6IFFybEFyZ3M8VFlQRT4pOiBRcmxSZXR1cm48VFlQRT4gPT4ge1xuICAgICAgY29uc3Qgc3RhcnQgPSBub3coKTtcbiAgICAgIGNvbnN0IGZuID0gcmVzb2x2ZUxhenkoKSBhcyBUWVBFO1xuICAgICAgcmV0dXJuIG1heWJlVGhlbihmbiwgKGYpID0+IHtcbiAgICAgICAgaWYgKGlzRnVuY3Rpb24oZikpIHtcbiAgICAgICAgICBpZiAoYmVmb3JlRm4gJiYgYmVmb3JlRm4oKSA9PT0gZmFsc2UpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICB9XG4gICAgICAgICAgY29uc3QgYmFzZUNvbnRleHQgPSBjcmVhdGVPclJldXNlSW52b2NhdGlvbkNvbnRleHQoY3VycmVudEN0eCk7XG4gICAgICAgICAgY29uc3QgY29udGV4dDogSW52b2tlQ29udGV4dCA9IHtcbiAgICAgICAgICAgIC4uLmJhc2VDb250ZXh0LFxuICAgICAgICAgICAgJHFybCQ6IHFybCBhcyBRUkxJbnRlcm5hbCxcbiAgICAgICAgICB9O1xuICAgICAgICAgIGlmIChjb250ZXh0LiRldmVudCQgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgY29udGV4dC4kZXZlbnQkID0gdGhpcyBhcyBFdmVudDtcbiAgICAgICAgICB9XG4gICAgICAgICAgZW1pdFVzZWRTeW1ib2woc3ltYm9sLCBjb250ZXh0LiRlbGVtZW50JCwgc3RhcnQpO1xuICAgICAgICAgIHJldHVybiBpbnZva2UuY2FsbCh0aGlzLCBjb250ZXh0LCBmLCAuLi4oYXJncyBhcyBQYXJhbWV0ZXJzPHR5cGVvZiBmPikpO1xuICAgICAgICB9XG4gICAgICAgIHRocm93IHFFcnJvcihRRXJyb3JfcXJsSXNOb3RGdW5jdGlvbik7XG4gICAgICB9KTtcbiAgICB9O1xuICB9XG5cbiAgY29uc3QgY3JlYXRlT3JSZXVzZUludm9jYXRpb25Db250ZXh0ID0gKGludm9rZTogSW52b2tlQ29udGV4dCB8IEludm9rZVR1cGxlIHwgdW5kZWZpbmVkKSA9PiB7XG4gICAgaWYgKGludm9rZSA9PSBudWxsKSB7XG4gICAgICByZXR1cm4gbmV3SW52b2tlQ29udGV4dCgpO1xuICAgIH0gZWxzZSBpZiAoaXNBcnJheShpbnZva2UpKSB7XG4gICAgICByZXR1cm4gbmV3SW52b2tlQ29udGV4dEZyb21UdXBsZShpbnZva2UpO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gaW52b2tlO1xuICAgIH1cbiAgfTtcblxuICBjb25zdCByZXNvbHZlZFN5bWJvbCA9IHJlZlN5bWJvbCA/PyBzeW1ib2w7XG4gIGNvbnN0IGhhc2ggPSBnZXRTeW1ib2xIYXNoKHJlc29sdmVkU3ltYm9sKTtcblxuICBPYmplY3QuYXNzaWduKHFybCwge1xuICAgIGdldFN5bWJvbDogKCkgPT4gcmVzb2x2ZWRTeW1ib2wsXG4gICAgZ2V0SGFzaDogKCkgPT4gaGFzaCxcbiAgICBnZXRDYXB0dXJlZDogKCkgPT4gY2FwdHVyZVJlZixcbiAgICByZXNvbHZlLFxuICAgICRyZXNvbHZlTGF6eSQ6IHJlc29sdmVMYXp5LFxuICAgICRzZXRDb250YWluZXIkOiBzZXRDb250YWluZXIsXG4gICAgJGNodW5rJDogY2h1bmssXG4gICAgJHN5bWJvbCQ6IHN5bWJvbCxcbiAgICAkcmVmU3ltYm9sJDogcmVmU3ltYm9sLFxuICAgICRoYXNoJDogaGFzaCxcbiAgICBnZXRGbjogaW52b2tlRm4sXG5cbiAgICAkY2FwdHVyZSQ6IGNhcHR1cmUsXG4gICAgJGNhcHR1cmVSZWYkOiBjYXB0dXJlUmVmLFxuICAgIGRldjogbnVsbCxcbiAgICByZXNvbHZlZDogdW5kZWZpbmVkLFxuICB9KTtcbiAgc2VhbChxcmwpO1xuICByZXR1cm4gcXJsO1xufTtcblxuZXhwb3J0IGNvbnN0IGdldFN5bWJvbEhhc2ggPSAoc3ltYm9sTmFtZTogc3RyaW5nKSA9PiB7XG4gIGNvbnN0IGluZGV4ID0gc3ltYm9sTmFtZS5sYXN0SW5kZXhPZignXycpO1xuICBpZiAoaW5kZXggPiAtMSkge1xuICAgIHJldHVybiBzeW1ib2xOYW1lLnNsaWNlKGluZGV4ICsgMSk7XG4gIH1cbiAgcmV0dXJuIHN5bWJvbE5hbWU7XG59O1xuXG5leHBvcnQgZnVuY3Rpb24gYXNzZXJ0UXJsPFQ+KHFybDogUVJMPFQ+KTogYXNzZXJ0cyBxcmwgaXMgUVJMSW50ZXJuYWw8VD4ge1xuICBpZiAocURldikge1xuICAgIGlmICghaXNRcmwocXJsKSkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCdOb3QgYSBRUkwnKTtcbiAgICB9XG4gIH1cbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGFzc2VydFNpZ25hbDxUPihvYmo6IHVua25vd24pOiBhc3NlcnRzIG9iaiBpcyBTaWduYWxJbnRlcm5hbDxUPiB7XG4gIGlmIChxRGV2KSB7XG4gICAgaWYgKCFpc1NpZ25hbChvYmopKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ05vdCBhIFNpZ25hbCcpO1xuICAgIH1cbiAgfVxufVxuXG5jb25zdCBFTUlUVEVEID0gLyojX19QVVJFX18qLyBuZXcgU2V0KCk7XG5cbmV4cG9ydCBjb25zdCBlbWl0VXNlZFN5bWJvbCA9IChzeW1ib2w6IHN0cmluZywgZWxlbWVudDogRWxlbWVudCB8IHVuZGVmaW5lZCwgcmVxVGltZTogbnVtYmVyKSA9PiB7XG4gIGlmICghRU1JVFRFRC5oYXMoc3ltYm9sKSkge1xuICAgIEVNSVRURUQuYWRkKHN5bWJvbCk7XG4gICAgZW1pdEV2ZW50KCdxc3ltYm9sJywge1xuICAgICAgc3ltYm9sLFxuICAgICAgZWxlbWVudCxcbiAgICAgIHJlcVRpbWUsXG4gICAgfSk7XG4gIH1cbn07XG5cbmV4cG9ydCBjb25zdCBlbWl0RXZlbnQgPSA8VCBleHRlbmRzIEN1c3RvbUV2ZW50ID0gYW55PihldmVudE5hbWU6IHN0cmluZywgZGV0YWlsOiBUWydkZXRhaWwnXSkgPT4ge1xuICBpZiAoIXFUZXN0ICYmICFpc1NlcnZlclBsYXRmb3JtKCkgJiYgdHlwZW9mIGRvY3VtZW50ID09PSAnb2JqZWN0Jykge1xuICAgIGRvY3VtZW50LmRpc3BhdGNoRXZlbnQoXG4gICAgICBuZXcgQ3VzdG9tRXZlbnQoZXZlbnROYW1lLCB7XG4gICAgICAgIGJ1YmJsZXM6IGZhbHNlLFxuICAgICAgICBkZXRhaWwsXG4gICAgICB9KSBhcyBUXG4gICAgKTtcbiAgfVxufTtcblxuY29uc3Qgbm93ID0gKCkgPT4ge1xuICBpZiAocVRlc3QgfHwgaXNTZXJ2ZXJQbGF0Zm9ybSgpKSB7XG4gICAgcmV0dXJuIDA7XG4gIH1cbiAgaWYgKHR5cGVvZiBwZXJmb3JtYW5jZSA9PT0gJ29iamVjdCcpIHtcbiAgICByZXR1cm4gcGVyZm9ybWFuY2Uubm93KCk7XG4gIH1cbiAgcmV0dXJuIDA7XG59O1xuIl19","import { implicit$FirstArg } from '../util/implicit_dollar';\nimport { qDev, qRuntimeQrl } from '../util/qdev';\nimport { createQRL } from './qrl-class';\nlet runtimeSymbolId = 0;\n// <docs markdown=\"../readme.md#$\">\n// !!DO NOT EDIT THIS COMMENT DIRECTLY!!!\n// (edit ../readme.md#$ instead)\n/**\n * Qwik Optimizer marker function.\n *\n * Use `$(...)` to tell Qwik Optimizer to extract the expression in `$(...)` into a lazy-loadable\n * resource referenced by `QRL`.\n *\n * @param expression - Expression which should be lazy loaded\n * @public\n * @see `implicit$FirstArg` for additional `____$(...)` rules.\n *\n * In this example, `$(...)` is used to capture the callback function of `onmousemove` into a\n * lazy-loadable reference. This allows the code to refer to the function without actually\n * loading the function. In this example, the callback function does not get loaded until\n * `mousemove` event fires.\n *\n * ```tsx\n * useOnDocument(\n *   'mousemove',\n *   $((event) => console.log('mousemove', event))\n * );\n * ```\n *\n * In this code, the Qwik Optimizer detects `$(...)` and transforms the code into:\n *\n * ```tsx\n * // FILE: <current file>\n * useOnDocument('mousemove', qrl('./chunk-abc.js', 'onMousemove'));\n *\n * // FILE: chunk-abc.js\n * export const onMousemove = () => console.log('mousemove');\n * ```\n *\n * ## Special Rules\n *\n * The Qwik Optimizer places special rules on functions that can be lazy-loaded.\n *\n * 1. The expression of the `$(expression)` function must be importable by the system.\n * (expression shows up in `import` or has `export`)\n * 2. If inlined function, then all lexically captured values must be:\n *    - importable (vars show up in `import`s or `export`s)\n *    - const (The capturing process differs from JS capturing in that writing to captured\n * variables does not update them, and therefore writes are forbidden. The best practice is that\n * all captured variables are constants.)\n *    - Must be runtime serializable.\n *\n * ```tsx\n *\n * import { createContextId, useContext, useContextProvider } from './use/use-context';\n * import { Resource, useResource$ } from './use/use-resource';\n *\n * export const greet = () => console.log('greet');\n * function topLevelFn() {}\n *\n * function myCode() {\n *   const store = useStore({});\n *   function localFn() {}\n *   // Valid Examples\n *   $(greet); // greet is importable\n *   $(() => greet()); // greet is importable;\n *   $(() => console.log(store)); // store is serializable.\n *\n *   // Compile time errors\n *   $(topLevelFn); // ERROR: `topLevelFn` not importable\n *   $(() => topLevelFn()); // ERROR: `topLevelFn` not importable\n *\n *   // Runtime errors\n *   $(localFn); // ERROR: `localFn` fails serialization\n *   $(() => localFn()); // ERROR: `localFn` fails serialization\n * }\n *\n * ```\n */\n// </docs>\nexport const $ = (expression) => {\n    if (!qRuntimeQrl && qDev) {\n        throw new Error('Optimizer should replace all usages of $() with some special syntax. If you need to create a QRL manually, use inlinedQrl() instead.');\n    }\n    return createQRL(null, 's' + runtimeSymbolId++, expression, null, null, null, null);\n};\n/** @public */\nexport const eventQrl = (qrl) => {\n    return qrl;\n};\n/** @public */\nexport const event$ = implicit$FirstArg(eventQrl);\n//# sourceMappingURL=data:application/json;base64,","import { $ } from '../qrl/qrl.public';\nimport { OnRenderProp, QSlot } from '../util/markers';\nimport { Virtual, _jsxC } from '../render/jsx/jsx-runtime';\nimport { SERIALIZABLE_STATE } from '../container/serializers';\nimport { qTest } from '../util/qdev';\nimport { assertQrl } from '../qrl/qrl-class';\nimport { _IMMUTABLE } from '../state/constants';\nimport { assertNumber } from '../error/assert';\n// const ELEMENTS_SKIP_KEY: JSXTagName[] = ['html', 'body', 'head'];\n// <docs markdown=\"../readme.md#component\">\n// !!DO NOT EDIT THIS COMMENT DIRECTLY!!!\n// (edit ../readme.md#component instead)\n/**\n * Declare a Qwik component that can be used to create UI.\n *\n * Use `component$` to declare a Qwik component. A Qwik component is a special kind of component\n * that allows the Qwik framework to lazy load and execute the component independently of other Qwik\n * components as well as lazy load the component's life-cycle hooks and event handlers.\n *\n * Side note: You can also declare regular (standard JSX) components that will have standard\n * synchronous behavior.\n *\n * Qwik component is a facade that describes how the component should be used without forcing the\n * implementation of the component to be eagerly loaded. A minimum Qwik definition consists of:\n *\n * ### Example\n *\n * An example showing how to create a counter component:\n *\n * ```tsx\n * export interface CounterProps {\n *   initialValue?: number;\n *   step?: number;\n * }\n * export const Counter = component$((props: CounterProps) => {\n *   const state = useStore({ count: props.initialValue || 0 });\n *   return (\n *     <div>\n *       <span>{state.count}</span>\n *       <button onClick$={() => (state.count += props.step || 1)}>+</button>\n *     </div>\n *   );\n * });\n * ```\n *\n * - `component$` is how a component gets declared.\n * - `{ value?: number; step?: number }` declares the public (props) interface of the component.\n * - `{ count: number }` declares the private (state) interface of the component.\n *\n * The above can then be used like so:\n *\n * ```tsx\n * export const OtherComponent = component$(() => {\n *   return <Counter initialValue={100} />;\n * });\n * ```\n *\n * See also: `component`, `useCleanup`, `onResume`, `onPause`, `useOn`, `useOnDocument`,\n * `useOnWindow`, `useStyles`\n *\n * @public\n */\n// </docs>\nexport const componentQrl = (componentQrl) => {\n    // Return a QComponent Factory function.\n    function QwikComponent(props, key, flags) {\n        assertQrl(componentQrl);\n        assertNumber(flags, 'The Qwik Component was not invoked correctly');\n        const hash = qTest ? 'sX' : componentQrl.$hash$.slice(0, 4);\n        const finalKey = hash + ':' + (key ? key : '');\n        return _jsxC(Virtual, {\n            [OnRenderProp]: componentQrl,\n            [QSlot]: props[QSlot],\n            [_IMMUTABLE]: props[_IMMUTABLE],\n            children: props.children,\n            props,\n        }, flags, finalKey);\n    }\n    QwikComponent[SERIALIZABLE_STATE] = [componentQrl];\n    return QwikComponent;\n};\nexport const isQwikComponent = (component) => {\n    return typeof component == 'function' && component[SERIALIZABLE_STATE] !== undefined;\n};\n// <docs markdown=\"../readme.md#component\">\n// !!DO NOT EDIT THIS COMMENT DIRECTLY!!!\n// (edit ../readme.md#component instead)\n/**\n * Declare a Qwik component that can be used to create UI.\n *\n * Use `component$` to declare a Qwik component. A Qwik component is a special kind of component\n * that allows the Qwik framework to lazy load and execute the component independently of other Qwik\n * components as well as lazy load the component's life-cycle hooks and event handlers.\n *\n * Side note: You can also declare regular (standard JSX) components that will have standard\n * synchronous behavior.\n *\n * Qwik component is a facade that describes how the component should be used without forcing the\n * implementation of the component to be eagerly loaded. A minimum Qwik definition consists of:\n *\n * ### Example\n *\n * An example showing how to create a counter component:\n *\n * ```tsx\n * export interface CounterProps {\n *   initialValue?: number;\n *   step?: number;\n * }\n * export const Counter = component$((props: CounterProps) => {\n *   const state = useStore({ count: props.initialValue || 0 });\n *   return (\n *     <div>\n *       <span>{state.count}</span>\n *       <button onClick$={() => (state.count += props.step || 1)}>+</button>\n *     </div>\n *   );\n * });\n * ```\n *\n * - `component$` is how a component gets declared.\n * - `{ value?: number; step?: number }` declares the public (props) interface of the component.\n * - `{ count: number }` declares the private (state) interface of the component.\n *\n * The above can then be used like so:\n *\n * ```tsx\n * export const OtherComponent = component$(() => {\n *   return <Counter initialValue={100} />;\n * });\n * ```\n *\n * See also: `component`, `useCleanup`, `onResume`, `onPause`, `useOn`, `useOnDocument`,\n * `useOnWindow`, `useStyles`\n *\n * @public\n */\n// </docs>\nexport const component$ = (onMount) => {\n    return componentQrl($(onMount));\n};\n//# sourceMappingURL=data:application/json;base64,","/* eslint-disable */\nimport { jsx } from './jsx-runtime';\nimport { isArray } from '../../util/types';\nexport const flattenArray = (array, dst) => {\n    // Yes this function is just Array.flat, but we need to run on old versions of Node.\n    if (!dst)\n        dst = [];\n    for (const item of array) {\n        if (isArray(item)) {\n            flattenArray(item, dst);\n        }\n        else {\n            dst.push(item);\n        }\n    }\n    return dst;\n};\n/** @public */\nexport function h(type, props, ...children) {\n    // Using legacy h() jsx transform and morphing it\n    // so it can use the modern vdom structure\n    // https://reactjs.org/blog/2020/09/22/introducing-the-new-jsx-transform.html\n    // https://www.typescriptlang.org/tsconfig#jsxImportSource\n    const normalizedProps = {\n        children: arguments.length > 2 ? flattenArray(children) : undefined,\n    };\n    let key;\n    let i;\n    for (i in props) {\n        if (i == 'key')\n            key = props[i];\n        else\n            normalizedProps[i] = props[i];\n    }\n    if (typeof type === 'string' && !key && 'dangerouslySetInnerHTML' in normalizedProps) {\n        key = 'innerhtml';\n    }\n    return jsx(type, normalizedProps, key);\n}\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZmFjdG9yeS5qcyIsInNvdXJjZVJvb3QiOiIuLyIsInNvdXJjZXMiOlsicGFja2FnZXMvcXdpay9zcmMvY29yZS9yZW5kZXIvanN4L2ZhY3RvcnkudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsb0JBQW9CO0FBQ3BCLE9BQU8sRUFBRSxHQUFHLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFHcEMsT0FBTyxFQUFFLE9BQU8sRUFBRSxNQUFNLGtCQUFrQixDQUFDO0FBRTNDLE1BQU0sQ0FBQyxNQUFNLFlBQVksR0FBRyxDQUFJLEtBQWtCLEVBQUUsR0FBUyxFQUFPLEVBQUU7SUFDcEUsb0ZBQW9GO0lBQ3BGLElBQUksQ0FBQyxHQUFHO1FBQUUsR0FBRyxHQUFHLEVBQUUsQ0FBQztJQUNuQixLQUFLLE1BQU0sSUFBSSxJQUFJLEtBQUssRUFBRSxDQUFDO1FBQ3pCLElBQUksT0FBTyxDQUFDLElBQUksQ0FBQyxFQUFFLENBQUM7WUFDbEIsWUFBWSxDQUFDLElBQUksRUFBRSxHQUFHLENBQUMsQ0FBQztRQUMxQixDQUFDO2FBQU0sQ0FBQztZQUNOLEdBQUcsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUM7UUFDakIsQ0FBQztJQUNILENBQUM7SUFDRCxPQUFPLEdBQUcsQ0FBQztBQUNiLENBQUMsQ0FBQztBQUVGLGNBQWM7QUFDZCxNQUFNLFVBQVUsQ0FBQyxDQUNmLElBQVUsRUFDVixLQUFtQixFQUNuQixHQUFHLFFBQWU7SUFFbEIsaURBQWlEO0lBQ2pELDBDQUEwQztJQUMxQyw2RUFBNkU7SUFDN0UsMERBQTBEO0lBRTFELE1BQU0sZUFBZSxHQUFRO1FBQzNCLFFBQVEsRUFBRSxTQUFTLENBQUMsTUFBTSxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsWUFBWSxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUMsQ0FBQyxTQUFTO0tBQ3BFLENBQUM7SUFFRixJQUFJLEdBQVEsQ0FBQztJQUNiLElBQUksQ0FBTSxDQUFDO0lBRVgsS0FBSyxDQUFDLElBQUksS0FBSyxFQUFFLENBQUM7UUFDaEIsSUFBSSxDQUFDLElBQUksS0FBSztZQUFFLEdBQUcsR0FBSSxLQUE2QixDQUFDLENBQUMsQ0FBQyxDQUFDOztZQUNuRCxlQUFlLENBQUMsQ0FBQyxDQUFDLEdBQUksS0FBNkIsQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUM5RCxDQUFDO0lBRUQsSUFBSSxPQUFPLElBQUksS0FBSyxRQUFRLElBQUksQ0FBQyxHQUFHLElBQUkseUJBQXlCLElBQUksZUFBZSxFQUFFLENBQUM7UUFDckYsR0FBRyxHQUFHLFdBQVcsQ0FBQztJQUNwQixDQUFDO0lBQ0QsT0FBTyxHQUFHLENBQUMsSUFBSSxFQUFFLGVBQWUsRUFBRSxHQUFHLENBQUMsQ0FBQztBQUN6QyxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiLyogZXNsaW50LWRpc2FibGUgKi9cbmltcG9ydCB7IGpzeCB9IGZyb20gJy4vanN4LXJ1bnRpbWUnO1xuaW1wb3J0IHR5cGUgeyBRd2lrSlNYIH0gZnJvbSAnLi90eXBlcy9qc3gtcXdpayc7XG5pbXBvcnQgdHlwZSB7IEZ1bmN0aW9uQ29tcG9uZW50LCBKU1hOb2RlIH0gZnJvbSAnLi90eXBlcy9qc3gtbm9kZSc7XG5pbXBvcnQgeyBpc0FycmF5IH0gZnJvbSAnLi4vLi4vdXRpbC90eXBlcyc7XG5cbmV4cG9ydCBjb25zdCBmbGF0dGVuQXJyYXkgPSA8VD4oYXJyYXk6IChUIHwgVFtdKVtdLCBkc3Q/OiBUW10pOiBUW10gPT4ge1xuICAvLyBZZXMgdGhpcyBmdW5jdGlvbiBpcyBqdXN0IEFycmF5LmZsYXQsIGJ1dCB3ZSBuZWVkIHRvIHJ1biBvbiBvbGQgdmVyc2lvbnMgb2YgTm9kZS5cbiAgaWYgKCFkc3QpIGRzdCA9IFtdO1xuICBmb3IgKGNvbnN0IGl0ZW0gb2YgYXJyYXkpIHtcbiAgICBpZiAoaXNBcnJheShpdGVtKSkge1xuICAgICAgZmxhdHRlbkFycmF5KGl0ZW0sIGRzdCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGRzdC5wdXNoKGl0ZW0pO1xuICAgIH1cbiAgfVxuICByZXR1cm4gZHN0O1xufTtcblxuLyoqIEBwdWJsaWMgKi9cbmV4cG9ydCBmdW5jdGlvbiBoPFRZUEUgZXh0ZW5kcyBzdHJpbmcgfCBGdW5jdGlvbkNvbXBvbmVudDxQUk9QUz4sIFBST1BTIGV4dGVuZHMge30gPSB7fT4oXG4gIHR5cGU6IFRZUEUsXG4gIHByb3BzOiBQUk9QUyB8IG51bGwsXG4gIC4uLmNoaWxkcmVuOiBhbnlbXVxuKTogSlNYTm9kZTxUWVBFPiB7XG4gIC8vIFVzaW5nIGxlZ2FjeSBoKCkganN4IHRyYW5zZm9ybSBhbmQgbW9ycGhpbmcgaXRcbiAgLy8gc28gaXQgY2FuIHVzZSB0aGUgbW9kZXJuIHZkb20gc3RydWN0dXJlXG4gIC8vIGh0dHBzOi8vcmVhY3Rqcy5vcmcvYmxvZy8yMDIwLzA5LzIyL2ludHJvZHVjaW5nLXRoZS1uZXctanN4LXRyYW5zZm9ybS5odG1sXG4gIC8vIGh0dHBzOi8vd3d3LnR5cGVzY3JpcHRsYW5nLm9yZy90c2NvbmZpZyNqc3hJbXBvcnRTb3VyY2VcblxuICBjb25zdCBub3JtYWxpemVkUHJvcHM6IGFueSA9IHtcbiAgICBjaGlsZHJlbjogYXJndW1lbnRzLmxlbmd0aCA+IDIgPyBmbGF0dGVuQXJyYXkoY2hpbGRyZW4pIDogdW5kZWZpbmVkLFxuICB9O1xuXG4gIGxldCBrZXk6IGFueTtcbiAgbGV0IGk6IGFueTtcblxuICBmb3IgKGkgaW4gcHJvcHMpIHtcbiAgICBpZiAoaSA9PSAna2V5Jykga2V5ID0gKHByb3BzIGFzIFJlY29yZDxzdHJpbmcsIGFueT4pW2ldO1xuICAgIGVsc2Ugbm9ybWFsaXplZFByb3BzW2ldID0gKHByb3BzIGFzIFJlY29yZDxzdHJpbmcsIGFueT4pW2ldO1xuICB9XG5cbiAgaWYgKHR5cGVvZiB0eXBlID09PSAnc3RyaW5nJyAmJiAha2V5ICYmICdkYW5nZXJvdXNseVNldElubmVySFRNTCcgaW4gbm9ybWFsaXplZFByb3BzKSB7XG4gICAga2V5ID0gJ2lubmVyaHRtbCc7XG4gIH1cbiAgcmV0dXJuIGpzeCh0eXBlLCBub3JtYWxpemVkUHJvcHMsIGtleSk7XG59XG5cbi8qKiBAcHVibGljICovXG5leHBvcnQgZGVjbGFyZSBuYW1lc3BhY2UgaCB7XG4gIGV4cG9ydCBmdW5jdGlvbiBoKHR5cGU6IGFueSk6IEpTWE5vZGU8YW55PjtcbiAgZXhwb3J0IGZ1bmN0aW9uIGgodHlwZTogTm9kZSwgZGF0YTogYW55KTogSlNYTm9kZTxhbnk+O1xuICBleHBvcnQgZnVuY3Rpb24gaCh0eXBlOiBhbnksIHRleHQ6IHN0cmluZyk6IEpTWE5vZGU8YW55PjtcbiAgZXhwb3J0IGZ1bmN0aW9uIGgodHlwZTogYW55LCBjaGlsZHJlbjogQXJyYXk8YW55Pik6IEpTWE5vZGU8YW55PjtcbiAgZXhwb3J0IGZ1bmN0aW9uIGgodHlwZTogYW55LCBkYXRhOiBhbnksIHRleHQ6IHN0cmluZyk6IEpTWE5vZGU8YW55PjtcbiAgZXhwb3J0IGZ1bmN0aW9uIGgoXG4gICAgdHlwZTogYW55LFxuICAgIGRhdGE6IGFueSxcbiAgICBjaGlsZHJlbjogQXJyYXk8SlNYTm9kZTxhbnk+IHwgdW5kZWZpbmVkIHwgbnVsbD5cbiAgKTogSlNYTm9kZTxhbnk+O1xuICBleHBvcnQgZnVuY3Rpb24gaChzZWw6IGFueSwgZGF0YTogYW55IHwgbnVsbCwgY2hpbGRyZW46IEpTWE5vZGU8YW55Pik6IEpTWE5vZGU8YW55PjtcblxuICBleHBvcnQgbmFtZXNwYWNlIEpTWCB7XG4gICAgZXhwb3J0IGludGVyZmFjZSBFbGVtZW50IGV4dGVuZHMgUXdpa0pTWC5FbGVtZW50IHt9XG4gICAgZXhwb3J0IGludGVyZmFjZSBJbnRyaW5zaWNBdHRyaWJ1dGVzIGV4dGVuZHMgUXdpa0pTWC5JbnRyaW5zaWNBdHRyaWJ1dGVzIHt9XG4gICAgZXhwb3J0IGludGVyZmFjZSBJbnRyaW5zaWNFbGVtZW50cyBleHRlbmRzIFF3aWtKU1guSW50cmluc2ljRWxlbWVudHMge31cbiAgICBleHBvcnQgaW50ZXJmYWNlIEVsZW1lbnRDaGlsZHJlbkF0dHJpYnV0ZSB7XG4gICAgICBjaGlsZHJlbj86IGFueTtcbiAgICB9XG4gIH1cbn1cbiJdfQ==","import { isDocument } from '../../util/element';\nimport { isJSXNode, jsx } from '../jsx/jsx-runtime';\nimport { cleanupTree, domToVnode, smartUpdateChildren } from './visitor';\nimport { getDocument } from '../../util/dom';\nimport { qDev } from '../../util/qdev';\nimport { version } from '../../version';\nimport { QContainerAttr } from '../../util/markers';\nimport { qError, QError_cannotRenderOverExistingContainer } from '../../error/error';\nimport { directRemoveAttribute, directSetAttribute } from '../fast-calls';\nimport { processData, wrapJSX } from './render-dom';\nimport { removeContainerState, _getContainerState, } from '../../container/container';\nimport { postRendering } from './notify-render';\nimport { createRenderContext } from '../execute-component';\nimport { executeDOMRender, printRenderStats } from './operations';\nimport { logError } from '../../util/log';\nimport { appendQwikDevTools } from '../../container/resume';\n/**\n * Render JSX.\n *\n * Use this method to render JSX. This function does reconciling which means it always tries to\n * reuse what is already in the DOM (rather then destroy and recreate content.) It returns a cleanup\n * function you could use for cleaning up subscriptions.\n *\n * @param parent - Element which will act as a parent to `jsxNode`. When possible the rendering will\n *   try to reuse existing nodes.\n * @param jsxNode - JSX to render\n * @returns An object containing a cleanup function.\n * @public\n */\nexport const render = async (parent, jsxNode, opts) => {\n    // If input is not JSX, convert it\n    if (!isJSXNode(jsxNode)) {\n        jsxNode = jsx(jsxNode, null);\n    }\n    const doc = getDocument(parent);\n    const containerEl = getElement(parent);\n    if (qDev && containerEl.hasAttribute(QContainerAttr)) {\n        throw qError(QError_cannotRenderOverExistingContainer, containerEl);\n    }\n    // if (qDev) {\n    //   if (parent.childNodes.length > 0) {\n    //     throw new Error('Container must be empty before mounting anything inside');\n    //   }\n    // }\n    injectQContainer(containerEl);\n    const containerState = _getContainerState(containerEl);\n    const serverData = opts?.serverData;\n    if (serverData) {\n        Object.assign(containerState.$serverData$, serverData);\n    }\n    const rCtx = createRenderContext(doc, containerState);\n    containerState.$hostsRendering$ = new Set();\n    containerState.$styleMoved$ = true;\n    await renderRoot(rCtx, containerEl, jsxNode, doc, containerState, containerEl);\n    await postRendering(containerState, rCtx);\n    return {\n        cleanup() {\n            cleanupContainer(rCtx, containerEl);\n        },\n    };\n};\nconst renderRoot = async (rCtx, parent, jsxNode, doc, containerState, containerEl) => {\n    const staticCtx = rCtx.$static$;\n    try {\n        const processedNodes = await processData(jsxNode);\n        // const rootJsx = getVdom(parent);\n        const rootJsx = domToVnode(parent);\n        await smartUpdateChildren(rCtx, rootJsx, wrapJSX(parent, processedNodes), 0);\n    }\n    catch (err) {\n        logError(err);\n    }\n    staticCtx.$operations$.push(...staticCtx.$postOperations$);\n    executeDOMRender(staticCtx);\n    if (qDev) {\n        appendQwikDevTools(containerEl);\n    }\n    printRenderStats(staticCtx);\n};\nexport const getElement = (docOrElm) => {\n    return isDocument(docOrElm) ? docOrElm.documentElement : docOrElm;\n};\nexport const injectQContainer = (containerEl) => {\n    directSetAttribute(containerEl, 'q:version', version ?? 'dev');\n    directSetAttribute(containerEl, QContainerAttr, 'resumed');\n    directSetAttribute(containerEl, 'q:render', qDev ? 'dom-dev' : 'dom');\n};\nfunction cleanupContainer(renderCtx, container) {\n    const subsManager = renderCtx.$static$.$containerState$.$subsManager$;\n    cleanupTree(container, renderCtx.$static$, subsManager, true);\n    removeContainerState(container);\n    // Clean up attributes\n    directRemoveAttribute(container, 'q:version');\n    directRemoveAttribute(container, QContainerAttr);\n    directRemoveAttribute(container, 'q:render');\n    // Remove children\n    container.replaceChildren();\n}\n//# sourceMappingURL=data:application/json;base64,","import { QObjectRecursive } from '../state/constants';\nimport { getOrCreateProxy } from '../state/store';\nimport { isFunction } from '../util/types';\nimport { invoke } from './use-core';\nimport { useSequentialScope } from './use-sequential-scope';\n// <docs markdown=\"../readme.md#useStore\">\n// !!DO NOT EDIT THIS COMMENT DIRECTLY!!!\n// (edit ../readme.md#useStore instead)\n/**\n * Creates an object that Qwik can track across serializations.\n *\n * Use `useStore` to create a state for your application. The returned object is a proxy that has a\n * unique ID. The ID of the object is used in the `QRL`s to refer to the store.\n *\n * ### Example\n *\n * Example showing how `useStore` is used in Counter example to keep track of the count.\n *\n * ```tsx\n * const Stores = component$(() => {\n *   const counter = useCounter(1);\n *\n *   // Reactivity happens even for nested objects and arrays\n *   const userData = useStore({\n *     name: 'Manu',\n *     address: {\n *       address: '',\n *       city: '',\n *     },\n *     orgs: [],\n *   });\n *\n *   // useStore() can also accept a function to calculate the initial value\n *   const state = useStore(() => {\n *     return {\n *       value: expensiveInitialValue(),\n *     };\n *   });\n *\n *   return (\n *     <div>\n *       <div>Counter: {counter.value}</div>\n *       <Child userData={userData} state={state} />\n *     </div>\n *   );\n * });\n *\n * function useCounter(step: number) {\n *   // Multiple stores can be created in custom hooks for convenience and composability\n *   const counterStore = useStore({\n *     value: 0,\n *   });\n *   useVisibleTask$(() => {\n *     // Only runs in the client\n *     const timer = setInterval(() => {\n *       counterStore.value += step;\n *     }, 500);\n *     return () => {\n *       clearInterval(timer);\n *     };\n *   });\n *   return counterStore;\n * }\n * ```\n *\n * @public\n */\n// </docs>\nexport const useStore = (initialState, opts) => {\n    const { val, set, iCtx } = useSequentialScope();\n    if (val != null) {\n        return val;\n    }\n    const value = isFunction(initialState) ? invoke(undefined, initialState) : initialState;\n    if (opts?.reactive === false) {\n        set(value);\n        return value;\n    }\n    else {\n        const containerState = iCtx.$renderCtx$.$static$.$containerState$;\n        const recursive = opts?.deep ?? true;\n        const flags = recursive ? QObjectRecursive : 0;\n        const newStore = getOrCreateProxy(value, containerState, flags);\n        set(newStore);\n        return newStore;\n    }\n};\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidXNlLXN0b3JlLnB1YmxpYy5qcyIsInNvdXJjZVJvb3QiOiIuLyIsInNvdXJjZXMiOlsicGFja2FnZXMvcXdpay9zcmMvY29yZS91c2UvdXNlLXN0b3JlLnB1YmxpYy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsZ0JBQWdCLEVBQUUsTUFBTSxvQkFBb0IsQ0FBQztBQUN0RCxPQUFPLEVBQUUsZ0JBQWdCLEVBQUUsTUFBTSxnQkFBZ0IsQ0FBQztBQUNsRCxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQzNDLE9BQU8sRUFBRSxNQUFNLEVBQUUsTUFBTSxZQUFZLENBQUM7QUFDcEMsT0FBTyxFQUFFLGtCQUFrQixFQUFFLE1BQU0sd0JBQXdCLENBQUM7QUFXNUQsMENBQTBDO0FBQzFDLHlDQUF5QztBQUN6Qyx1Q0FBdUM7QUFDdkM7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7R0EwREc7QUFDSCxVQUFVO0FBQ1YsTUFBTSxDQUFDLE1BQU0sUUFBUSxHQUFHLENBQ3RCLFlBQW1DLEVBQ25DLElBQXNCLEVBQ2YsRUFBRTtJQUNULE1BQU0sRUFBRSxHQUFHLEVBQUUsR0FBRyxFQUFFLElBQUksRUFBRSxHQUFHLGtCQUFrQixFQUFTLENBQUM7SUFDdkQsSUFBSSxHQUFHLElBQUksSUFBSSxFQUFFLENBQUM7UUFDaEIsT0FBTyxHQUFHLENBQUM7SUFDYixDQUFDO0lBQ0QsTUFBTSxLQUFLLEdBQUcsVUFBVSxDQUFDLFlBQVksQ0FBQyxDQUFDLENBQUMsQ0FBQyxNQUFNLENBQUMsU0FBUyxFQUFFLFlBQVksQ0FBQyxDQUFDLENBQUMsQ0FBQyxZQUFZLENBQUM7SUFDeEYsSUFBSSxJQUFJLEVBQUUsUUFBUSxLQUFLLEtBQUssRUFBRSxDQUFDO1FBQzdCLEdBQUcsQ0FBQyxLQUFLLENBQUMsQ0FBQztRQUNYLE9BQU8sS0FBSyxDQUFDO0lBQ2YsQ0FBQztTQUFNLENBQUM7UUFDTixNQUFNLGNBQWMsR0FBRyxJQUFJLENBQUMsV0FBVyxDQUFDLFFBQVEsQ0FBQyxnQkFBZ0IsQ0FBQztRQUNsRSxNQUFNLFNBQVMsR0FBRyxJQUFJLEVBQUUsSUFBSSxJQUFJLElBQUksQ0FBQztRQUNyQyxNQUFNLEtBQUssR0FBRyxTQUFTLENBQUMsQ0FBQyxDQUFDLGdCQUFnQixDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFDL0MsTUFBTSxRQUFRLEdBQUcsZ0JBQWdCLENBQUMsS0FBSyxFQUFFLGNBQWMsRUFBRSxLQUFLLENBQUMsQ0FBQztRQUNoRSxHQUFHLENBQUMsUUFBUSxDQUFDLENBQUM7UUFDZCxPQUFPLFFBQVEsQ0FBQztJQUNsQixDQUFDO0FBQ0gsQ0FBQyxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgUU9iamVjdFJlY3Vyc2l2ZSB9IGZyb20gJy4uL3N0YXRlL2NvbnN0YW50cyc7XG5pbXBvcnQgeyBnZXRPckNyZWF0ZVByb3h5IH0gZnJvbSAnLi4vc3RhdGUvc3RvcmUnO1xuaW1wb3J0IHsgaXNGdW5jdGlvbiB9IGZyb20gJy4uL3V0aWwvdHlwZXMnO1xuaW1wb3J0IHsgaW52b2tlIH0gZnJvbSAnLi91c2UtY29yZSc7XG5pbXBvcnQgeyB1c2VTZXF1ZW50aWFsU2NvcGUgfSBmcm9tICcuL3VzZS1zZXF1ZW50aWFsLXNjb3BlJztcblxuLyoqIEBwdWJsaWMgKi9cbmV4cG9ydCBpbnRlcmZhY2UgVXNlU3RvcmVPcHRpb25zIHtcbiAgLyoqIElmIGB0cnVlYCB0aGVuIGFsbCBuZXN0ZWQgb2JqZWN0cyBhbmQgYXJyYXlzIHdpbGwgYmUgdHJhY2tlZCBhcyB3ZWxsLiBEZWZhdWx0IGlzIGBmYWxzZWAuICovXG4gIGRlZXA/OiBib29sZWFuO1xuXG4gIC8qKiBJZiBgZmFsc2VgIHRoZW4gdGhlIG9iamVjdCB3aWxsIG5vdCBiZSB0cmFja2VkIGZvciBjaGFuZ2VzLiBEZWZhdWx0IGlzIGB0cnVlYC4gKi9cbiAgcmVhY3RpdmU/OiBib29sZWFuO1xufVxuXG4vLyA8ZG9jcyBtYXJrZG93bj1cIi4uL3JlYWRtZS5tZCN1c2VTdG9yZVwiPlxuLy8gISFETyBOT1QgRURJVCBUSElTIENPTU1FTlQgRElSRUNUTFkhISFcbi8vIChlZGl0IC4uL3JlYWRtZS5tZCN1c2VTdG9yZSBpbnN0ZWFkKVxuLyoqXG4gKiBDcmVhdGVzIGFuIG9iamVjdCB0aGF0IFF3aWsgY2FuIHRyYWNrIGFjcm9zcyBzZXJpYWxpemF0aW9ucy5cbiAqXG4gKiBVc2UgYHVzZVN0b3JlYCB0byBjcmVhdGUgYSBzdGF0ZSBmb3IgeW91ciBhcHBsaWNhdGlvbi4gVGhlIHJldHVybmVkIG9iamVjdCBpcyBhIHByb3h5IHRoYXQgaGFzIGFcbiAqIHVuaXF1ZSBJRC4gVGhlIElEIG9mIHRoZSBvYmplY3QgaXMgdXNlZCBpbiB0aGUgYFFSTGBzIHRvIHJlZmVyIHRvIHRoZSBzdG9yZS5cbiAqXG4gKiAjIyMgRXhhbXBsZVxuICpcbiAqIEV4YW1wbGUgc2hvd2luZyBob3cgYHVzZVN0b3JlYCBpcyB1c2VkIGluIENvdW50ZXIgZXhhbXBsZSB0byBrZWVwIHRyYWNrIG9mIHRoZSBjb3VudC5cbiAqXG4gKiBgYGB0c3hcbiAqIGNvbnN0IFN0b3JlcyA9IGNvbXBvbmVudCQoKCkgPT4ge1xuICogICBjb25zdCBjb3VudGVyID0gdXNlQ291bnRlcigxKTtcbiAqXG4gKiAgIC8vIFJlYWN0aXZpdHkgaGFwcGVucyBldmVuIGZvciBuZXN0ZWQgb2JqZWN0cyBhbmQgYXJyYXlzXG4gKiAgIGNvbnN0IHVzZXJEYXRhID0gdXNlU3RvcmUoe1xuICogICAgIG5hbWU6ICdNYW51JyxcbiAqICAgICBhZGRyZXNzOiB7XG4gKiAgICAgICBhZGRyZXNzOiAnJyxcbiAqICAgICAgIGNpdHk6ICcnLFxuICogICAgIH0sXG4gKiAgICAgb3JnczogW10sXG4gKiAgIH0pO1xuICpcbiAqICAgLy8gdXNlU3RvcmUoKSBjYW4gYWxzbyBhY2NlcHQgYSBmdW5jdGlvbiB0byBjYWxjdWxhdGUgdGhlIGluaXRpYWwgdmFsdWVcbiAqICAgY29uc3Qgc3RhdGUgPSB1c2VTdG9yZSgoKSA9PiB7XG4gKiAgICAgcmV0dXJuIHtcbiAqICAgICAgIHZhbHVlOiBleHBlbnNpdmVJbml0aWFsVmFsdWUoKSxcbiAqICAgICB9O1xuICogICB9KTtcbiAqXG4gKiAgIHJldHVybiAoXG4gKiAgICAgPGRpdj5cbiAqICAgICAgIDxkaXY+Q291bnRlcjoge2NvdW50ZXIudmFsdWV9PC9kaXY+XG4gKiAgICAgICA8Q2hpbGQgdXNlckRhdGE9e3VzZXJEYXRhfSBzdGF0ZT17c3RhdGV9IC8+XG4gKiAgICAgPC9kaXY+XG4gKiAgICk7XG4gKiB9KTtcbiAqXG4gKiBmdW5jdGlvbiB1c2VDb3VudGVyKHN0ZXA6IG51bWJlcikge1xuICogICAvLyBNdWx0aXBsZSBzdG9yZXMgY2FuIGJlIGNyZWF0ZWQgaW4gY3VzdG9tIGhvb2tzIGZvciBjb252ZW5pZW5jZSBhbmQgY29tcG9zYWJpbGl0eVxuICogICBjb25zdCBjb3VudGVyU3RvcmUgPSB1c2VTdG9yZSh7XG4gKiAgICAgdmFsdWU6IDAsXG4gKiAgIH0pO1xuICogICB1c2VWaXNpYmxlVGFzayQoKCkgPT4ge1xuICogICAgIC8vIE9ubHkgcnVucyBpbiB0aGUgY2xpZW50XG4gKiAgICAgY29uc3QgdGltZXIgPSBzZXRJbnRlcnZhbCgoKSA9PiB7XG4gKiAgICAgICBjb3VudGVyU3RvcmUudmFsdWUgKz0gc3RlcDtcbiAqICAgICB9LCA1MDApO1xuICogICAgIHJldHVybiAoKSA9PiB7XG4gKiAgICAgICBjbGVhckludGVydmFsKHRpbWVyKTtcbiAqICAgICB9O1xuICogICB9KTtcbiAqICAgcmV0dXJuIGNvdW50ZXJTdG9yZTtcbiAqIH1cbiAqIGBgYFxuICpcbiAqIEBwdWJsaWNcbiAqL1xuLy8gPC9kb2NzPlxuZXhwb3J0IGNvbnN0IHVzZVN0b3JlID0gPFNUQVRFIGV4dGVuZHMgb2JqZWN0PihcbiAgaW5pdGlhbFN0YXRlOiBTVEFURSB8ICgoKSA9PiBTVEFURSksXG4gIG9wdHM/OiBVc2VTdG9yZU9wdGlvbnNcbik6IFNUQVRFID0+IHtcbiAgY29uc3QgeyB2YWwsIHNldCwgaUN0eCB9ID0gdXNlU2VxdWVudGlhbFNjb3BlPFNUQVRFPigpO1xuICBpZiAodmFsICE9IG51bGwpIHtcbiAgICByZXR1cm4gdmFsO1xuICB9XG4gIGNvbnN0IHZhbHVlID0gaXNGdW5jdGlvbihpbml0aWFsU3RhdGUpID8gaW52b2tlKHVuZGVmaW5lZCwgaW5pdGlhbFN0YXRlKSA6IGluaXRpYWxTdGF0ZTtcbiAgaWYgKG9wdHM/LnJlYWN0aXZlID09PSBmYWxzZSkge1xuICAgIHNldCh2YWx1ZSk7XG4gICAgcmV0dXJuIHZhbHVlO1xuICB9IGVsc2Uge1xuICAgIGNvbnN0IGNvbnRhaW5lclN0YXRlID0gaUN0eC4kcmVuZGVyQ3R4JC4kc3RhdGljJC4kY29udGFpbmVyU3RhdGUkO1xuICAgIGNvbnN0IHJlY3Vyc2l2ZSA9IG9wdHM/LmRlZXAgPz8gdHJ1ZTtcbiAgICBjb25zdCBmbGFncyA9IHJlY3Vyc2l2ZSA/IFFPYmplY3RSZWN1cnNpdmUgOiAwO1xuICAgIGNvbnN0IG5ld1N0b3JlID0gZ2V0T3JDcmVhdGVQcm94eSh2YWx1ZSwgY29udGFpbmVyU3RhdGUsIGZsYWdzKTtcbiAgICBzZXQobmV3U3RvcmUpO1xuICAgIHJldHVybiBuZXdTdG9yZTtcbiAgfVxufTtcbiJdfQ==","import { getNextIndex } from '../render/execute-component';\nimport { hashCode } from '../util/hash_code';\nimport { useSequentialScope } from './use-sequential-scope';\n/** @public */\nexport const useId = () => {\n    const { val, set, elCtx, iCtx } = useSequentialScope();\n    if (val != null) {\n        return val;\n    }\n    const containerBase = iCtx.$renderCtx$?.$static$?.$containerState$?.$base$ || '';\n    const base = containerBase ? hashCode(containerBase) : '';\n    const hash = elCtx.$componentQrl$?.getHash() || '';\n    const counter = getNextIndex(iCtx.$renderCtx$) || '';\n    const id = `${base}-${hash}-${counter}`; // If no base and no hash, then \"--#\"\n    return set(id);\n};\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidXNlLWlkLmpzIiwic291cmNlUm9vdCI6Ii4vIiwic291cmNlcyI6WyJwYWNrYWdlcy9xd2lrL3NyYy9jb3JlL3VzZS91c2UtaWQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLFlBQVksRUFBRSxNQUFNLDZCQUE2QixDQUFDO0FBQzNELE9BQU8sRUFBRSxRQUFRLEVBQUUsTUFBTSxtQkFBbUIsQ0FBQztBQUM3QyxPQUFPLEVBQUUsa0JBQWtCLEVBQUUsTUFBTSx3QkFBd0IsQ0FBQztBQUU1RCxjQUFjO0FBQ2QsTUFBTSxDQUFDLE1BQU0sS0FBSyxHQUFHLEdBQVcsRUFBRTtJQUNoQyxNQUFNLEVBQUUsR0FBRyxFQUFFLEdBQUcsRUFBRSxLQUFLLEVBQUUsSUFBSSxFQUFFLEdBQUcsa0JBQWtCLEVBQVUsQ0FBQztJQUMvRCxJQUFJLEdBQUcsSUFBSSxJQUFJLEVBQUUsQ0FBQztRQUNoQixPQUFPLEdBQUcsQ0FBQztJQUNiLENBQUM7SUFFRCxNQUFNLGFBQWEsR0FBRyxJQUFJLENBQUMsV0FBVyxFQUFFLFFBQVEsRUFBRSxnQkFBZ0IsRUFBRSxNQUFNLElBQUksRUFBRSxDQUFDO0lBQ2pGLE1BQU0sSUFBSSxHQUFHLGFBQWEsQ0FBQyxDQUFDLENBQUMsUUFBUSxDQUFDLGFBQWEsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUM7SUFDMUQsTUFBTSxJQUFJLEdBQUcsS0FBSyxDQUFDLGNBQWMsRUFBRSxPQUFPLEVBQUUsSUFBSSxFQUFFLENBQUM7SUFDbkQsTUFBTSxPQUFPLEdBQUcsWUFBWSxDQUFDLElBQUksQ0FBQyxXQUFXLENBQUMsSUFBSSxFQUFFLENBQUM7SUFDckQsTUFBTSxFQUFFLEdBQUcsR0FBRyxJQUFJLElBQUksSUFBSSxJQUFJLE9BQU8sRUFBRSxDQUFDLENBQUMscUNBQXFDO0lBQzlFLE9BQU8sR0FBRyxDQUFDLEVBQUUsQ0FBQyxDQUFDO0FBQ2pCLENBQUMsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IGdldE5leHRJbmRleCB9IGZyb20gJy4uL3JlbmRlci9leGVjdXRlLWNvbXBvbmVudCc7XG5pbXBvcnQgeyBoYXNoQ29kZSB9IGZyb20gJy4uL3V0aWwvaGFzaF9jb2RlJztcbmltcG9ydCB7IHVzZVNlcXVlbnRpYWxTY29wZSB9IGZyb20gJy4vdXNlLXNlcXVlbnRpYWwtc2NvcGUnO1xuXG4vKiogQHB1YmxpYyAqL1xuZXhwb3J0IGNvbnN0IHVzZUlkID0gKCk6IHN0cmluZyA9PiB7XG4gIGNvbnN0IHsgdmFsLCBzZXQsIGVsQ3R4LCBpQ3R4IH0gPSB1c2VTZXF1ZW50aWFsU2NvcGU8c3RyaW5nPigpO1xuICBpZiAodmFsICE9IG51bGwpIHtcbiAgICByZXR1cm4gdmFsO1xuICB9XG5cbiAgY29uc3QgY29udGFpbmVyQmFzZSA9IGlDdHguJHJlbmRlckN0eCQ/LiRzdGF0aWMkPy4kY29udGFpbmVyU3RhdGUkPy4kYmFzZSQgfHwgJyc7XG4gIGNvbnN0IGJhc2UgPSBjb250YWluZXJCYXNlID8gaGFzaENvZGUoY29udGFpbmVyQmFzZSkgOiAnJztcbiAgY29uc3QgaGFzaCA9IGVsQ3R4LiRjb21wb25lbnRRcmwkPy5nZXRIYXNoKCkgfHwgJyc7XG4gIGNvbnN0IGNvdW50ZXIgPSBnZXROZXh0SW5kZXgoaUN0eC4kcmVuZGVyQ3R4JCkgfHwgJyc7XG4gIGNvbnN0IGlkID0gYCR7YmFzZX0tJHtoYXNofS0ke2NvdW50ZXJ9YDsgLy8gSWYgbm8gYmFzZSBhbmQgbm8gaGFzaCwgdGhlbiBcIi0tI1wiXG4gIHJldHVybiBzZXQoaWQpO1xufTtcbiJdfQ==","import { tryGetInvokeContext } from './use-core';\n/** @public */\nexport function useServerData(key, defaultValue) {\n    const ctx = tryGetInvokeContext();\n    return ctx?.$renderCtx$?.$static$.$containerState$.$serverData$[key] ?? defaultValue;\n}\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidXNlLWVudi1kYXRhLmpzIiwic291cmNlUm9vdCI6Ii4vIiwic291cmNlcyI6WyJwYWNrYWdlcy9xd2lrL3NyYy9jb3JlL3VzZS91c2UtZW52LWRhdGEudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLG1CQUFtQixFQUFFLE1BQU0sWUFBWSxDQUFDO0FBUWpELGNBQWM7QUFDZCxNQUFNLFVBQVUsYUFBYSxDQUFDLEdBQVcsRUFBRSxZQUFrQjtJQUMzRCxNQUFNLEdBQUcsR0FBRyxtQkFBbUIsRUFBRSxDQUFDO0lBQ2xDLE9BQU8sR0FBRyxFQUFFLFdBQVcsRUFBRSxRQUFRLENBQUMsZ0JBQWdCLENBQUMsWUFBWSxDQUFDLEdBQUcsQ0FBQyxJQUFJLFlBQVksQ0FBQztBQUN2RixDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgdHJ5R2V0SW52b2tlQ29udGV4dCB9IGZyb20gJy4vdXNlLWNvcmUnO1xuXG4vKiogQHB1YmxpYyAqL1xuZXhwb3J0IGZ1bmN0aW9uIHVzZVNlcnZlckRhdGE8VD4oa2V5OiBzdHJpbmcpOiBUIHwgdW5kZWZpbmVkO1xuXG4vKiogQHB1YmxpYyAqL1xuZXhwb3J0IGZ1bmN0aW9uIHVzZVNlcnZlckRhdGE8VCwgQiA9IFQ+KGtleTogc3RyaW5nLCBkZWZhdWx0VmFsdWU6IEIpOiBUIHwgQjtcblxuLyoqIEBwdWJsaWMgKi9cbmV4cG9ydCBmdW5jdGlvbiB1c2VTZXJ2ZXJEYXRhKGtleTogc3RyaW5nLCBkZWZhdWx0VmFsdWU/OiBhbnkpIHtcbiAgY29uc3QgY3R4ID0gdHJ5R2V0SW52b2tlQ29udGV4dCgpO1xuICByZXR1cm4gY3R4Py4kcmVuZGVyQ3R4JD8uJHN0YXRpYyQuJGNvbnRhaW5lclN0YXRlJC4kc2VydmVyRGF0YSRba2V5XSA/PyBkZWZhdWx0VmFsdWU7XG59XG4iXX0=","/* eslint-disable no-console */\nimport { ComponentStylesPrefixContent } from '../util/markers';\nimport { qDev } from '../util/qdev';\n// Make sure this is always set to `false` in production, but it is useful to set for `true` in development for debugging.\nconst DEBUG = false;\nexport const STYLE_CACHE = /*#__PURE__*/ new Map();\nexport const getScopedStyles = (css, scopeId) => {\n    if (qDev) {\n        return scopeStylesheet(css, scopeId);\n    }\n    let styleCss = STYLE_CACHE.get(scopeId);\n    if (!styleCss) {\n        STYLE_CACHE.set(scopeId, (styleCss = scopeStylesheet(css, scopeId)));\n    }\n    return styleCss;\n};\nexport const scopeStylesheet = (css, scopeId) => {\n    const end = css.length;\n    const out = [];\n    const stack = [];\n    let idx = 0;\n    let lastIdx = idx;\n    let mode = rule;\n    let lastCh = 0;\n    DEBUG && console.log('--------------------------');\n    while (idx < end) {\n        DEBUG && console.log(css);\n        DEBUG && console.log(new Array(idx).fill(' ').join('') + '^');\n        DEBUG && console.log('MODE', ...stack.map(modeToString), modeToString(mode));\n        const chIdx = idx;\n        let ch = css.charCodeAt(idx++);\n        if (ch === BACKSLASH) {\n            idx++;\n            ch = A; // Pretend it's a letter\n        }\n        const arcs = STATE_MACHINE[mode];\n        for (let i = 0; i < arcs.length; i++) {\n            const arc = arcs[i];\n            const [expectLastCh, expectCh, newMode] = arc;\n            if (expectLastCh === lastCh ||\n                expectLastCh === ANY ||\n                (expectLastCh === IDENT && isIdent(lastCh)) ||\n                (expectLastCh === WHITESPACE && isWhiteSpace(lastCh))) {\n                if (expectCh === ch ||\n                    expectCh === ANY ||\n                    (expectCh === IDENT && isIdent(ch)) ||\n                    (expectCh === NOT_IDENT && !isIdent(ch) && ch !== DOT) ||\n                    (expectCh === WHITESPACE && isWhiteSpace(ch))) {\n                    if (arc.length == 3 || lookAhead(arc)) {\n                        if (arc.length > 3) {\n                            // If matched on lookAhead than we we have to update current `ch`\n                            ch = css.charCodeAt(idx - 1);\n                        }\n                        DEBUG &&\n                            console.log('MATCH', charToString(expectLastCh), charToString(expectCh), modeToString(newMode));\n                        // We found a match!\n                        if (newMode === EXIT || newMode == EXIT_INSERT_SCOPE) {\n                            if (newMode === EXIT_INSERT_SCOPE) {\n                                if (mode === starSelector && !shouldNotInsertScoping()) {\n                                    // Replace `*` with the scoping elementClassIdSelector.\n                                    if (isChainedSelector(ch)) {\n                                        // *foo\n                                        flush(idx - 2);\n                                    }\n                                    else {\n                                        // * (by itself)\n                                        insertScopingSelector(idx - 2);\n                                    }\n                                    lastIdx++;\n                                }\n                                else {\n                                    if (!isChainedSelector(ch)) {\n                                        // We are exiting one of the Selector so we may need to\n                                        const offset = expectCh == NOT_IDENT ? 1 : expectCh == CLOSE_PARENTHESIS ? 2 : 0;\n                                        insertScopingSelector(idx - offset);\n                                    }\n                                }\n                            }\n                            if (expectCh === NOT_IDENT) {\n                                // NOT_IDENT is not a real character more like lack of what we expected.\n                                // if pseudoGlobal we need to give it a chance to exit as well.\n                                // For this reason we need to reparse the last character again.\n                                idx--;\n                                ch = lastCh;\n                            }\n                            do {\n                                mode = stack.pop() || rule;\n                                if (mode === pseudoGlobal) {\n                                    // Skip over the `)` in `:global(...)`.\n                                    flush(idx - 1);\n                                    lastIdx++;\n                                }\n                            } while (isSelfClosingRule(mode));\n                        }\n                        else {\n                            stack.push(mode);\n                            if (mode === pseudoGlobal && newMode === rule) {\n                                flush(idx - 8); // `:global(`.length\n                                lastIdx = idx; // skip over \":global(\"\n                            }\n                            else if (newMode === pseudoElement) {\n                                // We are entering pseudoElement `::foo`; insert scoping in front of it.\n                                insertScopingSelector(chIdx);\n                            }\n                            mode = newMode;\n                            ch == SPACE; // Pretend not an identifier so that we don't flush again on elementClassIdSelector\n                        }\n                        break; // get out of the for loop as we found a match\n                    }\n                }\n            }\n        }\n        lastCh = ch;\n    }\n    flush(idx);\n    return out.join('');\n    function flush(idx) {\n        out.push(css.substring(lastIdx, idx));\n        DEBUG && console.log('FLUSH', out.join(''));\n        lastIdx = idx;\n    }\n    function insertScopingSelector(idx) {\n        if (mode === pseudoGlobal || shouldNotInsertScoping()) {\n            return;\n        }\n        flush(idx);\n        out.push('.', ComponentStylesPrefixContent, scopeId);\n        DEBUG && console.log('INSERT', out.join(''));\n    }\n    function lookAhead(arc) {\n        let prefix = 0; // Ignore vendor prefixes such as `-webkit-`.\n        if (css.charCodeAt(idx) === DASH) {\n            for (let i = 1; i < 10; i++) {\n                // give up after 10 characters\n                if (css.charCodeAt(idx + i) === DASH) {\n                    prefix = i + 1;\n                    break;\n                }\n            }\n        }\n        words: for (let arcIndx = 3; arcIndx < arc.length; arcIndx++) {\n            const txt = arc[arcIndx];\n            for (let i = 0; i < txt.length; i++) {\n                if ((css.charCodeAt(idx + i + prefix) | LOWERCASE) !== txt.charCodeAt(i)) {\n                    continue words;\n                }\n            }\n            // we found a match;\n            idx += txt.length + prefix;\n            return true;\n        }\n        return false;\n    }\n    function shouldNotInsertScoping() {\n        return stack.indexOf(pseudoGlobal) !== -1 || stack.indexOf(atRuleSelector) !== -1;\n    }\n};\nconst isIdent = (ch) => {\n    return ((ch >= _0 && ch <= _9) ||\n        (ch >= A && ch <= Z) ||\n        (ch >= a && ch <= z) ||\n        ch >= 0x80 ||\n        ch === UNDERSCORE ||\n        ch === DASH);\n};\nconst isChainedSelector = (ch) => {\n    return ch === COLON || ch === DOT || ch === OPEN_BRACKET || ch === HASH || isIdent(ch);\n};\nconst isSelfClosingRule = (mode) => {\n    return (mode === atRuleBlock || mode === atRuleSelector || mode === atRuleInert || mode === pseudoGlobal);\n};\nconst isWhiteSpace = (ch) => {\n    return ch === SPACE || ch === TAB || ch === NEWLINE || ch === CARRIAGE_RETURN;\n};\nconst modeToString = (mode) => {\n    return [\n        'rule',\n        'elementClassIdSelector',\n        'starSelector',\n        'pseudoClassWithSelector',\n        'pseudoClass',\n        'pseudoGlobal',\n        'pseudoElement',\n        'attrSelector',\n        'inertParenthesis',\n        'inertBlock',\n        'atRuleSelector',\n        'atRuleBlock',\n        'atInert',\n        'body',\n        'stringSingle',\n        'stringDouble',\n        'commentMultiline',\n        'EXIT',\n        'EXIT_INSERT_SCOPE',\n    ][mode];\n};\nconst charToString = (ch) => {\n    return ['ANY', 'IDENT', 'NOT_IDENT', 'WHITESPACE'][ch] || String.fromCharCode(ch);\n};\nconst rule = 0; // top level initial space.\nconst elementClassIdSelector = 1; // .elementClassIdSelector {}\nconst starSelector = 2; // * {}\nconst pseudoClassWithSelector = 3; // :pseudoClass(elementClassIdSelector) {}\nconst pseudoClass = 4; // :pseudoClass {}\nconst pseudoGlobal = 5; // :global(elementClassIdSelector)\nconst pseudoElement = 6; // ::pseudoElement {}\nconst attrSelector = 7; // [attr] {}\nconst inertParenthesis = 8; // (ignored)\nconst inertBlock = 9; // {ignored}\nconst atRuleSelector = 10; // @keyframe elementClassIdSelector {}\nconst atRuleBlock = 11; // @media {elementClassIdSelector {}}\nconst atRuleInert = 12; // @atRule something;\nconst body = 13; // .elementClassIdSelector {body}\nconst stringSingle = 14; // 'text'\nconst stringDouble = 15; // 'text'\nconst commentMultiline = 16; // /* ... */\n// NOT REAL MODES\nconst EXIT = 17; // Exit the mode\nconst EXIT_INSERT_SCOPE = 18; // Exit the mode INSERT SCOPE\nconst ANY = 0;\nconst IDENT = 1;\nconst NOT_IDENT = 2;\nconst WHITESPACE = 3;\nconst TAB = 9; // `\\t`.charCodeAt(0);\nconst NEWLINE = 10; // `\\n`.charCodeAt(0);\nconst CARRIAGE_RETURN = 13; // `\\r`.charCodeAt(0);\nconst SPACE = 32; // ` `.charCodeAt(0);\nconst DOUBLE_QUOTE = 34; // `\"`.charCodeAt(0);\nconst HASH = 35; // `#`.charCodeAt(0);\nconst SINGLE_QUOTE = 39; // `'`.charCodeAt(0);\nconst OPEN_PARENTHESIS = 40; // `(`.charCodeAt(0);\nconst CLOSE_PARENTHESIS = 41; // `)`.charCodeAt(0);\nconst STAR = 42; // `*`.charCodeAt(0);\n// const COMMA = 44; // `,`.charCodeAt(0);\nconst DASH = 45; // `-`.charCodeAt(0);\nconst DOT = 46; // `.`.charCodeAt(0);\nconst FORWARD_SLASH = 47; // `/`.charCodeAt(0);\nconst _0 = 48; // `0`.charCodeAt(0);\nconst _9 = 57; // `9`.charCodeAt(0);\nconst COLON = 58; // `:`.charCodeAt(0);\nconst SEMICOLON = 59; // `;`.charCodeAt(0);\n// const LESS_THAN = 60; // `<`.charCodeAt(0);\nconst AT = 64; // `@`.charCodeAt(0);\nconst A = 65; // `A`.charCodeAt(0);\nconst Z = 90; // `Z`.charCodeAt(0);\nconst OPEN_BRACKET = 91; // `[`.charCodeAt(0);\nconst CLOSE_BRACKET = 93; // `]`.charCodeAt(0);\nconst BACKSLASH = 92; // `\\\\`.charCodeAt(0);\nconst UNDERSCORE = 95; // `_`.charCodeAt(0);\nconst LOWERCASE = 0x20; // `a`.charCodeAt(0);\nconst a = 97; // `a`.charCodeAt(0);\n// const d = 100; // `d`.charCodeAt(0);\n// const g = 103; // 'g'.charCodeAt(0);\n// const h = 104; // `h`.charCodeAt(0);\n// const i = 105; // `i`.charCodeAt(0);\n// const l = 108; // `l`.charCodeAt(0);\n// const t = 116; // `t`.charCodeAt(0);\nconst z = 122; // `z`.charCodeAt(0);\nconst OPEN_BRACE = 123; // `{`.charCodeAt(0);\nconst CLOSE_BRACE = 125; // `}`.charCodeAt(0);\nconst STRINGS_COMMENTS = /*__PURE__*/ (() => [\n    [ANY, SINGLE_QUOTE, stringSingle],\n    [ANY, DOUBLE_QUOTE, stringDouble],\n    [ANY, FORWARD_SLASH, commentMultiline, '*'],\n])();\nconst STATE_MACHINE = /*__PURE__*/ (() => [\n    [\n        /// rule\n        [ANY, STAR, starSelector],\n        [ANY, OPEN_BRACKET, attrSelector],\n        [ANY, COLON, pseudoElement, ':', 'before', 'after', 'first-letter', 'first-line'],\n        [ANY, COLON, pseudoGlobal, 'global'],\n        [\n            ANY,\n            COLON,\n            pseudoClassWithSelector,\n            'has',\n            'host-context',\n            'not',\n            'where',\n            'is',\n            'matches',\n            'any',\n        ],\n        [ANY, COLON, pseudoClass],\n        [ANY, IDENT, elementClassIdSelector],\n        [ANY, DOT, elementClassIdSelector],\n        [ANY, HASH, elementClassIdSelector],\n        [ANY, AT, atRuleSelector, 'keyframe'],\n        [ANY, AT, atRuleBlock, 'media', 'supports'],\n        [ANY, AT, atRuleInert],\n        [ANY, OPEN_BRACE, body],\n        [FORWARD_SLASH, STAR, commentMultiline],\n        [ANY, SEMICOLON, EXIT],\n        [ANY, CLOSE_BRACE, EXIT],\n        [ANY, CLOSE_PARENTHESIS, EXIT],\n        ...STRINGS_COMMENTS,\n    ],\n    [\n        /// elementClassIdSelector\n        [ANY, NOT_IDENT, EXIT_INSERT_SCOPE],\n    ],\n    [\n        /// starSelector\n        [ANY, NOT_IDENT, EXIT_INSERT_SCOPE],\n    ],\n    [\n        /// pseudoClassWithSelector\n        [ANY, OPEN_PARENTHESIS, rule],\n        [ANY, NOT_IDENT, EXIT_INSERT_SCOPE],\n    ],\n    [\n        /// pseudoClass\n        [ANY, OPEN_PARENTHESIS, inertParenthesis],\n        [ANY, NOT_IDENT, EXIT_INSERT_SCOPE],\n    ],\n    [\n        /// pseudoGlobal\n        [ANY, OPEN_PARENTHESIS, rule],\n        [ANY, NOT_IDENT, EXIT],\n    ],\n    [\n        /// pseudoElement\n        [ANY, NOT_IDENT, EXIT],\n    ],\n    [\n        /// attrSelector\n        [ANY, CLOSE_BRACKET, EXIT_INSERT_SCOPE],\n        [ANY, SINGLE_QUOTE, stringSingle],\n        [ANY, DOUBLE_QUOTE, stringDouble],\n    ],\n    [\n        /// inertParenthesis\n        [ANY, CLOSE_PARENTHESIS, EXIT],\n        ...STRINGS_COMMENTS,\n    ],\n    [\n        /// inertBlock\n        [ANY, CLOSE_BRACE, EXIT],\n        ...STRINGS_COMMENTS,\n    ],\n    [\n        /// atRuleSelector\n        [ANY, CLOSE_BRACE, EXIT],\n        [WHITESPACE, IDENT, elementClassIdSelector],\n        [ANY, COLON, pseudoGlobal, 'global'],\n        [ANY, OPEN_BRACE, body],\n        ...STRINGS_COMMENTS,\n    ],\n    [\n        /// atRuleBlock\n        [ANY, OPEN_BRACE, rule],\n        [ANY, SEMICOLON, EXIT],\n        ...STRINGS_COMMENTS,\n    ],\n    [\n        /// atRuleInert\n        [ANY, SEMICOLON, EXIT],\n        [ANY, OPEN_BRACE, inertBlock],\n        ...STRINGS_COMMENTS,\n    ],\n    [\n        /// body\n        [ANY, CLOSE_BRACE, EXIT],\n        [ANY, OPEN_BRACE, body],\n        [ANY, OPEN_PARENTHESIS, inertParenthesis],\n        ...STRINGS_COMMENTS,\n    ],\n    [\n        /// stringSingle\n        [ANY, SINGLE_QUOTE, EXIT],\n    ],\n    [\n        /// stringDouble\n        [ANY, DOUBLE_QUOTE, EXIT],\n    ],\n    [\n        /// commentMultiline\n        [STAR, FORWARD_SLASH, EXIT],\n    ],\n])();\n//# sourceMappingURL=data:application/json;base64,","import { styleContent, styleKey } from '../style/qrl-styles';\nimport { implicit$FirstArg } from '../util/implicit_dollar';\nimport { getScopedStyles } from '../style/scoped-stylesheet';\nimport { useSequentialScope } from './use-sequential-scope';\nimport { assertQrl } from '../qrl/qrl-class';\nimport { isPromise } from '../util/promises';\nimport { assertDefined } from '../error/assert';\nimport { ComponentStylesPrefixContent } from '../util/markers';\n// <docs markdown=\"../readme.md#useStyles\">\n// !!DO NOT EDIT THIS COMMENT DIRECTLY!!!\n// (edit ../readme.md#useStyles instead)\n/**\n * A lazy-loadable reference to a component's styles.\n *\n * Component styles allow Qwik to lazy load the style information for the component only when\n * needed. (And avoid double loading it in case of SSR hydration.)\n *\n * ```tsx\n * import styles from './code-block.css?inline';\n *\n * export const CmpStyles = component$(() => {\n *   useStyles$(styles);\n *\n *   return <div>Some text</div>;\n * });\n * ```\n *\n * @public\n * @see `useStylesScoped`\n */\n// </docs>\nexport const useStylesQrl = (styles) => {\n    _useStyles(styles, (str) => str, false);\n};\n// <docs markdown=\"../readme.md#useStyles\">\n// !!DO NOT EDIT THIS COMMENT DIRECTLY!!!\n// (edit ../readme.md#useStyles instead)\n/**\n * A lazy-loadable reference to a component's styles.\n *\n * Component styles allow Qwik to lazy load the style information for the component only when\n * needed. (And avoid double loading it in case of SSR hydration.)\n *\n * ```tsx\n * import styles from './code-block.css?inline';\n *\n * export const CmpStyles = component$(() => {\n *   useStyles$(styles);\n *\n *   return <div>Some text</div>;\n * });\n * ```\n *\n * @public\n * @see `useStylesScoped`\n */\n// </docs>\nexport const useStyles$ = /*#__PURE__*/ implicit$FirstArg(useStylesQrl);\n// <docs markdown=\"../readme.md#useStylesScoped\">\n// !!DO NOT EDIT THIS COMMENT DIRECTLY!!!\n// (edit ../readme.md#useStylesScoped instead)\n/**\n * A lazy-loadable reference to a component's styles, that is scoped to the component.\n *\n * Component styles allow Qwik to lazy load the style information for the component only when\n * needed. (And avoid double loading it in case of SSR hydration.)\n *\n * ```tsx\n * import scoped from './code-block.css?inline';\n *\n * export const CmpScopedStyles = component$(() => {\n *   useStylesScoped$(scoped);\n *\n *   return <div>Some text</div>;\n * });\n * ```\n *\n * @public\n * @see `useStyles`\n */\n// </docs>\nexport const useStylesScopedQrl = (styles) => {\n    return {\n        scopeId: ComponentStylesPrefixContent + _useStyles(styles, getScopedStyles, true),\n    };\n};\n// <docs markdown=\"../readme.md#useStylesScoped\">\n// !!DO NOT EDIT THIS COMMENT DIRECTLY!!!\n// (edit ../readme.md#useStylesScoped instead)\n/**\n * A lazy-loadable reference to a component's styles, that is scoped to the component.\n *\n * Component styles allow Qwik to lazy load the style information for the component only when\n * needed. (And avoid double loading it in case of SSR hydration.)\n *\n * ```tsx\n * import scoped from './code-block.css?inline';\n *\n * export const CmpScopedStyles = component$(() => {\n *   useStylesScoped$(scoped);\n *\n *   return <div>Some text</div>;\n * });\n * ```\n *\n * @public\n * @see `useStyles`\n */\n// </docs>\nexport const useStylesScoped$ = /*#__PURE__*/ implicit$FirstArg(useStylesScopedQrl);\nconst _useStyles = (styleQrl, transform, scoped) => {\n    assertQrl(styleQrl);\n    const { val, set, iCtx, i, elCtx } = useSequentialScope();\n    if (val) {\n        return val;\n    }\n    const styleId = styleKey(styleQrl, i);\n    const containerState = iCtx.$renderCtx$.$static$.$containerState$;\n    set(styleId);\n    if (!elCtx.$appendStyles$) {\n        elCtx.$appendStyles$ = [];\n    }\n    if (!elCtx.$scopeIds$) {\n        elCtx.$scopeIds$ = [];\n    }\n    if (scoped) {\n        elCtx.$scopeIds$.push(styleContent(styleId));\n    }\n    if (containerState.$styleIds$.has(styleId)) {\n        return styleId;\n    }\n    containerState.$styleIds$.add(styleId);\n    const value = styleQrl.$resolveLazy$(containerState.$containerEl$);\n    const appendStyle = (styleText) => {\n        assertDefined(elCtx.$appendStyles$, 'appendStyles must be defined');\n        elCtx.$appendStyles$.push({\n            styleId,\n            content: transform(styleText, styleId),\n        });\n    };\n    if (isPromise(value)) {\n        iCtx.$waitOn$.push(value.then(appendStyle));\n    }\n    else {\n        appendStyle(value);\n    }\n    return styleId;\n};\n//# sourceMappingURL=data:application/json;base64,","import { isQwikComponent } from '../component/component.public';\nimport { _createSignal } from '../state/signal';\nimport { isFunction } from '../util/types';\nimport { invoke } from './use-core';\nimport { useSequentialScope } from './use-sequential-scope';\n/** @public */\nexport const useSignal = (initialState) => {\n    const { val, set, iCtx } = useSequentialScope();\n    if (val != null) {\n        return val;\n    }\n    const containerState = iCtx.$renderCtx$.$static$.$containerState$;\n    const value = isFunction(initialState) && !isQwikComponent(initialState)\n        ? invoke(undefined, initialState)\n        : initialState;\n    const signal = _createSignal(value, containerState, 0, undefined);\n    return set(signal);\n};\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidXNlLXNpZ25hbC5qcyIsInNvdXJjZVJvb3QiOiIuLyIsInNvdXJjZXMiOlsicGFja2FnZXMvcXdpay9zcmMvY29yZS91c2UvdXNlLXNpZ25hbC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsZUFBZSxFQUFFLE1BQU0sK0JBQStCLENBQUM7QUFDaEUsT0FBTyxFQUFFLGFBQWEsRUFBZSxNQUFNLGlCQUFpQixDQUFDO0FBQzdELE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDM0MsT0FBTyxFQUFFLE1BQU0sRUFBRSxNQUFNLFlBQVksQ0FBQztBQUNwQyxPQUFPLEVBQUUsa0JBQWtCLEVBQUUsTUFBTSx3QkFBd0IsQ0FBQztBQVE1RCxjQUFjO0FBQ2QsTUFBTSxDQUFDLE1BQU0sU0FBUyxHQUFjLENBQVEsWUFBb0IsRUFBaUIsRUFBRTtJQUNqRixNQUFNLEVBQUUsR0FBRyxFQUFFLEdBQUcsRUFBRSxJQUFJLEVBQUUsR0FBRyxrQkFBa0IsRUFBaUIsQ0FBQztJQUMvRCxJQUFJLEdBQUcsSUFBSSxJQUFJLEVBQUUsQ0FBQztRQUNoQixPQUFPLEdBQUcsQ0FBQztJQUNiLENBQUM7SUFFRCxNQUFNLGNBQWMsR0FBRyxJQUFJLENBQUMsV0FBVyxDQUFDLFFBQVEsQ0FBQyxnQkFBZ0IsQ0FBQztJQUNsRSxNQUFNLEtBQUssR0FDVCxVQUFVLENBQUMsWUFBWSxDQUFDLElBQUksQ0FBQyxlQUFlLENBQUMsWUFBWSxDQUFDO1FBQ3hELENBQUMsQ0FBQyxNQUFNLENBQUMsU0FBUyxFQUFFLFlBQW1CLENBQUM7UUFDeEMsQ0FBQyxDQUFDLFlBQVksQ0FBQztJQUNuQixNQUFNLE1BQU0sR0FBRyxhQUFhLENBQUMsS0FBSyxFQUFFLGNBQWMsRUFBRSxDQUFDLEVBQUUsU0FBUyxDQUFrQixDQUFDO0lBQ25GLE9BQU8sR0FBRyxDQUFDLE1BQU0sQ0FBQyxDQUFDO0FBQ3JCLENBQUMsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IGlzUXdpa0NvbXBvbmVudCB9IGZyb20gJy4uL2NvbXBvbmVudC9jb21wb25lbnQucHVibGljJztcbmltcG9ydCB7IF9jcmVhdGVTaWduYWwsIHR5cGUgU2lnbmFsIH0gZnJvbSAnLi4vc3RhdGUvc2lnbmFsJztcbmltcG9ydCB7IGlzRnVuY3Rpb24gfSBmcm9tICcuLi91dGlsL3R5cGVzJztcbmltcG9ydCB7IGludm9rZSB9IGZyb20gJy4vdXNlLWNvcmUnO1xuaW1wb3J0IHsgdXNlU2VxdWVudGlhbFNjb3BlIH0gZnJvbSAnLi91c2Utc2VxdWVudGlhbC1zY29wZSc7XG5cbi8qKiBAcHVibGljICovXG5leHBvcnQgaW50ZXJmYWNlIFVzZVNpZ25hbCB7XG4gIDxUPigpOiBTaWduYWw8VCB8IHVuZGVmaW5lZD47XG4gIDxUPih2YWx1ZTogVCB8ICgoKSA9PiBUKSk6IFNpZ25hbDxUPjtcbn1cblxuLyoqIEBwdWJsaWMgKi9cbmV4cG9ydCBjb25zdCB1c2VTaWduYWw6IFVzZVNpZ25hbCA9IDxTVEFURT4oaW5pdGlhbFN0YXRlPzogU1RBVEUpOiBTaWduYWw8U1RBVEU+ID0+IHtcbiAgY29uc3QgeyB2YWwsIHNldCwgaUN0eCB9ID0gdXNlU2VxdWVudGlhbFNjb3BlPFNpZ25hbDxTVEFURT4+KCk7XG4gIGlmICh2YWwgIT0gbnVsbCkge1xuICAgIHJldHVybiB2YWw7XG4gIH1cblxuICBjb25zdCBjb250YWluZXJTdGF0ZSA9IGlDdHguJHJlbmRlckN0eCQuJHN0YXRpYyQuJGNvbnRhaW5lclN0YXRlJDtcbiAgY29uc3QgdmFsdWUgPVxuICAgIGlzRnVuY3Rpb24oaW5pdGlhbFN0YXRlKSAmJiAhaXNRd2lrQ29tcG9uZW50KGluaXRpYWxTdGF0ZSlcbiAgICAgID8gaW52b2tlKHVuZGVmaW5lZCwgaW5pdGlhbFN0YXRlIGFzIGFueSlcbiAgICAgIDogaW5pdGlhbFN0YXRlO1xuICBjb25zdCBzaWduYWwgPSBfY3JlYXRlU2lnbmFsKHZhbHVlLCBjb250YWluZXJTdGF0ZSwgMCwgdW5kZWZpbmVkKSBhcyBTaWduYWw8U1RBVEU+O1xuICByZXR1cm4gc2V0KHNpZ25hbCk7XG59O1xuIl19","import { qrl } from '../qrl/qrl';\nimport { ERROR_CONTEXT } from '../render/error-handling';\nimport { useContextProvider } from './use-context';\nimport { useOn } from './use-on';\nimport { useStore } from './use-store.public';\n/** @public */\nexport const useErrorBoundary = () => {\n    const store = useStore({\n        error: undefined,\n    });\n    useOn('error-boundary', qrl('/runtime', 'error', [store]));\n    useContextProvider(ERROR_CONTEXT, store);\n    return store;\n};\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidXNlLWVycm9yLWJvdW5kYXJ5LmpzIiwic291cmNlUm9vdCI6Ii4vIiwic291cmNlcyI6WyJwYWNrYWdlcy9xd2lrL3NyYy9jb3JlL3VzZS91c2UtZXJyb3ItYm91bmRhcnkudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLEdBQUcsRUFBRSxNQUFNLFlBQVksQ0FBQztBQUNqQyxPQUFPLEVBQTJCLGFBQWEsRUFBRSxNQUFNLDBCQUEwQixDQUFDO0FBQ2xGLE9BQU8sRUFBRSxrQkFBa0IsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUNuRCxPQUFPLEVBQUUsS0FBSyxFQUFFLE1BQU0sVUFBVSxDQUFDO0FBQ2pDLE9BQU8sRUFBRSxRQUFRLEVBQUUsTUFBTSxvQkFBb0IsQ0FBQztBQUU5QyxjQUFjO0FBQ2QsTUFBTSxDQUFDLE1BQU0sZ0JBQWdCLEdBQUcsR0FBaUMsRUFBRTtJQUNqRSxNQUFNLEtBQUssR0FBdUIsUUFBUSxDQUFDO1FBQ3pDLEtBQUssRUFBRSxTQUFTO0tBQ2pCLENBQUMsQ0FBQztJQUNILEtBQUssQ0FBQyxnQkFBZ0IsRUFBRSxHQUFHLENBQUMsVUFBVSxFQUFFLE9BQU8sRUFBRSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUMzRCxrQkFBa0IsQ0FBQyxhQUFhLEVBQUUsS0FBSyxDQUFDLENBQUM7SUFFekMsT0FBTyxLQUFLLENBQUM7QUFDZixDQUFDLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBxcmwgfSBmcm9tICcuLi9xcmwvcXJsJztcbmltcG9ydCB7IHR5cGUgRXJyb3JCb3VuZGFyeVN0b3JlLCBFUlJPUl9DT05URVhUIH0gZnJvbSAnLi4vcmVuZGVyL2Vycm9yLWhhbmRsaW5nJztcbmltcG9ydCB7IHVzZUNvbnRleHRQcm92aWRlciB9IGZyb20gJy4vdXNlLWNvbnRleHQnO1xuaW1wb3J0IHsgdXNlT24gfSBmcm9tICcuL3VzZS1vbic7XG5pbXBvcnQgeyB1c2VTdG9yZSB9IGZyb20gJy4vdXNlLXN0b3JlLnB1YmxpYyc7XG5cbi8qKiBAcHVibGljICovXG5leHBvcnQgY29uc3QgdXNlRXJyb3JCb3VuZGFyeSA9ICgpOiBSZWFkb25seTxFcnJvckJvdW5kYXJ5U3RvcmU+ID0+IHtcbiAgY29uc3Qgc3RvcmU6IEVycm9yQm91bmRhcnlTdG9yZSA9IHVzZVN0b3JlKHtcbiAgICBlcnJvcjogdW5kZWZpbmVkLFxuICB9KTtcbiAgdXNlT24oJ2Vycm9yLWJvdW5kYXJ5JywgcXJsKCcvcnVudGltZScsICdlcnJvcicsIFtzdG9yZV0pKTtcbiAgdXNlQ29udGV4dFByb3ZpZGVyKEVSUk9SX0NPTlRFWFQsIHN0b3JlKTtcblxuICByZXR1cm4gc3RvcmU7XG59O1xuIl19"],"names":["isNode","isElement","tryGetContext","SHOW_COMMENT","FILTER_REJECT","isContainer","emitEvent","_a","IS_HEAD","IS_IMMUTABLE","renderRoot","processData","setComponentProps","registerQwikEvent"],"mappings":"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,QAAQ,EAAE,EAAE,oBAAoB,CAAC,IAAI,CAAC;AACtC,KAAK,CAAC,CAAC;AACP,EAAE;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACY,MAAC,kBAAkB,GAAG,CAAC,OAAO,EAAE,QAAQ,KAAK;AACzD,IAAI,MAAM,EAAE,GAAG,EAAE,GAAG,EAAE,KAAK,EAAE,GAAG,kBAAkB,EAAE,CAAC;AACrD,IAAI,IAAI,GAAG,KAAK,SAAS,EAAE;AAC3B,QAAQ,OAAO;AACf,KAAK;AACL,IAAI,IAAI,IAAI,EAAE;AACd,QAAQ,eAAe,CAAC,OAAO,CAAC,CAAC;AACjC,KAAK;AACL,IAAI,MAAM,QAAQ,IAAI,KAAK,CAAC,UAAU,KAAK,KAAK,CAAC,UAAU,GAAG,IAAI,GAAG,EAAE,CAAC,CAAC,CAAC;AAC1E,IAAI,IAAI,IAAI,IAAI,UAAU,EAAE;AAC5B,QAAQ,kBAAkB,CAAC,QAAQ,CAAC,CAAC;AACrC,KAAK;AACL,IAAI,QAAQ,CAAC,GAAG,CAAC,OAAO,CAAC,EAAE,EAAE,QAAQ,CAAC,CAAC;AACvC,IAAI,GAAG,CAAC,IAAI,CAAC,CAAC;AACd,EAAE;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACY,MAAC,UAAU,GAAG,CAAC,OAAO,EAAE,YAAY,KAAK;AACrD,IAAI,MAAM,EAAE,G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AAQ,OAAO,CAAC,CAAC;AACjB,KAAK;AACL,IAAI,IAAI,OAAO,WAAW,KAAK,QAAQ,EAAE;AACzC,QAAQ,OAAO,WAAW,CAAC,GAAG,EAAE,CAAC;AACjC,KAAK;AACL,IAAI,OAAO,CAAC,CAAC;AACb,CAAC;;ACzJD,IAAI,eAAe,GAAG,CAAC,CAAC;AACxB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACY,MAAC,CAAC,GAAG,CAAC,UAAU,KAAK;AACjC,IAAI,IAAI,CAAC,WAAW,IAAI,IAAI,EAAE;AAC9B,QAAQ,MAAM,IAAI,KAAK,CAAC,sIAAsI,CAAC,CAAC;AAChK,KAAK;AACL,IAAI,OAAO,SAAS,CAAC,IAAI,EAAE,GAAG,GAAG,eAAe,EAAE,EAAE,UAAU,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,CAAC,CAAC;AACxF,EAAE;AACF;AACY,MAAC,QAAQ,GAAG,CAAC,GAAG,KAAK;AACjC,IAAI,OAAO,GAAG,CAAC;AACf,EAAE;AACF;AACY,MAAC,MAAM,GAAG,iBAAiB,CAAC,QAAQ;;ACnFhD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAC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"}