import { createContextId, componentQrl, inlinedQrl, useSignal, useContextProvider, useLexicalScope, _jsxC, Slot, _IMMUTABLE, _wrapProp, useContext, Fragment as Fragment$1, _fnSignal } from "@builder.io/qwik";
import { Fragment } from "@builder.io/qwik/jsx-runtime";
const openPortalContextId = createContextId("PortalProviderAPI");
const closePortalContextId = createContextId("PortalCloseAPI");
const portalInfoListContextId = createContextId("Portals");
const QwikUIProvider = /* @__PURE__ */ componentQrl(/* @__PURE__ */ inlinedQrl(() => {
  const portalInfoListSig = useSignal([]);
  useContextProvider(portalInfoListContextId, portalInfoListSig);
  useContextProvider(openPortalContextId, /* @__PURE__ */ inlinedQrl((id, elementToTeleport, contextPairs) => {
    const [portalInfoListSig2] = useLexicalScope();
    const portalInfo = {
      id,
      elementToTeleport,
      contextPairs: contextPairs || []
    };
    portalInfo.close$ = /* @__PURE__ */ inlinedQrl(function removePortalFromList() {
      const [portalInfo2, portalInfoListSig3] = useLexicalScope();
      portalInfoListSig3.value = portalInfoListSig3.value.filter((currentPortalInfo) => currentPortalInfo !== portalInfo2);
    }, "QwikUIProvider_component_useContextProvider_1_6BJUdV0RZj4", [
      portalInfo,
      portalInfoListSig2
    ]);
    portalInfo.contextPairs.push({
      id: closePortalContextId,
      value: portalInfo.close$
    });
    portalInfoListSig2.value = [
      ...portalInfoListSig2.value,
      portalInfo
    ];
    return portalInfo.close$;
  }, "QwikUIProvider_component_useContextProvider_fY0z1PeSWVo", [
    portalInfoListSig
  ]));
  return /* @__PURE__ */ _jsxC(Fragment, {
    children: [
      /* @__PURE__ */ _jsxC(Slot, null, 3, "kO_0"),
      portalInfoListSig.value.map((portalInfo) => /* @__PURE__ */ _jsxC(Portal, {
        get id() {
          return portalInfo.id;
        },
        [_IMMUTABLE]: {
          id: _wrapProp(portalInfo, "id")
        }
      }, 3, portalInfo.id))
    ]
  }, 1, "kO_1");
}, "QwikUIProvider_component_BWbmln0puwQ"));
const Portal = /* @__PURE__ */ componentQrl(/* @__PURE__ */ inlinedQrl((props) => {
  const portalInfoList = useContext(portalInfoListContextId);
  const myPortalInfoList = portalInfoList.value.filter((portal) => portal.id === props.id);
  return /* @__PURE__ */ _jsxC(Fragment, {
    children: myPortalInfoList.map((portalInfo) => /* @__PURE__ */ _jsxC(Fragment$1, {
      get "data-qwikui-portal-id"() {
        return props.id;
      },
      children: /* @__PURE__ */ _jsxC(WrapJsxInContext, {
        get elementToTeleport() {
          return portalInfo.elementToTeleport;
        },
        get contextPairs() {
          return portalInfo.contextPairs;
        },
        [_IMMUTABLE]: {
          contextPairs: _wrapProp(portalInfo, "contextPairs"),
          elementToTeleport: _wrapProp(portalInfo, "elementToTeleport")
        }
      }, 3, "kO_2"),
      [_IMMUTABLE]: {
        "data-qwikui-portal-id": _fnSignal((p0) => p0.id, [
          props
        ], "p0.id")
      }
    }, 1, portalInfo.id))
  }, 1, "kO_3");
}, "Portal_component_OyYmgctigfo"));
const WrapJsxInContext = /* @__PURE__ */ componentQrl(/* @__PURE__ */ inlinedQrl((props) => {
  props.contextPairs.forEach(({ id, value }) => useContextProvider(id, value));
  return /* @__PURE__ */ _jsxC(Fragment, {
    children: [
      props.elementToTeleport
    ].map((jsx) => jsx)
  }, 1, "kO_4");
}, "WrapJsxInContext_component_wWXsIsOqshw"));
export {
  Portal,
  QwikUIProvider,
  WrapJsxInContext,
  portalInfoListContextId as _auto_portalInfoListContextId,
  closePortalContextId,
  openPortalContextId
};
