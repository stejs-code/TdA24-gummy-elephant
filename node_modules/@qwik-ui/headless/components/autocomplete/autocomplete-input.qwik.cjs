"use strict";
Object.defineProperty(exports, Symbol.toStringTag, { value: "Module" });
const qwik = require("@builder.io/qwik");
const autocompleteContextId = require("./autocomplete-context-id.qwik.cjs");
const keyCode_type = require("../../utils/key-code.type.qwik.cjs");
const autocompletePreventedKeys = [
  keyCode_type.KeyCode.Home,
  keyCode_type.KeyCode.End,
  keyCode_type.KeyCode.PageDown,
  keyCode_type.KeyCode.PageUp,
  keyCode_type.KeyCode.ArrowDown,
  keyCode_type.KeyCode.ArrowUp
];
const AutocompleteInput = /* @__PURE__ */ qwik.componentQrl(/* @__PURE__ */ qwik.inlinedQrl((props) => {
  const inputRefSig = qwik.useSignal();
  const contextService = qwik.useContext(autocompleteContextId);
  qwik.useVisibleTaskQrl(/* @__PURE__ */ qwik.inlinedQrl(function registerInputRefTask() {
    const [contextService2, inputRefSig2] = qwik.useLexicalScope();
    contextService2.inputRefSig.value = inputRefSig2.value;
  }, "AutocompleteInput_component_useVisibleTask_thYHaSqtZmg", [
    contextService,
    inputRefSig
  ]));
  qwik.useVisibleTaskQrl(/* @__PURE__ */ qwik.inlinedQrl(function preventDefaultTask({ cleanup }) {
    const [inputRefSig2] = qwik.useLexicalScope();
    function keyHandler(e) {
      if (autocompletePreventedKeys.includes(e.key))
        e.preventDefault();
    }
    inputRefSig2.value?.addEventListener("keydown", keyHandler);
    cleanup(() => {
      inputRefSig2.value?.removeEventListener("keydown", keyHandler);
    });
  }, "AutocompleteInput_component_useVisibleTask_1_VyuLbo0324M", [
    inputRefSig
  ]));
  return /* @__PURE__ */ qwik._jsxS("input", {
    ref: inputRefSig,
    ...props,
    onBlur$: /* @__PURE__ */ qwik.inlinedQrl(() => {
      const [contextService2] = qwik.useLexicalScope();
      contextService2.isInputFocusedSig.value = false;
    }, "AutocompleteInput_component_input_onBlur_ha9CF3bvY4U", [
      contextService
    ]),
    onFocus$: /* @__PURE__ */ qwik.inlinedQrl(() => {
      const [contextService2] = qwik.useLexicalScope();
      contextService2.isInputFocusedSig.value = true;
    }, "AutocompleteInput_component_input_onFocus_3I0ReN96s00", [
      contextService
    ]),
    "onInput$": /* @__PURE__ */ qwik.inlinedQrl((_, elm) => {
      const [contextService2] = qwik.useLexicalScope();
      return contextService2.inputValueSig.value = elm.value;
    }, "AutocompleteInput_component_input_bind_value_t722JOYUiD0", [
      contextService
    ]),
    onKeyDown$: [
      /* @__PURE__ */ qwik.inlinedQrl((e) => {
        const [contextService2] = qwik.useLexicalScope();
        if (e.key === "ArrowDown") {
          contextService2.isTriggerExpandedSig.value = true;
          contextService2.filteredOptionsStore[0]?.value?.focus();
        }
      }, "AutocompleteInput_component_input_onKeyDown_EuX8MfHcVXc", [
        contextService
      ]),
      props.onKeyDown$
    ]
  }, {
    "aria-autocomplete": "list",
    "aria-controls": qwik._fnSignal((p0) => p0.listBoxId, [
      contextService
    ], "p0.listBoxId"),
    "aria-disabled": qwik._fnSignal((p0) => p0["aria-disabled"] || false, [
      props
    ], 'p0["aria-disabled"]||false'),
    "aria-expanded": qwik._fnSignal((p0) => p0.isTriggerExpandedSig.value, [
      contextService
    ], "p0.isTriggerExpandedSig.value"),
    "aria-haspopup": "listbox",
    "aria-invalid": qwik._fnSignal((p0) => p0["aria-invalid"] || false, [
      props
    ], 'p0["aria-invalid"]||false'),
    "aria-label": qwik._fnSignal((p0) => p0.labelRef.value ? void 0 : p0.inputValueSig.value, [
      contextService
    ], "p0.labelRef.value?undefined:p0.inputValueSig.value"),
    "aria-required": qwik._fnSignal((p0) => p0["aria-required"] || false, [
      props
    ], 'p0["aria-required"]||false'),
    "data-autocomplete-input-id": qwik._fnSignal((p0) => p0.inputId, [
      contextService
    ], "p0.inputId"),
    id: qwik._fnSignal((p0) => p0.inputId, [
      contextService
    ], "p0.inputId"),
    role: "combobox",
    "value": contextService.inputValueSig
  }, 0, "uX_0");
}, "AutocompleteInput_component_0lwjKc4pIhE"));
exports.AutocompleteInput = AutocompleteInput;
exports._auto_autocompletePreventedKeys = autocompletePreventedKeys;
