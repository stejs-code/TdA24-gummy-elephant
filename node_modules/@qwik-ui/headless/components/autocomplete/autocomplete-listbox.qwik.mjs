import { componentQrl, inlinedQrl, useSignal, useContext, useVisibleTaskQrl, useLexicalScope, _jsxS, _jsxC, Slot, _fnSignal } from "@builder.io/qwik";
import AutocompleteContextId from "./autocomplete-context-id.qwik.mjs";
import { KeyCode } from "../../utils/key-code.type.qwik.mjs";
const preventedKeys = [
  KeyCode.Home,
  KeyCode.End,
  KeyCode.PageDown,
  KeyCode.PageUp,
  KeyCode.ArrowDown,
  KeyCode.ArrowUp
];
const AutocompleteListbox = /* @__PURE__ */ componentQrl(/* @__PURE__ */ inlinedQrl((props) => {
  const listboxRefSig = useSignal();
  const contextService = useContext(AutocompleteContextId);
  useVisibleTaskQrl(/* @__PURE__ */ inlinedQrl(function preventDefaultTask({ cleanup }) {
    const [listboxRefSig2] = useLexicalScope();
    function keyHandler(e) {
      if (preventedKeys.includes(e.key))
        e.preventDefault();
    }
    listboxRefSig2.value?.addEventListener("keydown", keyHandler);
    cleanup(() => {
      listboxRefSig2.value?.removeEventListener("keydown", keyHandler);
    });
  }, "AutocompleteListbox_component_useVisibleTask_Ezcf8dU18EU", [
    listboxRefSig
  ]));
  useVisibleTaskQrl(/* @__PURE__ */ inlinedQrl(function focusListboxTask({ track }) {
    const [contextService2, listboxRefSig2] = useLexicalScope();
    if (track(() => contextService2.isTriggerExpandedSig.value))
      listboxRefSig2.value?.focus();
  }, "AutocompleteListbox_component_useVisibleTask_1_Gv0Ci5GgdFc", [
    contextService,
    listboxRefSig
  ]));
  useVisibleTaskQrl(/* @__PURE__ */ inlinedQrl(function registerListboxRefTask() {
    const [contextService2, listboxRefSig2] = useLexicalScope();
    contextService2.listBoxRefSig.value = listboxRefSig2.value;
  }, "AutocompleteListbox_component_useVisibleTask_2_z4a2kcjy0s0", [
    contextService,
    listboxRefSig
  ]));
  return /* @__PURE__ */ _jsxS("ul", {
    ref: listboxRefSig,
    ...props,
    children: /* @__PURE__ */ _jsxC(Slot, null, 3, "D6_0"),
    // aria-label={!contextService.labelRef.value ? contextService.inputValue.value : undefined}
    onKeyDown$: [
      /* @__PURE__ */ inlinedQrl((e) => {
        const [contextService2] = useLexicalScope();
        const availableOptions = contextService2.filteredOptionsStore.map((option) => option.value);
        const target = e.target;
        const currentIndex = availableOptions.indexOf(target);
        if (e.key === "ArrowDown") {
          if (currentIndex === availableOptions.length - 1)
            availableOptions[0]?.focus();
          else
            availableOptions[currentIndex + 1]?.focus();
        }
        if (e.key === "ArrowUp") {
          if (currentIndex <= 0)
            availableOptions[availableOptions.length - 1]?.focus();
          else
            availableOptions[currentIndex - 1]?.focus();
        }
        if (e.key === "Home")
          availableOptions[0]?.focus();
        if (e.key === "End")
          availableOptions[availableOptions.length - 1]?.focus();
      }, "AutocompleteListbox_component_ul_onKeyDown_IqVk5yUZAFQ", [
        contextService
      ]),
      props.onKeyDown$
    ]
  }, {
    id: _fnSignal((p0) => p0.listBoxId, [
      contextService
    ], "p0.listBoxId"),
    role: "listbox",
    style: _fnSignal((p0, p1) => `
          display: ${p0.isTriggerExpandedSig.value ? "block" : "none"}; position: absolute; z-index: 1; ${p1.style}
      `, [
      contextService,
      props
    ], '`\n          display: ${p0.isTriggerExpandedSig.value?"block":"none"}; position: absolute; z-index: 1; ${p1.style}\n      `')
  }, 0, "D6_1");
}, "AutocompleteListbox_component_GKhRxpVEBKY"));
export {
  AutocompleteListbox,
  preventedKeys as _auto_preventedKeys
};
