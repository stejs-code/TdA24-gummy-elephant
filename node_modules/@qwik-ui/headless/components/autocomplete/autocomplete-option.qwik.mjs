import { componentQrl, inlinedQrl, useSignal, useContext, useId, useTaskQrl, useLexicalScope, useVisibleTaskQrl, _jsxS, _jsxC, Slot, _fnSignal } from "@builder.io/qwik";
import AutocompleteContextId from "./autocomplete-context-id.qwik.mjs";
const AutocompleteOption = /* @__PURE__ */ componentQrl(/* @__PURE__ */ inlinedQrl((props) => {
  const ref = useSignal();
  const contextService = useContext(AutocompleteContextId);
  const specialId = useId();
  useTaskQrl(/* @__PURE__ */ inlinedQrl(() => {
    const [contextService2, props2, ref2, specialId2] = useLexicalScope();
    if (typeof window !== "undefined")
      return;
    console.log(props2.optionValue, specialId2);
    contextService2.dataHolder.value = [
      ...contextService2.dataHolder.value,
      {
        value: props2.optionValue,
        id: specialId2,
        ref: ref2
      }
    ];
  }, "AutocompleteOption_component_useTask_E4FWZXZEpuM", [
    contextService,
    props,
    ref,
    specialId
  ]));
  useVisibleTaskQrl(/* @__PURE__ */ inlinedQrl(({ cleanup }) => {
    const [contextService2, props2, ref2, specialId2] = useLexicalScope();
    cleanup(() => {
      contextService2.dataHolder.value = contextService2.dataHolder.value.filter((item) => item.id !== specialId2);
    });
    console.log(props2.optionValue, specialId2);
    const wasRenderedOnServer = contextService2.dataHolder.value.find((item) => item.id === specialId2);
    if (wasRenderedOnServer)
      return;
    contextService2.dataHolder.value = [
      ...contextService2.dataHolder.value,
      {
        value: props2.optionValue,
        id: specialId2,
        ref: ref2
      }
    ];
  }, "AutocompleteOption_component_useVisibleTask_0Y1kY8lGtTU", [
    contextService,
    props,
    ref,
    specialId
  ]), {
    strategy: "document-idle"
  });
  const newStore = contextService.optionsStore.slice();
  newStore.push(ref);
  contextService.optionsStore = newStore;
  return /* @__PURE__ */ _jsxS("li", {
    ref,
    ...props,
    children: /* @__PURE__ */ _jsxC(Slot, null, 3, "RK_0"),
    onClick$: [
      /* @__PURE__ */ inlinedQrl(() => {
        const [contextService2, props2, specialId2] = useLexicalScope();
        let index;
        const item = contextService2.dataHolder.value.find((item2, i) => {
          if (item2.id === specialId2) {
            index = i;
            return true;
          } else
            return false;
        });
        console.log(item, index);
        console.log("found index", index);
        if (!props2.disabled) {
          contextService2.inputValueSig.value = props2.optionValue;
          contextService2.isTriggerExpandedSig.value = false;
        }
      }, "AutocompleteOption_component_li_onClick_0srwbu5LfRI", [
        contextService,
        props,
        specialId
      ]),
      props.onClick$
    ],
    onKeyDown$: [
      /* @__PURE__ */ inlinedQrl((e) => {
        const [contextService2, props2] = useLexicalScope();
        if ((e.key === "Enter" || e.key === " ") && !props2.disabled) {
          contextService2.inputValueSig.value = props2.optionValue;
          contextService2.isTriggerExpandedSig.value = false;
          contextService2.focusInput$(contextService2.inputId);
        }
      }, "AutocompleteOption_component_li_onKeyDown_NW1K4SApSwk", [
        contextService,
        props
      ]),
      props.onKeyDown$
    ]
  }, {
    "aria-disabled": _fnSignal((p0) => p0.disabled, [
      props
    ], "p0.disabled"),
    "data-test": specialId,
    role: "option",
    tabIndex: _fnSignal((p0) => p0.disabled ? -1 : 0, [
      props
    ], "p0.disabled?-1:0")
  }, 0, "RK_1");
}, "AutocompleteOption_component_ArnQlArjEIU"));
export {
  AutocompleteOption
};
