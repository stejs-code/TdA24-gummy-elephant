import { _jsxC, componentQrl, inlinedQrl, useSignal, useContext, useTaskQrl, useLexicalScope, useVisibleTaskQrl, Slot } from "@builder.io/qwik";
import { openPortalContextId } from "../qwik-ui-provider/qwik-ui-provider.qwik.mjs";
import ComboboxContextId from "./combobox-context-id.qwik.mjs";
const ComboboxPortal = ({ children, contextIds }) => {
  return /* @__PURE__ */ _jsxC(ComboboxPortalImpl, {
    contextIds,
    elementToTeleport: children
  }, 3, "SW_0");
};
const ComboboxPortalImpl = /* @__PURE__ */ componentQrl(/* @__PURE__ */ inlinedQrl((props) => {
  const contextPairsSig = useSignal([]);
  const comboboxContext = useContext(ComboboxContextId);
  useTaskQrl(/* @__PURE__ */ inlinedQrl(async function syncContextIdsFromProps({ track }) {
    const [comboboxContext2, contextPairsSig2, props2] = useLexicalScope();
    const contextIdsFromProps = track(() => props2.contextIds);
    contextPairsSig2.value = [
      {
        id: ComboboxContextId,
        value: comboboxContext2
      }
    ];
    contextIdsFromProps?.map((id) => {
      contextPairsSig2.value.push({
        id,
        value: useContext(id)
      });
    });
  }, "ComboboxPortalImpl_component_useTask_O0iKmVWZFuY", [
    comboboxContext,
    contextPairsSig,
    props
  ]));
  const openPortal$ = useContext(openPortalContextId);
  const closePortalSig = useSignal();
  useVisibleTaskQrl(/* @__PURE__ */ inlinedQrl(async function openOrCloseListBox({ track }) {
    const [closePortalSig2, comboboxContext2, contextPairsSig2, openPortal$2, props2] = useLexicalScope();
    track(() => comboboxContext2.isListboxOpenSig.value);
    track(() => contextPairsSig2.value);
    if (comboboxContext2.isListboxOpenSig.value && contextPairsSig2.value)
      closePortalSig2.value = await openPortal$2(comboboxContext2.localId, props2.elementToTeleport, contextPairsSig2.value);
    else if (closePortalSig2.value) {
      const closePortal$ = closePortalSig2.value;
      await closePortal$();
    }
  }, "ComboboxPortalImpl_component_useVisibleTask_peF0T330C7I", [
    closePortalSig,
    comboboxContext,
    contextPairsSig,
    openPortal$,
    props
  ]));
  useVisibleTaskQrl(/* @__PURE__ */ inlinedQrl(async function cleanupTeleportedElement({ cleanup }) {
    const [closePortalSig2] = useLexicalScope();
    cleanup(async () => {
      if (closePortalSig2.value) {
        const closePortal$ = closePortalSig2.value;
        await closePortal$();
      }
    });
  }, "ComboboxPortalImpl_component_useVisibleTask_1_bHdBhXNkEjg", [
    closePortalSig
  ]));
  return /* @__PURE__ */ _jsxC(Slot, null, 3, "SW_1");
}, "ComboboxPortalImpl_component_SqyclsCeWaA"));
export {
  ComboboxPortal,
  ComboboxPortalImpl
};
