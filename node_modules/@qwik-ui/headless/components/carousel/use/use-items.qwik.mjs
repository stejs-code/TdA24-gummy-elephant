import { useSignal, useStore, useOnDocument, inlinedQrl, useLexicalScope, useTaskQrl, useVisibleTaskQrl } from "@builder.io/qwik";
import { getCount, getElements, getElement } from "./utils.qwik.mjs";
import { useVisible } from "./use-visible.qwik.mjs";
const useItems = (ref, params) => {
  const visible = useVisible(ref);
  const loop = params?.loop ?? true;
  const transition = params?.transition || 350;
  const isFirst = params?.startAt && params?.startAt === 0 || false;
  const isLast = params?.startAt && params?.startAt + 1 === getCount(ref) || false;
  const index = params?.startAt || 0;
  const total = useSignal(0);
  const active = useStore({
    isFirst: useSignal(isFirst),
    isLast: useSignal(isLast),
    current: useSignal(index)
  });
  const scrollAt = /* @__PURE__ */ inlinedQrl((index2) => {
    const [active2, ref2, transition2] = useLexicalScope();
    const count = getCount(ref2);
    const element = getElement(ref2, index2);
    if (!ref2?.value || !count) {
      console.warn(`Can't jump to ${index2} because the carousel elements is empty.`);
      return;
    }
    if (!element) {
      console.warn(`Can't jump to ${index2} because the element index ${index2} doesn't exist.`);
      return;
    }
    setTimeout(() => element.scrollIntoView({
      behavior: "smooth",
      block: "nearest",
      inline: "center"
    }), transition2);
    active2.current.value = index2;
  }, "useItems_scrollAt_w0rF5B4LQ7s", [
    active,
    ref,
    transition
  ]);
  const previous = /* @__PURE__ */ inlinedQrl(() => {
    const [active2, loop2, ref2, scrollAt2] = useLexicalScope();
    if (!loop2 && active2.isFirst.value)
      return;
    const index2 = active2.isFirst.value ? getCount(ref2) - 1 : active2.current.value - 1;
    scrollAt2(index2);
  }, "useItems_previous_4tOoNm3D6To", [
    active,
    loop,
    ref,
    scrollAt
  ]);
  const next = /* @__PURE__ */ inlinedQrl(() => {
    const [active2, loop2, ref2, scrollAt2] = useLexicalScope();
    const max = getCount(ref2) - 1;
    if (!loop2 && active2.current.value === max)
      return;
    const index2 = active2.current.value === max ? 0 : active2.current.value + 1;
    scrollAt2(index2);
  }, "useItems_next_Aw4EtPIWJ2M", [
    active,
    loop,
    ref,
    scrollAt
  ]);
  useOnDocument("focus", /* @__PURE__ */ inlinedQrl(() => {
    const [active2, ref2] = useLexicalScope();
    getElements(ref2).forEach((element, index2) => {
      if (!element.contains(document.activeElement))
        return;
      active2.current.value = index2;
    });
  }, "useItems_useOnDocument_o3Qy4RtDcX4", [
    active,
    ref
  ]));
  useTaskQrl(/* @__PURE__ */ inlinedQrl(({ track }) => {
    const [active2, ref2] = useLexicalScope();
    const index2 = track(() => active2.current.value);
    active2.isFirst.value = index2 === 0;
    active2.isLast.value = index2 + 1 === getCount(ref2);
  }, "useItems_useTask_koFKDjM01VA", [
    active,
    ref
  ]));
  useVisibleTaskQrl(/* @__PURE__ */ inlinedQrl(() => {
    const [active2, ref2, scrollAt2, total2] = useLexicalScope();
    total2.value = getCount(ref2);
    scrollAt2(active2.current.value);
  }, "useItems_useVisibleTask_FPaY6NnxHbA", [
    active,
    ref,
    scrollAt,
    total
  ]));
  return {
    active,
    visible,
    total,
    next,
    previous,
    scrollAt
  };
};
export {
  useItems
};
