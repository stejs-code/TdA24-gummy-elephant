"use strict";
Object.defineProperty(exports, Symbol.toStringTag, { value: "Module" });
const qwik = require("@builder.io/qwik");
const utils = require("./utils.qwik.cjs");
const useScroll = (ref, { items, loop = true, transition = 350 }) => {
  const to = /* @__PURE__ */ qwik.inlinedQrl((index) => {
    const [items2, ref2, transition2] = qwik.useLexicalScope();
    const count = utils.getCount(ref2);
    const element = utils.getElement(ref2, index);
    if (!ref2?.value || !count) {
      console.warn(`Can't jump to ${index} because the carousel elements is empty.`);
      return;
    }
    if (!element) {
      console.warn(`Can't jump to ${index} because the element index ${index} doesn't exist.`);
      return;
    }
    setTimeout(() => element.scrollIntoView({
      behavior: "smooth",
      block: "nearest",
      inline: "center"
    }), transition2);
    items2.active.current.value = index;
  }, "useScroll_to_WrZidvDKeoY", [
    items,
    ref,
    transition
  ]);
  const previous = /* @__PURE__ */ qwik.inlinedQrl(() => {
    const [items2, loop2, ref2, to2] = qwik.useLexicalScope();
    if (!loop2 && items2.active.isFirst.value)
      return;
    const index = items2.active.isFirst.value ? utils.getCount(ref2) - 1 : items2.active.current.value - 1;
    to2(index);
  }, "useScroll_previous_rvN0clYB7Bc", [
    items,
    loop,
    ref,
    to
  ]);
  const next = /* @__PURE__ */ qwik.inlinedQrl(() => {
    const [items2, loop2, ref2, to2] = qwik.useLexicalScope();
    const max = utils.getCount(ref2) - 1;
    if (!loop2 && items2.active.current.value === max)
      return;
    const index = items2.active.current.value === max ? 0 : items2.active.current.value + 1;
    to2(index);
  }, "useScroll_next_CXf0hNVuUhM", [
    items,
    loop,
    ref,
    to
  ]);
  qwik.useVisibleTaskQrl(/* @__PURE__ */ qwik.inlinedQrl(() => {
    const [items2, to2] = qwik.useLexicalScope();
    to2(items2.active.current.value);
  }, "useScroll_useVisibleTask_vbzitETuPSM", [
    items,
    to
  ]));
  return {
    to,
    previous,
    next
  };
};
exports.useScroll = useScroll;
