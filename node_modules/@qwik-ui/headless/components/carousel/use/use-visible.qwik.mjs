import { useSignal, useVisibleTaskQrl, inlinedQrl, useLexicalScope } from "@builder.io/qwik";
import { getElements, getContainer } from "./utils.qwik.mjs";
const useVisible = (ref) => {
  const first = useSignal(0);
  const last = useSignal(0);
  const trackVisible = /* @__PURE__ */ inlinedQrl(async (map) => {
    const items = Array.from(map);
    let start = 0;
    let end = 0;
    items.forEach(([, visible], i) => {
      if (i === 0 && visible)
        start = 0;
      const next = items.at(i + 1)?.[1];
      if (!visible && next)
        start = i + 1;
      if (visible && !next)
        end = i;
    });
    return {
      start,
      end
    };
  }, "useVisible_trackVisible_ASQcAhU0NT4");
  useVisibleTaskQrl(/* @__PURE__ */ inlinedQrl(async function trackActiveItems() {
    const [first2, last2, ref2, trackVisible2] = useLexicalScope();
    const map = /* @__PURE__ */ new Map();
    getElements(ref2).forEach((element) => map.set(element, void 0));
    const observer = new IntersectionObserver((nodes) => {
      nodes.forEach(async (item) => {
        map.set(item.target, item.isIntersecting);
        const { start, end } = await trackVisible2(map);
        first2.value = start;
        last2.value = end;
      });
    }, {
      root: getContainer(ref2)
    });
    getElements(ref2).forEach((item) => observer.observe(item));
  }, "useVisible_useVisibleTask_0nEd0KoWmT8", [
    first,
    last,
    ref,
    trackVisible
  ]));
  return {
    first,
    last
  };
};
export {
  useVisible
};
