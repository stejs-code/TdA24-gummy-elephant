import { useSignal, useComputedQrl, inlinedQrl, useLexicalScope, useVisibleTaskQrl, useOnWindow } from "@builder.io/qwik";
import { getCount, getElement } from "./utils.qwik.mjs";
const usePages = (ref, params) => {
  const transition = params.transition || 350;
  const loop = params.loop ?? true;
  const ranges = useSignal([]);
  const total = useComputedQrl(/* @__PURE__ */ inlinedQrl(() => {
    const [ranges2] = useLexicalScope();
    return ranges2.value.length;
  }, "usePages_total_useComputed_Tk6xK4k2yQo", [
    ranges
  ]));
  const current = useComputedQrl(/* @__PURE__ */ inlinedQrl(() => {
    const [params2, ranges2] = useLexicalScope();
    return getPageFromActiveItem(params2.items.active.current.value, ranges2.value);
  }, "usePages_current_useComputed_x0idL0BpEos", [
    params,
    ranges
  ]));
  const active = params.items.active;
  const computePages = /* @__PURE__ */ inlinedQrl(() => {
    const [ranges2, ref2] = useLexicalScope();
    let acc = 0;
    const element = ref2.value?.querySelector('[attr-data-qui="carousel"]');
    const widthMax = ref2.value?.getClientRects()[0].width || 1;
    const output = [
      []
    ];
    Array.from(element?.children || []).forEach((child, i) => {
      const width = child.getClientRects()[0].width;
      const next2 = element?.children[i + 1]?.getClientRects()[0].x;
      const gap = !next2 ? 0 : width + child.getClientRects()[0].x - next2;
      acc += width + Math.abs(gap);
      if (!output[Math.ceil(acc / widthMax) - 1])
        output.push([]);
      output[Math.ceil(acc / widthMax) - 1].push(i);
    });
    ranges2.value = output;
  }, "usePages_computePages_l5SxS96OnmE", [
    ranges,
    ref
  ]);
  const scrollAt = /* @__PURE__ */ inlinedQrl((index) => {
    const [active2, ref2, transition2] = useLexicalScope();
    const count = getCount(ref2);
    const element = getElement(ref2, index);
    if (!ref2?.value || !count) {
      console.warn(`Can't jump to ${index} because the carousel elements is empty.`);
      return;
    }
    if (!element) {
      console.warn(`Can't jump to ${index} because the element index ${index} doesn't exist.`);
      return;
    }
    setTimeout(() => element.scrollIntoView({
      behavior: "smooth",
      block: "nearest",
      inline: "center"
    }), transition2);
    active2.current.value = index;
  }, "usePages_scrollAt_0UAHSrJNsa0", [
    active,
    ref,
    transition
  ]);
  const previous = /* @__PURE__ */ inlinedQrl(() => {
    const [current2, loop2, params2, ranges2, scrollAt2] = useLexicalScope();
    if (!loop2 && params2.items.active.current.value === 0)
      return;
    if (params2.items.active.current.value === 0) {
      scrollAt2(ranges2.value.at(current2.value - 1)?.[0] || 0);
      return;
    }
    if (current2.value === 0) {
      scrollAt2(0);
      return;
    }
    scrollAt2(ranges2.value.at(current2.value - 1)?.[0] || 0);
  }, "usePages_previous_c8kpC9y5s5o", [
    current,
    loop,
    params,
    ranges,
    scrollAt
  ]);
  const next = /* @__PURE__ */ inlinedQrl(() => {
    const [current2, loop2, ranges2, scrollAt2, total2] = useLexicalScope();
    if (!loop2 && current2.value + 1 === total2.value)
      return;
    scrollAt2(ranges2.value.at(current2.value + 1)?.[0] || 0);
  }, "usePages_next_04wvMUX0XqE", [
    current,
    loop,
    ranges,
    scrollAt,
    total
  ]);
  useVisibleTaskQrl(/* @__PURE__ */ inlinedQrl(() => {
    const [computePages2] = useLexicalScope();
    return computePages2();
  }, "usePages_useVisibleTask_1yNtW2XyCAI", [
    computePages
  ]));
  useOnWindow("resize", computePages);
  return {
    total,
    ranges,
    current,
    next,
    previous,
    scrollAt
  };
};
const getPageFromActiveItem = (index, ranges) => {
  if (index === 0)
    return 0;
  return ranges.findIndex((range) => range.find((value) => value === index));
};
export {
  getPageFromActiveItem,
  usePages
};
