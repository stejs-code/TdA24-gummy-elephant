import { componentQrl, inlinedQrl, _restProps, useContext, useSignal, useVisibleTaskQrl, useLexicalScope, _jsxS, _jsxC, Slot, _fnSignal } from "@builder.io/qwik";
import SelectContextId from "./select-context-id.qwik.mjs";
import { KeyCode } from "../../utils/key-code.type.qwik.mjs";
const selectOptionPreventedKeys = [
  KeyCode.ArrowDown,
  KeyCode.ArrowUp
];
const SelectOption = /* @__PURE__ */ componentQrl(/* @__PURE__ */ inlinedQrl((props) => {
  const props1 = _restProps(props, [
    "disabled",
    "optionValue"
  ]);
  const selectContext = useContext(SelectContextId);
  const optionRef = useSignal();
  useVisibleTaskQrl(/* @__PURE__ */ inlinedQrl(function setKeyHandler({ cleanup }) {
    const [optionRef2, props2, selectContext2] = useLexicalScope();
    function keyHandler(e) {
      const target = e.target;
      if (selectOptionPreventedKeys.includes(e.key))
        e.preventDefault();
      if (!props2.disabled && e.key === "Tab" && target.dataset.optionValue === props2.optionValue) {
        selectContext2.selectedOptionSig.value = props2.optionValue;
        selectContext2.isOpenSig.value = false;
      }
      if (!props2.disabled && (e.key === "Enter" || e.key === " ") && target.dataset.optionValue === props2.optionValue) {
        selectContext2.selectedOptionSig.value = props2.optionValue;
        selectContext2.isOpenSig.value = false;
      }
    }
    optionRef2.value?.addEventListener("keydown", keyHandler);
    cleanup(() => {
      optionRef2.value?.removeEventListener("keydown", keyHandler);
    });
  }, "SelectOption_component_useVisibleTask_C0A5tMhisJE", [
    optionRef,
    props,
    selectContext
  ]));
  return /* @__PURE__ */ _jsxS("li", {
    ref: optionRef,
    ...props1,
    children: /* @__PURE__ */ _jsxC(Slot, null, 3, "jc_0"),
    onClick$: /* @__PURE__ */ inlinedQrl(() => {
      const [props2, selectContext2] = useLexicalScope();
      if (!props2.disabled) {
        selectContext2.selectedOptionSig.value = props2.optionValue;
        selectContext2.isOpenSig.value = false;
      }
    }, "SelectOption_component_li_onClick_zdGdPG2nGAc", [
      props,
      selectContext
    ]),
    onMouseEnter$: /* @__PURE__ */ inlinedQrl((e) => {
      const [props2] = useLexicalScope();
      if (!props2.disabled) {
        const target = e.target;
        target.focus();
      }
    }, "SelectOption_component_li_onMouseEnter_S77g6fL7cdU", [
      props
    ])
  }, {
    "aria-disabled": _fnSignal((p0) => p0.disabled, [
      props
    ], "p0.disabled"),
    "aria-selected": _fnSignal((p0, p1) => p0.optionValue === p1.selectedOptionSig.value, [
      props,
      selectContext
    ], "p0.optionValue===p1.selectedOptionSig.value"),
    "data-option-value": _fnSignal((p0) => p0.optionValue, [
      props
    ], "p0.optionValue"),
    role: "option",
    tabIndex: _fnSignal((p0) => p0.disabled ? -1 : 0, [
      props
    ], "p0.disabled?-1:0")
  }, 0, "jc_1");
}, "SelectOption_component_CfpmGeuNdpE"));
export {
  SelectOption,
  selectOptionPreventedKeys
};
