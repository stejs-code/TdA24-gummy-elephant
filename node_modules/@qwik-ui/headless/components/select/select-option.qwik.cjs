"use strict";
Object.defineProperty(exports, Symbol.toStringTag, { value: "Module" });
const qwik = require("@builder.io/qwik");
const selectContextId = require("./select-context-id.qwik.cjs");
const keyCode_type = require("../../utils/key-code.type.qwik.cjs");
const selectOptionPreventedKeys = [
  keyCode_type.KeyCode.ArrowDown,
  keyCode_type.KeyCode.ArrowUp
];
const SelectOption = /* @__PURE__ */ qwik.componentQrl(/* @__PURE__ */ qwik.inlinedQrl((props) => {
  const props1 = qwik._restProps(props, [
    "disabled",
    "optionValue"
  ]);
  const selectContext = qwik.useContext(selectContextId);
  const optionRef = qwik.useSignal();
  qwik.useVisibleTaskQrl(/* @__PURE__ */ qwik.inlinedQrl(function setKeyHandler({ cleanup }) {
    const [optionRef2, props2, selectContext2] = qwik.useLexicalScope();
    function keyHandler(e) {
      const target = e.target;
      if (selectOptionPreventedKeys.includes(e.key))
        e.preventDefault();
      if (!props2.disabled && e.key === "Tab" && target.dataset.optionValue === props2.optionValue) {
        selectContext2.selectedOptionSig.value = props2.optionValue;
        selectContext2.isOpenSig.value = false;
      }
      if (!props2.disabled && (e.key === "Enter" || e.key === " ") && target.dataset.optionValue === props2.optionValue) {
        selectContext2.selectedOptionSig.value = props2.optionValue;
        selectContext2.isOpenSig.value = false;
      }
    }
    optionRef2.value?.addEventListener("keydown", keyHandler);
    cleanup(() => {
      optionRef2.value?.removeEventListener("keydown", keyHandler);
    });
  }, "SelectOption_component_useVisibleTask_C0A5tMhisJE", [
    optionRef,
    props,
    selectContext
  ]));
  return /* @__PURE__ */ qwik._jsxS("li", {
    ref: optionRef,
    ...props1,
    children: /* @__PURE__ */ qwik._jsxC(qwik.Slot, null, 3, "jc_0"),
    onClick$: /* @__PURE__ */ qwik.inlinedQrl(() => {
      const [props2, selectContext2] = qwik.useLexicalScope();
      if (!props2.disabled) {
        selectContext2.selectedOptionSig.value = props2.optionValue;
        selectContext2.isOpenSig.value = false;
      }
    }, "SelectOption_component_li_onClick_zdGdPG2nGAc", [
      props,
      selectContext
    ]),
    onMouseEnter$: /* @__PURE__ */ qwik.inlinedQrl((e) => {
      const [props2] = qwik.useLexicalScope();
      if (!props2.disabled) {
        const target = e.target;
        target.focus();
      }
    }, "SelectOption_component_li_onMouseEnter_S77g6fL7cdU", [
      props
    ])
  }, {
    "aria-disabled": qwik._fnSignal((p0) => p0.disabled, [
      props
    ], "p0.disabled"),
    "aria-selected": qwik._fnSignal((p0, p1) => p0.optionValue === p1.selectedOptionSig.value, [
      props,
      selectContext
    ], "p0.optionValue===p1.selectedOptionSig.value"),
    "data-option-value": qwik._fnSignal((p0) => p0.optionValue, [
      props
    ], "p0.optionValue"),
    role: "option",
    tabIndex: qwik._fnSignal((p0) => p0.disabled ? -1 : 0, [
      props
    ], "p0.disabled?-1:0")
  }, 0, "jc_1");
}, "SelectOption_component_CfpmGeuNdpE"));
exports.SelectOption = SelectOption;
exports.selectOptionPreventedKeys = selectOptionPreventedKeys;
