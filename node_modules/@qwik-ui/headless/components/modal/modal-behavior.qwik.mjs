import { createFocusTrap } from "focus-trap";
import { clearAllBodyScrollLocks } from "body-scroll-lock";
function trapFocus(modal) {
  return createFocusTrap(modal, {
    escapeDeactivates: false
  });
}
function activateFocusTrap(focusTrap) {
  try {
    focusTrap?.activate();
  } catch {
  }
}
function deactivateFocusTrap(focusTrap) {
  focusTrap?.deactivate();
  focusTrap = null;
}
async function showModal(modal) {
  modal.showModal();
  supportShowAnimation(modal);
}
async function closeModal(modal) {
  supportClosingAnimation(modal, () => modal.close());
}
function wasModalBackdropClicked(modal, clickEvent) {
  if (!modal)
    return false;
  const rect = modal.getBoundingClientRect();
  const wasBackdropClicked = rect.left > clickEvent.clientX || rect.right < clickEvent.clientX || rect.top > clickEvent.clientY || rect.bottom < clickEvent.clientY;
  return wasBackdropClicked;
}
function overrideNativeDialogEscapeBehaviorWith(continuation) {
  return function handleKeydown(e) {
    if (e.key === "Escape") {
      e.preventDefault();
      continuation();
    }
  };
}
function supportShowAnimation(modal) {
  modal.classList.add("modal-showing");
}
function supportClosingAnimation(modal, afterAnimate) {
  modal.classList.remove("modal-showing");
  modal.classList.add("modal-closing");
  const { animationDuration, transitionDuration } = getComputedStyle(modal);
  const runAnimationEnd = () => {
    modal.classList.remove("modal-closing");
    clearAllBodyScrollLocks();
    afterAnimate();
  };
  const runTransitionEnd = () => {
    modal.classList.remove("modal-closing");
    clearAllBodyScrollLocks();
    afterAnimate();
  };
  if (animationDuration !== "0s")
    modal.addEventListener("animationend", runAnimationEnd, {
      once: true
    });
  else if (transitionDuration !== "0s")
    modal.addEventListener("transitionend", runTransitionEnd, {
      once: true
    });
  else {
    modal.classList.remove("modal-closing");
    clearAllBodyScrollLocks();
    afterAnimate();
  }
}
export {
  activateFocusTrap,
  closeModal,
  deactivateFocusTrap,
  overrideNativeDialogEscapeBehaviorWith,
  showModal,
  supportClosingAnimation,
  supportShowAnimation,
  trapFocus,
  wasModalBackdropClicked
};
