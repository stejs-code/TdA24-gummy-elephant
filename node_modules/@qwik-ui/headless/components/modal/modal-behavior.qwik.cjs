"use strict";
Object.defineProperty(exports, Symbol.toStringTag, { value: "Module" });
const focusTrap = require("focus-trap");
const bodyScrollLock = require("body-scroll-lock");
function trapFocus(modal) {
  return focusTrap.createFocusTrap(modal, {
    escapeDeactivates: false
  });
}
function activateFocusTrap(focusTrap2) {
  try {
    focusTrap2?.activate();
  } catch {
  }
}
function deactivateFocusTrap(focusTrap2) {
  focusTrap2?.deactivate();
  focusTrap2 = null;
}
async function showModal(modal) {
  modal.showModal();
  supportShowAnimation(modal);
}
async function closeModal(modal) {
  supportClosingAnimation(modal, () => modal.close());
}
function wasModalBackdropClicked(modal, clickEvent) {
  if (!modal)
    return false;
  const rect = modal.getBoundingClientRect();
  const wasBackdropClicked = rect.left > clickEvent.clientX || rect.right < clickEvent.clientX || rect.top > clickEvent.clientY || rect.bottom < clickEvent.clientY;
  return wasBackdropClicked;
}
function overrideNativeDialogEscapeBehaviorWith(continuation) {
  return function handleKeydown(e) {
    if (e.key === "Escape") {
      e.preventDefault();
      continuation();
    }
  };
}
function supportShowAnimation(modal) {
  modal.classList.add("modal-showing");
}
function supportClosingAnimation(modal, afterAnimate) {
  modal.classList.remove("modal-showing");
  modal.classList.add("modal-closing");
  const { animationDuration, transitionDuration } = getComputedStyle(modal);
  const runAnimationEnd = () => {
    modal.classList.remove("modal-closing");
    bodyScrollLock.clearAllBodyScrollLocks();
    afterAnimate();
  };
  const runTransitionEnd = () => {
    modal.classList.remove("modal-closing");
    bodyScrollLock.clearAllBodyScrollLocks();
    afterAnimate();
  };
  if (animationDuration !== "0s")
    modal.addEventListener("animationend", runAnimationEnd, {
      once: true
    });
  else if (transitionDuration !== "0s")
    modal.addEventListener("transitionend", runTransitionEnd, {
      once: true
    });
  else {
    modal.classList.remove("modal-closing");
    bodyScrollLock.clearAllBodyScrollLocks();
    afterAnimate();
  }
}
exports.activateFocusTrap = activateFocusTrap;
exports.closeModal = closeModal;
exports.deactivateFocusTrap = deactivateFocusTrap;
exports.overrideNativeDialogEscapeBehaviorWith = overrideNativeDialogEscapeBehaviorWith;
exports.showModal = showModal;
exports.supportClosingAnimation = supportClosingAnimation;
exports.supportShowAnimation = supportShowAnimation;
exports.trapFocus = trapFocus;
exports.wasModalBackdropClicked = wasModalBackdropClicked;
