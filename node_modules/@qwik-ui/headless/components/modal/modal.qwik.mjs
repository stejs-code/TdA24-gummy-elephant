import { componentQrl, inlinedQrl, useStylesQrl, useSignal, useTaskQrl, useLexicalScope, _jsxS, _jsxC, Slot, _fnSignal } from "@builder.io/qwik";
import { trapFocus, overrideNativeDialogEscapeBehaviorWith, showModal, activateFocusTrap, closeModal, deactivateFocusTrap, wasModalBackdropClicked } from "./modal-behavior.qwik.mjs";
import { disableBodyScroll } from "body-scroll-lock";
import styles from "./modal.css.qwik.mjs";
const Modal = /* @__PURE__ */ componentQrl(/* @__PURE__ */ inlinedQrl((props) => {
  useStylesQrl(/* @__PURE__ */ inlinedQrl(styles, "Modal_component_useStyles_6kc6yEJKobw"));
  const modalRefSig = useSignal();
  const { "bind:show": showSig } = props;
  useTaskQrl(/* @__PURE__ */ inlinedQrl(async function toggleModal({ track, cleanup }) {
    const [modalRefSig2, props2, showSig2] = useLexicalScope();
    const isOpen = track(() => showSig2.value);
    const modal = modalRefSig2.value;
    if (!modal)
      return;
    const focusTrap = trapFocus(modal);
    window.addEventListener("keydown", overrideNativeDialogEscapeBehaviorWith(() => showSig2.value = false), {
      once: true
    });
    if (isOpen) {
      showModal(modal);
      disableBodyScroll(modal, {
        reserveScrollBarGap: true
      });
      props2.onShow$?.();
      activateFocusTrap(focusTrap);
    } else {
      closeModal(modal);
      props2.onClose$?.();
    }
    cleanup(() => {
      deactivateFocusTrap(focusTrap);
    });
  }, "Modal_component_useTask_boBpVEMpnGQ", [
    modalRefSig,
    props,
    showSig
  ]));
  const closeOnBackdropClick$ = /* @__PURE__ */ inlinedQrl((event) => {
    const [modalRefSig2, props2, showSig2] = useLexicalScope();
    if (props2.alert === true || props2.closeOnBackdropClick === false)
      return;
    if (wasModalBackdropClicked(modalRefSig2.value, event))
      showSig2.value = false;
  }, "Modal_component_closeOnBackdropClick_qbpjydAbzcE", [
    modalRefSig,
    props,
    showSig
  ]);
  return /* @__PURE__ */ _jsxS("dialog", {
    ...props,
    children: /* @__PURE__ */ _jsxC(Slot, null, 3, "9p_0"),
    onClick$: /* @__PURE__ */ inlinedQrl((event) => {
      const [closeOnBackdropClick$2] = useLexicalScope();
      return closeOnBackdropClick$2(event);
    }, "Modal_component_dialog_onClick_rnAxN4ftyEs", [
      closeOnBackdropClick$
    ]),
    ref: modalRefSig
  }, {
    role: _fnSignal((p0) => p0.alert === true ? "alertdialog" : "dialog", [
      props
    ], 'p0.alert===true?"alertdialog":"dialog"')
  }, 0, "9p_1");
}, "Modal_component_VXOY7yQNLIw"));
export {
  Modal
};
