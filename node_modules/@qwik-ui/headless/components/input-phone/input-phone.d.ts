import { type QRL, QwikIntrinsicElements } from '@builder.io/qwik';
import type { CountryCode } from 'libphonenumber-js';
import { type CountryListItemType } from 'country-list-json';
export type InputPhoneProps = QwikIntrinsicElements['input'] & {
    value?: string;
    countryCode?: CountryCode | 'auto';
    wrapperProps?: QwikIntrinsicElements['div'];
    onCountryChange$?: QRL<(country?: InputPhoneCountry) => void>;
    onNumberChange$?: QRL<(phone: string) => void>;
    onValidChange$?: QRL<(validity: InputPhoneValidity) => void>;
};
export type InputPhoneValidity = 'INVALID_COUNTRY' | 'NOT_A_NUMBER' | 'TOO_SHORT' | 'TOO_LONG' | 'INVALID_LENGTH' | 'MAYBE_VALID' | 'NOT_VALID' | 'VALID';
type CountryItem = Omit<CountryListItemType, 'code'> & {
    code: CountryCode;
};
export type InputPhoneCountry = {
    name: string;
    'alpha-2': CountryCode;
    countryCode: string;
    flag: string;
};
/**
 * Returns the country of type CountryItem, or undefined.
 * Looks into the list of countries against the key or a function.
 * @param value string | CountryCode | ((country: CountryItem) => boolean) | undefined,
 * @param key keyof CountryItem
 * @returns CountryItem | undefined
 */
export declare const find: (value: string | ((country: CountryItem) => boolean) | undefined, key?: keyof CountryItem) => CountryItem | undefined;
export declare const findBySelectValue: (value: string) => CountryItem | undefined;
/**
 * Retrieve the dial country code in CountryItem by using the user's timezone
 * @returns CountryItem | undefined
 */
export declare const findCountryByUserTimezone: () => CountryItem | undefined;
export declare const InputPhone: import("@builder.io/qwik").Component<InputPhoneProps>;
export {};
