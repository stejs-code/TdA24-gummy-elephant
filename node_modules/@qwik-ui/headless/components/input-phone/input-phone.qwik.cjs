"use strict";
Object.defineProperty(exports, Symbol.toStringTag, { value: "Module" });
const qwik = require("@builder.io/qwik");
const libphonenumberJs = require("libphonenumber-js");
const countryListJson = require("country-list-json");
const timezoneCityToCountry = require("./timezone-city-to-country.qwik.cjs");
const inputPhone = require("./input-phone.css.qwik.cjs");
const find = (value, key) => {
  if (!value)
    return void 0;
  let fn;
  if (typeof value === "function")
    fn = value;
  else if (key)
    fn = (country) => country[key] === value;
  else {
    console.warn(`Ethier value is a function or key is not empty`);
    return;
  }
  return !value ? void 0 : countryListJson.countries.find(fn);
};
const findBySelectValue = (value) => {
  return find(({ name, dial_code }) => value === `${name} (${dial_code})`);
};
const findCountryByUserTimezone = () => {
  if (!Intl) {
    console.warn("We cannot automatically retrieve the country of the user because Intl is not supported.");
    return;
  }
  const userTimeZone = Intl.DateTimeFormat().resolvedOptions().timeZone;
  const city = userTimeZone.split("/").at(-1);
  const country = timezoneCityToCountry.timezoneCityToCountry[city];
  return countryListJson.countries.find(({ name }) => name === city || name === country);
};
const InputPhone = /* @__PURE__ */ qwik.componentQrl(/* @__PURE__ */ qwik.inlinedQrl((props) => {
  const props1 = qwik._restProps(props, [
    "countryCode",
    "placeholder",
    "value",
    "wrapperProps",
    "onCountryChange$",
    "onNumberChange$",
    "onValidChange$"
  ]);
  qwik.useStylesScopedQrl(/* @__PURE__ */ qwik.inlinedQrl(inputPhone, "InputPhone_component_useStylesScoped_PrjnwMdfAfM"));
  const defaultCountry = props.countryCode === "auto" ? findCountryByUserTimezone() : find(props.countryCode, "code");
  const inputRefSignal = qwik.useSignal();
  const selectRefSignal = qwik.useSignal();
  const numberSignal = qwik.useSignal(props.value ?? "");
  const countrySignal = qwik.useSignal(defaultCountry);
  const outputSignal = qwik.useSignal(props.value ?? "");
  const handleCountryChange = /* @__PURE__ */ qwik.inlinedQrl((country) => {
    const [props2] = qwik.useLexicalScope();
    if (!country)
      props2.onCountryChange$ && props2.onCountryChange$(void 0);
    else {
      const outputCountry = {
        "alpha-2": country.code,
        countryCode: country.dial_code.replace("+", ""),
        flag: country.flag,
        name: country.name
      };
      props2.onCountryChange$ && props2.onCountryChange$(outputCountry);
    }
  }, "InputPhone_component_handleCountryChange_TVKRbcVCe5M", [
    props
  ]);
  const handleNumberChange = /* @__PURE__ */ qwik.inlinedQrl((number) => {
    const [props2] = qwik.useLexicalScope();
    props2.onNumberChange$ && props2.onNumberChange$(number);
  }, "InputPhone_component_handleNumberChange_ijC4bjIv7T4", [
    props
  ]);
  const handleValidChange = /* @__PURE__ */ qwik.inlinedQrl((phone) => {
    const [props2] = qwik.useLexicalScope();
    if (!props2.onValidChange$)
      return;
    if (libphonenumberJs.isValidPhoneNumber(phone))
      return props2.onValidChange$("VALID");
    if (libphonenumberJs.isPossiblePhoneNumber(phone))
      return props2.onValidChange$("MAYBE_VALID");
    return props2.onValidChange$("NOT_VALID");
  }, "InputPhone_component_handleValidChange_KehFdHiEurU", [
    props
  ]);
  qwik.useVisibleTaskQrl(/* @__PURE__ */ qwik.inlinedQrl(() => {
    const [countrySignal2, handleCountryChange2, handleNumberChange2, handleValidChange2, outputSignal2] = qwik.useLexicalScope();
    handleCountryChange2(countrySignal2.value);
    handleNumberChange2(outputSignal2.value);
    handleValidChange2(outputSignal2.value);
  }, "InputPhone_component_useVisibleTask_RsO1KGeWb6w", [
    countrySignal,
    handleCountryChange,
    handleNumberChange,
    handleValidChange,
    outputSignal
  ]));
  qwik.useTaskQrl(/* @__PURE__ */ qwik.inlinedQrl(({ track }) => {
    const [countrySignal2, handleCountryChange2, handleNumberChange2, handleValidChange2, numberSignal2, outputSignal2, props2] = qwik.useLexicalScope();
    const phone = track(() => numberSignal2.value);
    if (!phone)
      return;
    try {
      const phoneNumber = libphonenumberJs.parsePhoneNumberWithError(phone, countrySignal2.value?.code);
      if (!phoneNumber)
        return;
      if (phoneNumber.country)
        countrySignal2.value = find(phoneNumber.country, "code");
      outputSignal2.value = phone;
      handleValidChange2(outputSignal2.value);
    } catch (error) {
      if (error instanceof libphonenumberJs.ParseError)
        props2.onValidChange$ && props2.onValidChange$(error.message);
      else
        throw error;
    } finally {
      handleCountryChange2(countrySignal2.value);
      handleNumberChange2(outputSignal2.value);
    }
  }, "InputPhone_component_useTask_VNN73XGb8GM", [
    countrySignal,
    handleCountryChange,
    handleNumberChange,
    handleValidChange,
    numberSignal,
    outputSignal,
    props
  ]));
  qwik.useTaskQrl(/* @__PURE__ */ qwik.inlinedQrl(({ track }) => {
    const [countrySignal2, handleCountryChange2, handleNumberChange2, handleValidChange2, numberSignal2, outputSignal2, props2] = qwik.useLexicalScope();
    const code = track(() => countrySignal2.value?.code);
    if (!code)
      return;
    try {
      const phoneNumber = libphonenumberJs.parsePhoneNumber(numberSignal2.value, code);
      if (!phoneNumber)
        return;
      if (numberSignal2.value.at(0) === "+") {
        const country = find(code, "code");
        const { nationalNumber } = phoneNumber;
        if (!country)
          return;
        outputSignal2.value = new libphonenumberJs.AsYouType().input(`${country.dial_code}${nationalNumber}`);
      } else
        outputSignal2.value = new libphonenumberJs.AsYouType(code).input(numberSignal2.value);
      handleValidChange2(outputSignal2.value);
    } catch (error) {
      if (numberSignal2.value.at(0) === "+") {
        const country = find(code, "code");
        country && (outputSignal2.value = country.dial_code);
      }
      if (error instanceof libphonenumberJs.ParseError)
        props2.onValidChange$ && props2.onValidChange$(error.message);
      else
        throw error;
    } finally {
      handleCountryChange2(countrySignal2.value);
      handleNumberChange2(outputSignal2.value);
    }
  }, "InputPhone_component_useTask_1_1B1HJ7meQ7s", [
    countrySignal,
    handleCountryChange,
    handleNumberChange,
    handleValidChange,
    numberSignal,
    outputSignal,
    props
  ]));
  return /* @__PURE__ */ qwik._jsxS("div", {
    ...props.wrapperProps,
    children: [
      /* @__PURE__ */ qwik._jsxQ("button", null, {
        "aria-label": qwik._fnSignal((p0) => p0.value?.flag ? `Country of ${p0.value.name}, dial code ${p0.value.dial_code}` : `Select the country of your phone number`, [
          countrySignal
        ], "p0.value?.flag?`Country of ${p0.value.name}, dial code ${p0.value.dial_code}`:`Select the country of your phone number`"),
        tabIndex: -1
      }, qwik._fnSignal((p0) => p0.value?.flag ? p0.value?.flag : `🌐`, [
        countrySignal
      ], "p0.value?.flag?p0.value?.flag:`🌐`"), 3, null),
      /* @__PURE__ */ qwik._jsxQ("select", {
        ref: selectRefSignal
      }, {
        "aria-label": "Select the country of your phone number",
        onChange$: /* @__PURE__ */ qwik.inlinedQrl((_, { value }) => {
          const [countrySignal2, inputRefSignal2, selectRefSignal2] = qwik.useLexicalScope();
          countrySignal2.value = findBySelectValue(value);
          selectRefSignal2.value?.blur();
          inputRefSignal2.value?.focus();
        }, "InputPhone_component_div_select_onChange_9gD3AiobtTQ", [
          countrySignal,
          inputRefSignal,
          selectRefSignal
        ]),
        title: qwik._fnSignal((p0) => p0.value?.name, [
          countrySignal
        ], "p0.value?.name")
      }, [
        /* @__PURE__ */ qwik._jsxQ("option", null, null, "Select the country's phone code", 3, null),
        countryListJson.countries.map(({ code, dial_code, name }) => /* @__PURE__ */ qwik._jsxQ("option", {
          selected: countrySignal.value?.code === code
        }, null, `${name} (${dial_code})`, 1, code))
      ], 1, null),
      /* @__PURE__ */ qwik._jsxS("input", {
        ...props1,
        onInput$: [
          /* @__PURE__ */ qwik.inlinedQrl((_, { value }) => {
            const [countrySignal2, numberSignal2] = qwik.useLexicalScope();
            numberSignal2.value = new libphonenumberJs.AsYouType(countrySignal2.value?.code).input(value);
          }, "InputPhone_component_div_input_onInput_hvnM3Jyt0X0", [
            countrySignal,
            numberSignal
          ]),
          props1.onInput$
        ],
        ref: inputRefSignal
      }, {
        placeholder: qwik._fnSignal((p0) => p0.placeholder ?? "Phone number", [
          props
        ], 'p0.placeholder??"Phone number"'),
        type: "text",
        value: qwik._fnSignal((p0) => p0.value, [
          outputSignal
        ], "p0.value")
      }, 0, null)
    ]
  }, null, 0, "3e_0");
}, "InputPhone_component_qOllc0MTLPw"));
exports.InputPhone = InputPhone;
exports.find = find;
exports.findBySelectValue = findBySelectValue;
exports.findCountryByUserTimezone = findCountryByUserTimezone;
