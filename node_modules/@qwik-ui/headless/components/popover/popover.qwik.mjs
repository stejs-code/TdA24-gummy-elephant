import { componentQrl, inlinedQrl, _restProps, useSignal, useStylesScopedQrl, useStore, useContextProvider, useTaskQrl, useLexicalScope, useVisibleTaskQrl, _jsxS, _jsxC, Slot } from "@builder.io/qwik";
import { isBrowser } from "@builder.io/qwik/build";
import { autoUpdate, computePosition, flip, shift, offset } from "@floating-ui/dom";
import { PopoverContext } from "./popover-context.qwik.mjs";
const Popover = /* @__PURE__ */ componentQrl(/* @__PURE__ */ inlinedQrl((props) => {
  const restOfProps = _restProps(props, [
    "triggerEvent",
    "onUpdate$",
    "disableClickOutSide",
    "offset",
    "placement",
    "isOpen"
  ]);
  const wrapperRef = useSignal();
  const triggerRef = useSignal();
  const contentRef = useSignal();
  const setOverlayRef$ = /* @__PURE__ */ inlinedQrl((ref) => {
    const [contentRef2] = useLexicalScope();
    if (ref)
      contentRef2.value = ref.value;
  }, "Popover_component_setOverlayRef_0udWfF7cTAI", [
    contentRef
  ]);
  const setTriggerRef$ = /* @__PURE__ */ inlinedQrl((ref) => {
    const [triggerRef2] = useLexicalScope();
    if (ref)
      triggerRef2.value = ref.value;
  }, "Popover_component_setTriggerRef_GUXkt8iP7ik", [
    triggerRef
  ]);
  useStylesScopedQrl(/* @__PURE__ */ inlinedQrl(`
     [data-type="popover-root"] {
      position: relative;
     }
  `, "Popover_component_useStylesScoped_b2mXQfsnmBE"));
  const contextService = useStore({
    isOpen: false,
    triggerEvent: props.triggerEvent ?? "click",
    setTriggerRef$,
    setOverlayRef$
  });
  useContextProvider(PopoverContext, contextService);
  const closePopover = /* @__PURE__ */ inlinedQrl(async () => {
    const [contentRef2, contextService2, props2] = useLexicalScope();
    contextService2.isOpen = false;
    if (contentRef2) {
      contentRef2.value?.classList.add("close");
      contentRef2.value?.classList.remove("open");
    }
    if (props2.onUpdate$)
      await props2.onUpdate$(contextService2.isOpen);
  }, "Popover_component_closePopover_k1Gil9i90JI", [
    contentRef,
    contextService,
    props
  ]);
  const openPopover = /* @__PURE__ */ inlinedQrl(async () => {
    const [contentRef2, contextService2, props2] = useLexicalScope();
    contextService2.isOpen = true;
    if (contentRef2) {
      contentRef2.value?.classList.add("open");
      contentRef2.value?.classList.remove("close");
    }
    if (props2.onUpdate$)
      await props2.onUpdate$(contextService2.isOpen);
  }, "Popover_component_openPopover_gL5gEsnFqdE", [
    contentRef,
    contextService,
    props
  ]);
  const togglePopover = /* @__PURE__ */ inlinedQrl(async () => {
    const [closePopover2, contextService2, openPopover2, props2] = useLexicalScope();
    if (contextService2.isOpen)
      closePopover2();
    else
      openPopover2();
    if (props2.onUpdate$)
      await props2.onUpdate$(contextService2.isOpen);
  }, "Popover_component_togglePopover_wUcsAC2CDPs", [
    closePopover,
    contextService,
    openPopover,
    props
  ]);
  useTaskQrl(/* @__PURE__ */ inlinedQrl(({ track }) => {
    const [contentRef2, openPopover2, props2, triggerRef2] = useLexicalScope();
    const trigger = track(() => triggerRef2.value);
    const content = track(() => contentRef2.value);
    if (isBrowser && trigger && content) {
      autoUpdate(trigger, content, () => {
        computePosition(trigger, content, {
          middleware: [
            flip(),
            shift(),
            offset(props2.offset || 0)
          ],
          placement: props2.placement
        }).then(({ x, y }) => {
          Object.assign(content.style, {
            left: `${x}px`,
            top: `${y}px`
          });
        });
      });
      if (props2.isOpen)
        openPopover2();
    }
  }, "Popover_component_useTask_kpkTN6NP76Y", [
    contentRef,
    openPopover,
    props,
    triggerRef
  ]));
  useVisibleTaskQrl(/* @__PURE__ */ inlinedQrl(({ track }) => {
    const [contextService2, props2] = useLexicalScope();
    track(() => props2.isOpen);
    contextService2.isOpen = !!props2.isOpen;
  }, "Popover_component_useVisibleTask_hP4F7a954yg", [
    contextService,
    props
  ]));
  useVisibleTaskQrl(/* @__PURE__ */ inlinedQrl(({ track }) => {
    const [closePopover2, contentRef2, contextService2, openPopover2, triggerRef2] = useLexicalScope();
    track(() => contextService2.isOpen);
    if (!triggerRef2.value || !contentRef2.value)
      return;
    if (contextService2.isOpen)
      openPopover2();
    else
      closePopover2();
  }, "Popover_component_useVisibleTask_1_iWRr6q6c5EQ", [
    closePopover,
    contentRef,
    contextService,
    openPopover,
    triggerRef
  ]));
  const clickHandler = /* @__PURE__ */ inlinedQrl((e) => {
    const [closePopover2, contentRef2, props2, togglePopover2, triggerRef2] = useLexicalScope();
    const isContentClicked = contentRef2.value?.contains(e.target);
    if (isContentClicked)
      return;
    const isTriggerClicked = triggerRef2.value?.contains(e.target);
    if (isTriggerClicked && (props2.triggerEvent ?? "click") === "click")
      togglePopover2();
    else {
      if (props2.disableClickOutSide)
        return;
      closePopover2();
    }
  }, "Popover_component_clickHandler_sDATyKm0S3o", [
    closePopover,
    contentRef,
    props,
    togglePopover,
    triggerRef
  ]);
  return /* @__PURE__ */ _jsxS("span", {
    ...restOfProps,
    children: /* @__PURE__ */ _jsxC(Slot, null, 3, "ca_0"),
    "document:onClick$": clickHandler,
    ref: wrapperRef
  }, {
    "data-type": "popover-root"
  }, 0, "ca_1");
}, "Popover_component_GIDbxXNx2UI"));
export {
  Popover
};
