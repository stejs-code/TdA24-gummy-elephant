import { componentQrl, inlinedQrl, useSignal, useContext, useOnWindow, useLexicalScope, _jsxQ, _jsxC, Slot } from "@builder.io/qwik";
import { sliderContext } from "./slider.qwik.mjs";
const clamp = (value, min, max) => {
  return Math.min(max, Math.max(value, min));
};
const SliderThumb = /* @__PURE__ */ componentQrl(/* @__PURE__ */ inlinedQrl((props) => {
  const mouseDownHappenedSignal = useSignal(false);
  const contextService = useContext(sliderContext);
  const handleMouseDown = /* @__PURE__ */ inlinedQrl((e) => {
    const [contextService2, mouseDownHappenedSignal2] = useLexicalScope();
    if (contextService2.positionX.value)
      contextService2.value.value = clamp(e.pageX - contextService2.positionX.value, contextService2.min.value, contextService2.max.value);
    mouseDownHappenedSignal2.value = true;
  }, "SliderThumb_component_handleMouseDown_D8WvLnKHNUw", [
    contextService,
    mouseDownHappenedSignal
  ]);
  useOnWindow("mousemove", /* @__PURE__ */ inlinedQrl((e) => {
    const [contextService2, mouseDownHappenedSignal2] = useLexicalScope();
    if (contextService2.positionX.value && mouseDownHappenedSignal2.value)
      contextService2.value.value = clamp(e.pageX - contextService2.positionX.value, contextService2.min.value, contextService2.max.value);
  }, "SliderThumb_component_useOnWindow_kd2cGCnxV3Y", [
    contextService,
    mouseDownHappenedSignal
  ]));
  useOnWindow("mouseup", /* @__PURE__ */ inlinedQrl((e) => {
    const [contextService2, mouseDownHappenedSignal2] = useLexicalScope();
    if (contextService2.positionX.value && mouseDownHappenedSignal2.value)
      contextService2.value.value = clamp(e.pageX - contextService2.positionX.value, contextService2.min.value, contextService2.max.value);
    mouseDownHappenedSignal2.value = false;
  }, "SliderThumb_component_useOnWindow_1_mV7WaK4570w", [
    contextService,
    mouseDownHappenedSignal
  ]));
  return /* @__PURE__ */ _jsxQ("div", {
    style: `
        width: 20px;
        height: 20px;
        border-radius: 20px;
        background: rgba(0, 0, 250);
        position: absolute;
        transform: translateX(-50%) translateY(-50%);
        top: 50%;
        left: ${contextService.percentage.value}%;
        ${props.style ?? ""}
      `
  }, {
    onMouseDown$: handleMouseDown
  }, /* @__PURE__ */ _jsxC(Slot, null, 3, "fJ_0"), 1, "fJ_1");
}, "SliderThumb_component_MhzlhYr2v00"));
export {
  SliderThumb,
  clamp
};
