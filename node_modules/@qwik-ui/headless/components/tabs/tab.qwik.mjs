import { componentQrl, inlinedQrl, _restProps, useContext, useSignal, useComputedQrl, useLexicalScope, useVisibleTaskQrl, _jsxS, _wrapSignal, _jsxC, Slot, _fnSignal } from "@builder.io/qwik";
import { KeyCode } from "../../utils/key-code.type.qwik.mjs";
import { TAB_PANEL_ID_PREFIX } from "./tab-panel.qwik.mjs";
import { tabsContextId } from "./tabs-context-id.qwik.mjs";
const TAB_ID_PREFIX = "_tab_";
const preventedKeys = [
  KeyCode.Home,
  KeyCode.End,
  KeyCode.PageDown,
  KeyCode.PageUp,
  KeyCode.ArrowDown,
  KeyCode.ArrowUp,
  KeyCode.ArrowLeft,
  KeyCode.ArrowRight
];
const Tab = /* @__PURE__ */ componentQrl(/* @__PURE__ */ inlinedQrl((props) => {
  const props1 = _restProps(props, [
    "selectedClassName",
    "_extraClass",
    "tabId"
  ]);
  const contextService = useContext(tabsContextId);
  const elementRefSig = useSignal();
  const fullTabElementId = contextService.tabsPrefix + TAB_ID_PREFIX + props.tabId;
  const fullPanelElementId = contextService.tabsPrefix + TAB_PANEL_ID_PREFIX + props.tabId;
  const selectedClassNameSig = useComputedQrl(/* @__PURE__ */ inlinedQrl(() => {
    const [contextService2, props2] = useLexicalScope();
    return props2.selectedClassName || contextService2.selectedClassName;
  }, "Tab_component_selectedClassNameSig_useComputed_Luo0iPtRX04", [
    contextService,
    props
  ]));
  const isSelectedSig = useComputedQrl(/* @__PURE__ */ inlinedQrl(() => {
    const [contextService2, props2] = useLexicalScope();
    return contextService2.selectedTabIdSig.value === props2.tabId;
  }, "Tab_component_isSelectedSig_useComputed_BLQOrekQcqE", [
    contextService,
    props
  ]));
  useVisibleTaskQrl(/* @__PURE__ */ inlinedQrl(function preventDefaultOnKeysVisibleTask({ cleanup }) {
    const [contextService2, elementRefSig2, props2] = useLexicalScope();
    function handler(event) {
      if (preventedKeys.includes(event.key))
        event.preventDefault();
      contextService2.onTabKeyDown$(event.key, props2.tabId);
    }
    elementRefSig2.value?.addEventListener("keydown", handler);
    cleanup(() => {
      elementRefSig2.value?.removeEventListener("keydown", handler);
    });
  }, "Tab_component_useVisibleTask_lBSiSWVU7wU", [
    contextService,
    elementRefSig,
    props
  ]));
  const selectIfAutomatic$ = /* @__PURE__ */ inlinedQrl(() => {
    const [contextService2, props2] = useLexicalScope();
    contextService2.selectIfAutomatic$(props2.tabId);
  }, "Tab_component_selectIfAutomatic_lwThVCy025Y", [
    contextService,
    props
  ]);
  const classNamesSig = useComputedQrl(/* @__PURE__ */ inlinedQrl(() => {
    const [isSelectedSig2, props2, selectedClassNameSig2] = useLexicalScope();
    return [
      props2._extraClass?.value ?? props2._extraClass,
      // TODO only given class if selected
      isSelectedSig2.value && [
        "selected",
        selectedClassNameSig2.value
      ]
    ];
  }, "Tab_component_classNamesSig_useComputed_pM4HfopD0LY", [
    isSelectedSig,
    props,
    selectedClassNameSig
  ]));
  return /* @__PURE__ */ _jsxS("button", {
    ...props1,
    "aria-controls": fullPanelElementId,
    "aria-disabled": _wrapSignal(props1, "disabled"),
    children: /* @__PURE__ */ _jsxC(Slot, null, 3, "J8_0"),
    class: [
      props1.class?.value ?? props1.class,
      classNamesSig.value
    ],
    id: fullTabElementId,
    onClick$: [
      /* @__PURE__ */ inlinedQrl(() => {
        const [contextService2, props2] = useLexicalScope();
        return contextService2.selectTab$(props2.tabId);
      }, "Tab_component_button_onClick_IFqHcg6JGuU", [
        contextService,
        props
      ]),
      props1.onClick$
    ],
    onFocus$: [
      selectIfAutomatic$,
      props1.onFocus$
    ],
    onMouseEnter$: [
      selectIfAutomatic$,
      props1.onMouseEnter$
    ],
    ref: elementRefSig
  }, {
    "aria-selected": _fnSignal((p0) => p0.value, [
      isSelectedSig
    ], "p0.value"),
    role: "tab",
    tabIndex: _fnSignal((p0) => p0.value ? 0 : -1, [
      isSelectedSig
    ], "p0.value?0:-1"),
    type: "button"
  }, 0, "J8_1");
}, "Tab_component_YMTOyfPxkj4"));
export {
  TAB_ID_PREFIX,
  Tab,
  preventedKeys as _auto_preventedKeys
};
